// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("opensearch");

/**
 * The access key for use with AWS OpenSearch Service domains
 */
export declare const awsAccessKey: string | undefined;
Object.defineProperty(exports, "awsAccessKey", {
    get() {
        return __config.get("awsAccessKey");
    },
    enumerable: true,
});

/**
 * Amazon Resource Name of an IAM Role to assume prior to making AWS API calls.
 */
export declare const awsAssumeRoleArn: string | undefined;
Object.defineProperty(exports, "awsAssumeRoleArn", {
    get() {
        return __config.get("awsAssumeRoleArn");
    },
    enumerable: true,
});

/**
 * External ID configured in the IAM policy of the IAM Role to assume prior to making AWS API calls.
 */
export declare const awsAssumeRoleExternalId: string | undefined;
Object.defineProperty(exports, "awsAssumeRoleExternalId", {
    get() {
        return __config.get("awsAssumeRoleExternalId");
    },
    enumerable: true,
});

/**
 * The AWS profile for use with AWS OpenSearch Service domains
 */
export declare const awsProfile: string | undefined;
Object.defineProperty(exports, "awsProfile", {
    get() {
        return __config.get("awsProfile");
    },
    enumerable: true,
});

/**
 * The AWS region for use in signing of AWS OpenSearch requests. Must be specified in order to use AWS URL signing with AWS
 * OpenSearch endpoint exposed on a custom DNS domain.
 */
export declare const awsRegion: string | undefined;
Object.defineProperty(exports, "awsRegion", {
    get() {
        return __config.get("awsRegion");
    },
    enumerable: true,
});

/**
 * The secret key for use with AWS OpenSearch Service domains
 */
export declare const awsSecretKey: string | undefined;
Object.defineProperty(exports, "awsSecretKey", {
    get() {
        return __config.get("awsSecretKey");
    },
    enumerable: true,
});

/**
 * AWS service name used in the credential scope of signed requests to OpenSearch.
 */
export declare const awsSignatureService: string | undefined;
Object.defineProperty(exports, "awsSignatureService", {
    get() {
        return __config.get("awsSignatureService");
    },
    enumerable: true,
});

/**
 * The session token for use with AWS OpenSearch Service domains
 */
export declare const awsToken: string | undefined;
Object.defineProperty(exports, "awsToken", {
    get() {
        return __config.get("awsToken");
    },
    enumerable: true,
});

/**
 * A Custom CA certificate
 */
export declare const cacertFile: string | undefined;
Object.defineProperty(exports, "cacertFile", {
    get() {
        return __config.get("cacertFile");
    },
    enumerable: true,
});

/**
 * A X509 certificate to connect to OpenSearch
 */
export declare const clientCertPath: string | undefined;
Object.defineProperty(exports, "clientCertPath", {
    get() {
        return __config.get("clientCertPath");
    },
    enumerable: true,
});

/**
 * A X509 key to connect to OpenSearch
 */
export declare const clientKeyPath: string | undefined;
Object.defineProperty(exports, "clientKeyPath", {
    get() {
        return __config.get("clientKeyPath");
    },
    enumerable: true,
});

/**
 * Set the client healthcheck option for the OpenSearch client. Healthchecking is designed for direct access to the
 * cluster.
 */
export declare const healthcheck: boolean | undefined;
Object.defineProperty(exports, "healthcheck", {
    get() {
        return __config.getObject<boolean>("healthcheck");
    },
    enumerable: true,
});

/**
 * If provided, sets the 'Host' header of requests and the 'ServerName' for certificate validation to this value. See the
 * documentation on connecting to OpenSearch via an SSH tunnel.
 */
export declare const hostOverride: string | undefined;
Object.defineProperty(exports, "hostOverride", {
    get() {
        return __config.get("hostOverride");
    },
    enumerable: true,
});

/**
 * Disable SSL verification of API calls
 */
export declare const insecure: boolean | undefined;
Object.defineProperty(exports, "insecure", {
    get() {
        return __config.getObject<boolean>("insecure");
    },
    enumerable: true,
});

/**
 * OpenSearch Version
 */
export declare const opensearchVersion: string | undefined;
Object.defineProperty(exports, "opensearchVersion", {
    get() {
        return __config.get("opensearchVersion");
    },
    enumerable: true,
});

/**
 * Password to use to connect to OpenSearch using basic auth
 */
export declare const password: string | undefined;
Object.defineProperty(exports, "password", {
    get() {
        return __config.get("password");
    },
    enumerable: true,
});

/**
 * Proxy URL to use for requests to OpenSearch.
 */
export declare const proxy: string | undefined;
Object.defineProperty(exports, "proxy", {
    get() {
        return __config.get("proxy");
    },
    enumerable: true,
});

/**
 * Enable signing of AWS OpenSearch requests. The `url` must refer to AWS ES domain (`*.<region>.es.amazonaws.com`), or
 * `awsRegion` must be specified explicitly.
 */
export declare const signAwsRequests: boolean | undefined;
Object.defineProperty(exports, "signAwsRequests", {
    get() {
        return __config.getObject<boolean>("signAwsRequests");
    },
    enumerable: true,
});

/**
 * Set the node sniffing option for the OpenSearch client. Client won't work with sniffing if nodes are not routable.
 */
export declare const sniff: boolean | undefined;
Object.defineProperty(exports, "sniff", {
    get() {
        return __config.getObject<boolean>("sniff");
    },
    enumerable: true,
});

/**
 * A bearer token or ApiKey for an Authorization header, e.g. Active Directory API key.
 */
export declare const token: string | undefined;
Object.defineProperty(exports, "token", {
    get() {
        return __config.get("token");
    },
    enumerable: true,
});

/**
 * The type of token, usually ApiKey or Bearer
 */
export declare const tokenName: string | undefined;
Object.defineProperty(exports, "tokenName", {
    get() {
        return __config.get("tokenName");
    },
    enumerable: true,
});

/**
 * OpenSearch URL
 */
export declare const url: string | undefined;
Object.defineProperty(exports, "url", {
    get() {
        return __config.get("url");
    },
    enumerable: true,
});

/**
 * Username to use to connect to OpenSearch using basic auth
 */
export declare const username: string | undefined;
Object.defineProperty(exports, "username", {
    get() {
        return __config.get("username");
    },
    enumerable: true,
});

/**
 * Version ping timeout in seconds
 */
export declare const versionPingTimeout: number | undefined;
Object.defineProperty(exports, "versionPingTimeout", {
    get() {
        return __config.getObject<number>("versionPingTimeout");
    },
    enumerable: true,
});

