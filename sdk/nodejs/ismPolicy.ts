// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides an OpenSearch Index State Management (ISM) policy. Please refer to the OpenSearch ISM documentation for details.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as opensearch from "@piclemx/pulumi-opensearch";
 *
 * // Create an ISM policy
 * const cleanup = new opensearch.IsmPolicy("cleanup", {
 *     policyId: "delete_after_15d",
 *     body: fs.readFileSync(`${path.module}/policies/delete_after_15d.json`, "utf8"),
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import opensearch:index/ismPolicy:IsmPolicy cleanup delete_after_15d
 * ```
 */
export class IsmPolicy extends pulumi.CustomResource {
    /**
     * Get an existing IsmPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IsmPolicyState, opts?: pulumi.CustomResourceOptions): IsmPolicy {
        return new IsmPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opensearch:index/ismPolicy:IsmPolicy';

    /**
     * Returns true if the given object is an instance of IsmPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IsmPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IsmPolicy.__pulumiType;
    }

    /**
     * The policy document.
     */
    public readonly body!: pulumi.Output<string>;
    /**
     * The id of the ISM policy.
     */
    public readonly policyId!: pulumi.Output<string>;
    /**
     * The primary term of the ISM policy version.
     */
    public readonly primaryTerm!: pulumi.Output<number>;
    /**
     * The sequence number of the ISM policy version.
     */
    public readonly seqNo!: pulumi.Output<number>;

    /**
     * Create a IsmPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IsmPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IsmPolicyArgs | IsmPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IsmPolicyState | undefined;
            resourceInputs["body"] = state ? state.body : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["primaryTerm"] = state ? state.primaryTerm : undefined;
            resourceInputs["seqNo"] = state ? state.seqNo : undefined;
        } else {
            const args = argsOrState as IsmPolicyArgs | undefined;
            if ((!args || args.body === undefined) && !opts.urn) {
                throw new Error("Missing required property 'body'");
            }
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            resourceInputs["body"] = args ? args.body : undefined;
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["primaryTerm"] = args ? args.primaryTerm : undefined;
            resourceInputs["seqNo"] = args ? args.seqNo : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IsmPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IsmPolicy resources.
 */
export interface IsmPolicyState {
    /**
     * The policy document.
     */
    body?: pulumi.Input<string>;
    /**
     * The id of the ISM policy.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The primary term of the ISM policy version.
     */
    primaryTerm?: pulumi.Input<number>;
    /**
     * The sequence number of the ISM policy version.
     */
    seqNo?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a IsmPolicy resource.
 */
export interface IsmPolicyArgs {
    /**
     * The policy document.
     */
    body: pulumi.Input<string>;
    /**
     * The id of the ISM policy.
     */
    policyId: pulumi.Input<string>;
    /**
     * The primary term of the ISM policy version.
     */
    primaryTerm?: pulumi.Input<number>;
    /**
     * The sequence number of the ISM policy version.
     */
    seqNo?: pulumi.Input<number>;
}
