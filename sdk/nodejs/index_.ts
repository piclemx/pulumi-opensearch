// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides an OpenSearch index resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as opensearch from "@piclemx/pulumi-opensearch";
 *
 * // Create a simple index
 * const test_simple_index = new opensearch.Index("test-simple-index", {
 *     mappings: `{
 *   "properties": {
 *     "name": {
 *       "type": "text"
 *     }
 *   }
 * }
 *
 * `,
 *     numberOfReplicas: "1",
 *     numberOfShards: "1",
 * });
 * ```
 *
 * ## Import
 *
 * Import by name
 *
 * ```sh
 *  $ pulumi import opensearch:index/index:Index test terraform-test
 * ```
 */
export class Index extends pulumi.CustomResource {
    /**
     * Get an existing Index resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IndexState, opts?: pulumi.CustomResourceOptions): Index {
        return new Index(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opensearch:index/index:Index';

    /**
     * Returns true if the given object is an instance of Index.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Index {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Index.__pulumiType;
    }

    /**
     * A JSON string describing a set of aliases. The index aliases API allows aliasing an index with a name, with all APIs automatically converting the alias name to the actual index name. An alias can also be mapped to more than one index, and when specifying it, the alias will automatically expand to the aliased indices.
     */
    public readonly aliases!: pulumi.Output<string | undefined>;
    /**
     * A JSON string describing the analyzers applied to the index.
     */
    public readonly analysisAnalyzer!: pulumi.Output<string | undefined>;
    /**
     * A JSON string describing the charFilters applied to the index.
     */
    public readonly analysisCharFilter!: pulumi.Output<string | undefined>;
    /**
     * A JSON string describing the filters applied to the index.
     */
    public readonly analysisFilter!: pulumi.Output<string | undefined>;
    /**
     * A JSON string describing the normalizers applied to the index.
     */
    public readonly analysisNormalizer!: pulumi.Output<string | undefined>;
    /**
     * A JSON string describing the tokenizers applied to the index.
     */
    public readonly analysisTokenizer!: pulumi.Output<string | undefined>;
    /**
     * The maximum number of tokens that can be produced using _analyze API. A stringified number.
     */
    public readonly analyzeMaxTokenCount!: pulumi.Output<string | undefined>;
    /**
     * Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)
     */
    public readonly autoExpandReplicas!: pulumi.Output<string | undefined>;
    /**
     * Set to `true` to disable index metadata reads and writes.
     */
    public readonly blocksMetadata!: pulumi.Output<boolean | undefined>;
    /**
     * Set to `true` to disable read operations against the index.
     */
    public readonly blocksRead!: pulumi.Output<boolean | undefined>;
    /**
     * Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.
     */
    public readonly blocksReadOnly!: pulumi.Output<boolean | undefined>;
    /**
     * Identical to `index.blocks.read_only` but allows deleting the index to free up resources.
     */
    public readonly blocksReadOnlyAllowDelete!: pulumi.Output<boolean | undefined>;
    /**
     * Set to `true` to disable data write operations against the index. This setting does not affect metadata.
     */
    public readonly blocksWrite!: pulumi.Output<boolean | undefined>;
    /**
     * The `default` value compresses stored data with LZ4 compression, but this can be set to `bestCompression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.
     */
    public readonly codec!: pulumi.Output<string | undefined>;
    /**
     * The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.
     */
    public readonly defaultPipeline!: pulumi.Output<string | undefined>;
    /**
     * A boolean that indicates that the index should be deleted even if it contains documents.
     */
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    /**
     * The length of time that a deleted document's version number remains available for further versioned operations.
     */
    public readonly gcDeletes!: pulumi.Output<string | undefined>;
    /**
     * The maximum number of characters that will be analyzed for a highlight request. A stringified number.
     */
    public readonly highlightMaxAnalyzedOffset!: pulumi.Output<string | undefined>;
    /**
     * A string that indicates if and what we should pass to include*type*name parameter. Set to `"false"` when trying to create an index on a v6 cluster without a doc type or set to `"true"` when trying to create an index on a v7 cluster with a doc type. Since mapping updates are not currently supported, this applies only on index create.
     */
    public readonly includeTypeName!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether the index should build native library indices for the knn*vector fields. If set to false, the knn*vector fields will be stored in doc values, but Approximate k-NN search functionality will be disabled.
     */
    public readonly indexKnn!: pulumi.Output<boolean | undefined>;
    /**
     * The size of the dynamic list used during k-NN searches. Higher values lead to more accurate but slower searches. Only available for nmslib.
     */
    public readonly indexKnnAlgoParamEfSearch!: pulumi.Output<string | undefined>;
    /**
     * A JSON string describing the default index similarity config.
     */
    public readonly indexSimilarityDefault!: pulumi.Output<string | undefined>;
    /**
     * Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
     */
    public readonly indexingSlowlogLevel!: pulumi.Output<string | undefined>;
    /**
     * Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.
     */
    public readonly indexingSlowlogSource!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`
     */
    public readonly indexingSlowlogThresholdIndexDebug!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`
     */
    public readonly indexingSlowlogThresholdIndexInfo!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`
     */
    public readonly indexingSlowlogThresholdIndexTrace!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`
     */
    public readonly indexingSlowlogThresholdIndexWarn!: pulumi.Output<string | undefined>;
    /**
     * Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.
     */
    public readonly loadFixedBitsetFiltersEagerly!: pulumi.Output<boolean | undefined>;
    /**
     * A JSON string defining how documents in the index, and the fields they contain, are stored and indexed. To avoid the complexities of field mapping updates, updates of this field are not allowed via this provider.
     */
    public readonly mappings!: pulumi.Output<string | undefined>;
    /**
     * The maximum number of `docvalueFields` that are allowed in a query. A stringified number.
     */
    public readonly maxDocvalueFieldsSearch!: pulumi.Output<string | undefined>;
    /**
     * The maximum value of `from + size` for inner hits definition and top hits aggregations to this index. A stringified number.
     */
    public readonly maxInnerResultWindow!: pulumi.Output<string | undefined>;
    /**
     * The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter. A stringified number.
     */
    public readonly maxNgramDiff!: pulumi.Output<string | undefined>;
    /**
     * Maximum number of refresh listeners available on each shard of the index. A stringified number.
     */
    public readonly maxRefreshListeners!: pulumi.Output<string | undefined>;
    /**
     * The maximum length of regex that can be used in Regexp Query. A stringified number.
     */
    public readonly maxRegexLength!: pulumi.Output<string | undefined>;
    /**
     * The maximum value of `windowSize` for `rescore` requests in searches of this index. A stringified number.
     */
    public readonly maxRescoreWindow!: pulumi.Output<string | undefined>;
    /**
     * The maximum value of `from + size` for searches to this index. A stringified number.
     */
    public readonly maxResultWindow!: pulumi.Output<string | undefined>;
    /**
     * The maximum number of `scriptFields` that are allowed in a query. A stringified number.
     */
    public readonly maxScriptFields!: pulumi.Output<string | undefined>;
    /**
     * The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter. A stringified number.
     */
    public readonly maxShingleDiff!: pulumi.Output<string | undefined>;
    /**
     * The maximum number of terms that can be used in Terms Query. A stringified number.
     */
    public readonly maxTermsCount!: pulumi.Output<string | undefined>;
    /**
     * Name of the index to create
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Number of shard replicas. A stringified number.
     */
    public readonly numberOfReplicas!: pulumi.Output<string>;
    /**
     * Value used with number*of*shards to route documents to a primary shard. A stringified number. This can be set only on creation.
     */
    public readonly numberOfRoutingShards!: pulumi.Output<string | undefined>;
    /**
     * Number of shards for the index. This can be set only on creation.
     */
    public readonly numberOfShards!: pulumi.Output<string>;
    /**
     * How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.
     */
    public readonly refreshInterval!: pulumi.Output<string | undefined>;
    public readonly rolloverAlias!: pulumi.Output<string>;
    /**
     * Controls shard allocation for this index. It can be set to: `all` , `primaries` , `newPrimaries` , `none`.
     */
    public readonly routingAllocationEnable!: pulumi.Output<string | undefined>;
    /**
     * The number of shards a custom routing value can go to. A stringified number. This can be set only on creation.
     */
    public readonly routingPartitionSize!: pulumi.Output<string | undefined>;
    /**
     * Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.
     */
    public readonly routingRebalanceEnable!: pulumi.Output<string | undefined>;
    /**
     * How long a shard can not receive a search or get request until it’s considered search idle.
     */
    public readonly searchIdleAfter!: pulumi.Output<string | undefined>;
    /**
     * Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
     */
    public readonly searchSlowlogLevel!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`
     */
    public readonly searchSlowlogThresholdFetchDebug!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`
     */
    public readonly searchSlowlogThresholdFetchInfo!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`
     */
    public readonly searchSlowlogThresholdFetchTrace!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`
     */
    public readonly searchSlowlogThresholdFetchWarn!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`
     */
    public readonly searchSlowlogThresholdQueryDebug!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`
     */
    public readonly searchSlowlogThresholdQueryInfo!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`
     */
    public readonly searchSlowlogThresholdQueryTrace!: pulumi.Output<string | undefined>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`
     */
    public readonly searchSlowlogThresholdQueryWarn!: pulumi.Output<string | undefined>;
    /**
     * Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.
     */
    public readonly shardCheckOnStartup!: pulumi.Output<string | undefined>;
    /**
     * The field to sort shards in this index by.
     */
    public readonly sortField!: pulumi.Output<string | undefined>;
    /**
     * The direction to sort shards in. Accepts `asc`, `desc`.
     */
    public readonly sortOrder!: pulumi.Output<string | undefined>;

    /**
     * Create a Index resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: IndexArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IndexArgs | IndexState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IndexState | undefined;
            resourceInputs["aliases"] = state ? state.aliases : undefined;
            resourceInputs["analysisAnalyzer"] = state ? state.analysisAnalyzer : undefined;
            resourceInputs["analysisCharFilter"] = state ? state.analysisCharFilter : undefined;
            resourceInputs["analysisFilter"] = state ? state.analysisFilter : undefined;
            resourceInputs["analysisNormalizer"] = state ? state.analysisNormalizer : undefined;
            resourceInputs["analysisTokenizer"] = state ? state.analysisTokenizer : undefined;
            resourceInputs["analyzeMaxTokenCount"] = state ? state.analyzeMaxTokenCount : undefined;
            resourceInputs["autoExpandReplicas"] = state ? state.autoExpandReplicas : undefined;
            resourceInputs["blocksMetadata"] = state ? state.blocksMetadata : undefined;
            resourceInputs["blocksRead"] = state ? state.blocksRead : undefined;
            resourceInputs["blocksReadOnly"] = state ? state.blocksReadOnly : undefined;
            resourceInputs["blocksReadOnlyAllowDelete"] = state ? state.blocksReadOnlyAllowDelete : undefined;
            resourceInputs["blocksWrite"] = state ? state.blocksWrite : undefined;
            resourceInputs["codec"] = state ? state.codec : undefined;
            resourceInputs["defaultPipeline"] = state ? state.defaultPipeline : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["gcDeletes"] = state ? state.gcDeletes : undefined;
            resourceInputs["highlightMaxAnalyzedOffset"] = state ? state.highlightMaxAnalyzedOffset : undefined;
            resourceInputs["includeTypeName"] = state ? state.includeTypeName : undefined;
            resourceInputs["indexKnn"] = state ? state.indexKnn : undefined;
            resourceInputs["indexKnnAlgoParamEfSearch"] = state ? state.indexKnnAlgoParamEfSearch : undefined;
            resourceInputs["indexSimilarityDefault"] = state ? state.indexSimilarityDefault : undefined;
            resourceInputs["indexingSlowlogLevel"] = state ? state.indexingSlowlogLevel : undefined;
            resourceInputs["indexingSlowlogSource"] = state ? state.indexingSlowlogSource : undefined;
            resourceInputs["indexingSlowlogThresholdIndexDebug"] = state ? state.indexingSlowlogThresholdIndexDebug : undefined;
            resourceInputs["indexingSlowlogThresholdIndexInfo"] = state ? state.indexingSlowlogThresholdIndexInfo : undefined;
            resourceInputs["indexingSlowlogThresholdIndexTrace"] = state ? state.indexingSlowlogThresholdIndexTrace : undefined;
            resourceInputs["indexingSlowlogThresholdIndexWarn"] = state ? state.indexingSlowlogThresholdIndexWarn : undefined;
            resourceInputs["loadFixedBitsetFiltersEagerly"] = state ? state.loadFixedBitsetFiltersEagerly : undefined;
            resourceInputs["mappings"] = state ? state.mappings : undefined;
            resourceInputs["maxDocvalueFieldsSearch"] = state ? state.maxDocvalueFieldsSearch : undefined;
            resourceInputs["maxInnerResultWindow"] = state ? state.maxInnerResultWindow : undefined;
            resourceInputs["maxNgramDiff"] = state ? state.maxNgramDiff : undefined;
            resourceInputs["maxRefreshListeners"] = state ? state.maxRefreshListeners : undefined;
            resourceInputs["maxRegexLength"] = state ? state.maxRegexLength : undefined;
            resourceInputs["maxRescoreWindow"] = state ? state.maxRescoreWindow : undefined;
            resourceInputs["maxResultWindow"] = state ? state.maxResultWindow : undefined;
            resourceInputs["maxScriptFields"] = state ? state.maxScriptFields : undefined;
            resourceInputs["maxShingleDiff"] = state ? state.maxShingleDiff : undefined;
            resourceInputs["maxTermsCount"] = state ? state.maxTermsCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numberOfReplicas"] = state ? state.numberOfReplicas : undefined;
            resourceInputs["numberOfRoutingShards"] = state ? state.numberOfRoutingShards : undefined;
            resourceInputs["numberOfShards"] = state ? state.numberOfShards : undefined;
            resourceInputs["refreshInterval"] = state ? state.refreshInterval : undefined;
            resourceInputs["rolloverAlias"] = state ? state.rolloverAlias : undefined;
            resourceInputs["routingAllocationEnable"] = state ? state.routingAllocationEnable : undefined;
            resourceInputs["routingPartitionSize"] = state ? state.routingPartitionSize : undefined;
            resourceInputs["routingRebalanceEnable"] = state ? state.routingRebalanceEnable : undefined;
            resourceInputs["searchIdleAfter"] = state ? state.searchIdleAfter : undefined;
            resourceInputs["searchSlowlogLevel"] = state ? state.searchSlowlogLevel : undefined;
            resourceInputs["searchSlowlogThresholdFetchDebug"] = state ? state.searchSlowlogThresholdFetchDebug : undefined;
            resourceInputs["searchSlowlogThresholdFetchInfo"] = state ? state.searchSlowlogThresholdFetchInfo : undefined;
            resourceInputs["searchSlowlogThresholdFetchTrace"] = state ? state.searchSlowlogThresholdFetchTrace : undefined;
            resourceInputs["searchSlowlogThresholdFetchWarn"] = state ? state.searchSlowlogThresholdFetchWarn : undefined;
            resourceInputs["searchSlowlogThresholdQueryDebug"] = state ? state.searchSlowlogThresholdQueryDebug : undefined;
            resourceInputs["searchSlowlogThresholdQueryInfo"] = state ? state.searchSlowlogThresholdQueryInfo : undefined;
            resourceInputs["searchSlowlogThresholdQueryTrace"] = state ? state.searchSlowlogThresholdQueryTrace : undefined;
            resourceInputs["searchSlowlogThresholdQueryWarn"] = state ? state.searchSlowlogThresholdQueryWarn : undefined;
            resourceInputs["shardCheckOnStartup"] = state ? state.shardCheckOnStartup : undefined;
            resourceInputs["sortField"] = state ? state.sortField : undefined;
            resourceInputs["sortOrder"] = state ? state.sortOrder : undefined;
        } else {
            const args = argsOrState as IndexArgs | undefined;
            resourceInputs["aliases"] = args ? args.aliases : undefined;
            resourceInputs["analysisAnalyzer"] = args ? args.analysisAnalyzer : undefined;
            resourceInputs["analysisCharFilter"] = args ? args.analysisCharFilter : undefined;
            resourceInputs["analysisFilter"] = args ? args.analysisFilter : undefined;
            resourceInputs["analysisNormalizer"] = args ? args.analysisNormalizer : undefined;
            resourceInputs["analysisTokenizer"] = args ? args.analysisTokenizer : undefined;
            resourceInputs["analyzeMaxTokenCount"] = args ? args.analyzeMaxTokenCount : undefined;
            resourceInputs["autoExpandReplicas"] = args ? args.autoExpandReplicas : undefined;
            resourceInputs["blocksMetadata"] = args ? args.blocksMetadata : undefined;
            resourceInputs["blocksRead"] = args ? args.blocksRead : undefined;
            resourceInputs["blocksReadOnly"] = args ? args.blocksReadOnly : undefined;
            resourceInputs["blocksReadOnlyAllowDelete"] = args ? args.blocksReadOnlyAllowDelete : undefined;
            resourceInputs["blocksWrite"] = args ? args.blocksWrite : undefined;
            resourceInputs["codec"] = args ? args.codec : undefined;
            resourceInputs["defaultPipeline"] = args ? args.defaultPipeline : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["gcDeletes"] = args ? args.gcDeletes : undefined;
            resourceInputs["highlightMaxAnalyzedOffset"] = args ? args.highlightMaxAnalyzedOffset : undefined;
            resourceInputs["includeTypeName"] = args ? args.includeTypeName : undefined;
            resourceInputs["indexKnn"] = args ? args.indexKnn : undefined;
            resourceInputs["indexKnnAlgoParamEfSearch"] = args ? args.indexKnnAlgoParamEfSearch : undefined;
            resourceInputs["indexSimilarityDefault"] = args ? args.indexSimilarityDefault : undefined;
            resourceInputs["indexingSlowlogLevel"] = args ? args.indexingSlowlogLevel : undefined;
            resourceInputs["indexingSlowlogSource"] = args ? args.indexingSlowlogSource : undefined;
            resourceInputs["indexingSlowlogThresholdIndexDebug"] = args ? args.indexingSlowlogThresholdIndexDebug : undefined;
            resourceInputs["indexingSlowlogThresholdIndexInfo"] = args ? args.indexingSlowlogThresholdIndexInfo : undefined;
            resourceInputs["indexingSlowlogThresholdIndexTrace"] = args ? args.indexingSlowlogThresholdIndexTrace : undefined;
            resourceInputs["indexingSlowlogThresholdIndexWarn"] = args ? args.indexingSlowlogThresholdIndexWarn : undefined;
            resourceInputs["loadFixedBitsetFiltersEagerly"] = args ? args.loadFixedBitsetFiltersEagerly : undefined;
            resourceInputs["mappings"] = args ? args.mappings : undefined;
            resourceInputs["maxDocvalueFieldsSearch"] = args ? args.maxDocvalueFieldsSearch : undefined;
            resourceInputs["maxInnerResultWindow"] = args ? args.maxInnerResultWindow : undefined;
            resourceInputs["maxNgramDiff"] = args ? args.maxNgramDiff : undefined;
            resourceInputs["maxRefreshListeners"] = args ? args.maxRefreshListeners : undefined;
            resourceInputs["maxRegexLength"] = args ? args.maxRegexLength : undefined;
            resourceInputs["maxRescoreWindow"] = args ? args.maxRescoreWindow : undefined;
            resourceInputs["maxResultWindow"] = args ? args.maxResultWindow : undefined;
            resourceInputs["maxScriptFields"] = args ? args.maxScriptFields : undefined;
            resourceInputs["maxShingleDiff"] = args ? args.maxShingleDiff : undefined;
            resourceInputs["maxTermsCount"] = args ? args.maxTermsCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numberOfReplicas"] = args ? args.numberOfReplicas : undefined;
            resourceInputs["numberOfRoutingShards"] = args ? args.numberOfRoutingShards : undefined;
            resourceInputs["numberOfShards"] = args ? args.numberOfShards : undefined;
            resourceInputs["refreshInterval"] = args ? args.refreshInterval : undefined;
            resourceInputs["rolloverAlias"] = args ? args.rolloverAlias : undefined;
            resourceInputs["routingAllocationEnable"] = args ? args.routingAllocationEnable : undefined;
            resourceInputs["routingPartitionSize"] = args ? args.routingPartitionSize : undefined;
            resourceInputs["routingRebalanceEnable"] = args ? args.routingRebalanceEnable : undefined;
            resourceInputs["searchIdleAfter"] = args ? args.searchIdleAfter : undefined;
            resourceInputs["searchSlowlogLevel"] = args ? args.searchSlowlogLevel : undefined;
            resourceInputs["searchSlowlogThresholdFetchDebug"] = args ? args.searchSlowlogThresholdFetchDebug : undefined;
            resourceInputs["searchSlowlogThresholdFetchInfo"] = args ? args.searchSlowlogThresholdFetchInfo : undefined;
            resourceInputs["searchSlowlogThresholdFetchTrace"] = args ? args.searchSlowlogThresholdFetchTrace : undefined;
            resourceInputs["searchSlowlogThresholdFetchWarn"] = args ? args.searchSlowlogThresholdFetchWarn : undefined;
            resourceInputs["searchSlowlogThresholdQueryDebug"] = args ? args.searchSlowlogThresholdQueryDebug : undefined;
            resourceInputs["searchSlowlogThresholdQueryInfo"] = args ? args.searchSlowlogThresholdQueryInfo : undefined;
            resourceInputs["searchSlowlogThresholdQueryTrace"] = args ? args.searchSlowlogThresholdQueryTrace : undefined;
            resourceInputs["searchSlowlogThresholdQueryWarn"] = args ? args.searchSlowlogThresholdQueryWarn : undefined;
            resourceInputs["shardCheckOnStartup"] = args ? args.shardCheckOnStartup : undefined;
            resourceInputs["sortField"] = args ? args.sortField : undefined;
            resourceInputs["sortOrder"] = args ? args.sortOrder : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Index.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Index resources.
 */
export interface IndexState {
    /**
     * A JSON string describing a set of aliases. The index aliases API allows aliasing an index with a name, with all APIs automatically converting the alias name to the actual index name. An alias can also be mapped to more than one index, and when specifying it, the alias will automatically expand to the aliased indices.
     */
    aliases?: pulumi.Input<string>;
    /**
     * A JSON string describing the analyzers applied to the index.
     */
    analysisAnalyzer?: pulumi.Input<string>;
    /**
     * A JSON string describing the charFilters applied to the index.
     */
    analysisCharFilter?: pulumi.Input<string>;
    /**
     * A JSON string describing the filters applied to the index.
     */
    analysisFilter?: pulumi.Input<string>;
    /**
     * A JSON string describing the normalizers applied to the index.
     */
    analysisNormalizer?: pulumi.Input<string>;
    /**
     * A JSON string describing the tokenizers applied to the index.
     */
    analysisTokenizer?: pulumi.Input<string>;
    /**
     * The maximum number of tokens that can be produced using _analyze API. A stringified number.
     */
    analyzeMaxTokenCount?: pulumi.Input<string>;
    /**
     * Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)
     */
    autoExpandReplicas?: pulumi.Input<string>;
    /**
     * Set to `true` to disable index metadata reads and writes.
     */
    blocksMetadata?: pulumi.Input<boolean>;
    /**
     * Set to `true` to disable read operations against the index.
     */
    blocksRead?: pulumi.Input<boolean>;
    /**
     * Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.
     */
    blocksReadOnly?: pulumi.Input<boolean>;
    /**
     * Identical to `index.blocks.read_only` but allows deleting the index to free up resources.
     */
    blocksReadOnlyAllowDelete?: pulumi.Input<boolean>;
    /**
     * Set to `true` to disable data write operations against the index. This setting does not affect metadata.
     */
    blocksWrite?: pulumi.Input<boolean>;
    /**
     * The `default` value compresses stored data with LZ4 compression, but this can be set to `bestCompression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.
     */
    codec?: pulumi.Input<string>;
    /**
     * The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.
     */
    defaultPipeline?: pulumi.Input<string>;
    /**
     * A boolean that indicates that the index should be deleted even if it contains documents.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * The length of time that a deleted document's version number remains available for further versioned operations.
     */
    gcDeletes?: pulumi.Input<string>;
    /**
     * The maximum number of characters that will be analyzed for a highlight request. A stringified number.
     */
    highlightMaxAnalyzedOffset?: pulumi.Input<string>;
    /**
     * A string that indicates if and what we should pass to include*type*name parameter. Set to `"false"` when trying to create an index on a v6 cluster without a doc type or set to `"true"` when trying to create an index on a v7 cluster with a doc type. Since mapping updates are not currently supported, this applies only on index create.
     */
    includeTypeName?: pulumi.Input<string>;
    /**
     * Indicates whether the index should build native library indices for the knn*vector fields. If set to false, the knn*vector fields will be stored in doc values, but Approximate k-NN search functionality will be disabled.
     */
    indexKnn?: pulumi.Input<boolean>;
    /**
     * The size of the dynamic list used during k-NN searches. Higher values lead to more accurate but slower searches. Only available for nmslib.
     */
    indexKnnAlgoParamEfSearch?: pulumi.Input<string>;
    /**
     * A JSON string describing the default index similarity config.
     */
    indexSimilarityDefault?: pulumi.Input<string>;
    /**
     * Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
     */
    indexingSlowlogLevel?: pulumi.Input<string>;
    /**
     * Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.
     */
    indexingSlowlogSource?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`
     */
    indexingSlowlogThresholdIndexDebug?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`
     */
    indexingSlowlogThresholdIndexInfo?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`
     */
    indexingSlowlogThresholdIndexTrace?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`
     */
    indexingSlowlogThresholdIndexWarn?: pulumi.Input<string>;
    /**
     * Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.
     */
    loadFixedBitsetFiltersEagerly?: pulumi.Input<boolean>;
    /**
     * A JSON string defining how documents in the index, and the fields they contain, are stored and indexed. To avoid the complexities of field mapping updates, updates of this field are not allowed via this provider.
     */
    mappings?: pulumi.Input<string>;
    /**
     * The maximum number of `docvalueFields` that are allowed in a query. A stringified number.
     */
    maxDocvalueFieldsSearch?: pulumi.Input<string>;
    /**
     * The maximum value of `from + size` for inner hits definition and top hits aggregations to this index. A stringified number.
     */
    maxInnerResultWindow?: pulumi.Input<string>;
    /**
     * The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter. A stringified number.
     */
    maxNgramDiff?: pulumi.Input<string>;
    /**
     * Maximum number of refresh listeners available on each shard of the index. A stringified number.
     */
    maxRefreshListeners?: pulumi.Input<string>;
    /**
     * The maximum length of regex that can be used in Regexp Query. A stringified number.
     */
    maxRegexLength?: pulumi.Input<string>;
    /**
     * The maximum value of `windowSize` for `rescore` requests in searches of this index. A stringified number.
     */
    maxRescoreWindow?: pulumi.Input<string>;
    /**
     * The maximum value of `from + size` for searches to this index. A stringified number.
     */
    maxResultWindow?: pulumi.Input<string>;
    /**
     * The maximum number of `scriptFields` that are allowed in a query. A stringified number.
     */
    maxScriptFields?: pulumi.Input<string>;
    /**
     * The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter. A stringified number.
     */
    maxShingleDiff?: pulumi.Input<string>;
    /**
     * The maximum number of terms that can be used in Terms Query. A stringified number.
     */
    maxTermsCount?: pulumi.Input<string>;
    /**
     * Name of the index to create
     */
    name?: pulumi.Input<string>;
    /**
     * Number of shard replicas. A stringified number.
     */
    numberOfReplicas?: pulumi.Input<string>;
    /**
     * Value used with number*of*shards to route documents to a primary shard. A stringified number. This can be set only on creation.
     */
    numberOfRoutingShards?: pulumi.Input<string>;
    /**
     * Number of shards for the index. This can be set only on creation.
     */
    numberOfShards?: pulumi.Input<string>;
    /**
     * How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.
     */
    refreshInterval?: pulumi.Input<string>;
    rolloverAlias?: pulumi.Input<string>;
    /**
     * Controls shard allocation for this index. It can be set to: `all` , `primaries` , `newPrimaries` , `none`.
     */
    routingAllocationEnable?: pulumi.Input<string>;
    /**
     * The number of shards a custom routing value can go to. A stringified number. This can be set only on creation.
     */
    routingPartitionSize?: pulumi.Input<string>;
    /**
     * Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.
     */
    routingRebalanceEnable?: pulumi.Input<string>;
    /**
     * How long a shard can not receive a search or get request until it’s considered search idle.
     */
    searchIdleAfter?: pulumi.Input<string>;
    /**
     * Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
     */
    searchSlowlogLevel?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`
     */
    searchSlowlogThresholdFetchDebug?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`
     */
    searchSlowlogThresholdFetchInfo?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`
     */
    searchSlowlogThresholdFetchTrace?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`
     */
    searchSlowlogThresholdFetchWarn?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`
     */
    searchSlowlogThresholdQueryDebug?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`
     */
    searchSlowlogThresholdQueryInfo?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`
     */
    searchSlowlogThresholdQueryTrace?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`
     */
    searchSlowlogThresholdQueryWarn?: pulumi.Input<string>;
    /**
     * Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.
     */
    shardCheckOnStartup?: pulumi.Input<string>;
    /**
     * The field to sort shards in this index by.
     */
    sortField?: pulumi.Input<string>;
    /**
     * The direction to sort shards in. Accepts `asc`, `desc`.
     */
    sortOrder?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Index resource.
 */
export interface IndexArgs {
    /**
     * A JSON string describing a set of aliases. The index aliases API allows aliasing an index with a name, with all APIs automatically converting the alias name to the actual index name. An alias can also be mapped to more than one index, and when specifying it, the alias will automatically expand to the aliased indices.
     */
    aliases?: pulumi.Input<string>;
    /**
     * A JSON string describing the analyzers applied to the index.
     */
    analysisAnalyzer?: pulumi.Input<string>;
    /**
     * A JSON string describing the charFilters applied to the index.
     */
    analysisCharFilter?: pulumi.Input<string>;
    /**
     * A JSON string describing the filters applied to the index.
     */
    analysisFilter?: pulumi.Input<string>;
    /**
     * A JSON string describing the normalizers applied to the index.
     */
    analysisNormalizer?: pulumi.Input<string>;
    /**
     * A JSON string describing the tokenizers applied to the index.
     */
    analysisTokenizer?: pulumi.Input<string>;
    /**
     * The maximum number of tokens that can be produced using _analyze API. A stringified number.
     */
    analyzeMaxTokenCount?: pulumi.Input<string>;
    /**
     * Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)
     */
    autoExpandReplicas?: pulumi.Input<string>;
    /**
     * Set to `true` to disable index metadata reads and writes.
     */
    blocksMetadata?: pulumi.Input<boolean>;
    /**
     * Set to `true` to disable read operations against the index.
     */
    blocksRead?: pulumi.Input<boolean>;
    /**
     * Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.
     */
    blocksReadOnly?: pulumi.Input<boolean>;
    /**
     * Identical to `index.blocks.read_only` but allows deleting the index to free up resources.
     */
    blocksReadOnlyAllowDelete?: pulumi.Input<boolean>;
    /**
     * Set to `true` to disable data write operations against the index. This setting does not affect metadata.
     */
    blocksWrite?: pulumi.Input<boolean>;
    /**
     * The `default` value compresses stored data with LZ4 compression, but this can be set to `bestCompression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.
     */
    codec?: pulumi.Input<string>;
    /**
     * The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.
     */
    defaultPipeline?: pulumi.Input<string>;
    /**
     * A boolean that indicates that the index should be deleted even if it contains documents.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * The length of time that a deleted document's version number remains available for further versioned operations.
     */
    gcDeletes?: pulumi.Input<string>;
    /**
     * The maximum number of characters that will be analyzed for a highlight request. A stringified number.
     */
    highlightMaxAnalyzedOffset?: pulumi.Input<string>;
    /**
     * A string that indicates if and what we should pass to include*type*name parameter. Set to `"false"` when trying to create an index on a v6 cluster without a doc type or set to `"true"` when trying to create an index on a v7 cluster with a doc type. Since mapping updates are not currently supported, this applies only on index create.
     */
    includeTypeName?: pulumi.Input<string>;
    /**
     * Indicates whether the index should build native library indices for the knn*vector fields. If set to false, the knn*vector fields will be stored in doc values, but Approximate k-NN search functionality will be disabled.
     */
    indexKnn?: pulumi.Input<boolean>;
    /**
     * The size of the dynamic list used during k-NN searches. Higher values lead to more accurate but slower searches. Only available for nmslib.
     */
    indexKnnAlgoParamEfSearch?: pulumi.Input<string>;
    /**
     * A JSON string describing the default index similarity config.
     */
    indexSimilarityDefault?: pulumi.Input<string>;
    /**
     * Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
     */
    indexingSlowlogLevel?: pulumi.Input<string>;
    /**
     * Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.
     */
    indexingSlowlogSource?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`
     */
    indexingSlowlogThresholdIndexDebug?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`
     */
    indexingSlowlogThresholdIndexInfo?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`
     */
    indexingSlowlogThresholdIndexTrace?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`
     */
    indexingSlowlogThresholdIndexWarn?: pulumi.Input<string>;
    /**
     * Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.
     */
    loadFixedBitsetFiltersEagerly?: pulumi.Input<boolean>;
    /**
     * A JSON string defining how documents in the index, and the fields they contain, are stored and indexed. To avoid the complexities of field mapping updates, updates of this field are not allowed via this provider.
     */
    mappings?: pulumi.Input<string>;
    /**
     * The maximum number of `docvalueFields` that are allowed in a query. A stringified number.
     */
    maxDocvalueFieldsSearch?: pulumi.Input<string>;
    /**
     * The maximum value of `from + size` for inner hits definition and top hits aggregations to this index. A stringified number.
     */
    maxInnerResultWindow?: pulumi.Input<string>;
    /**
     * The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter. A stringified number.
     */
    maxNgramDiff?: pulumi.Input<string>;
    /**
     * Maximum number of refresh listeners available on each shard of the index. A stringified number.
     */
    maxRefreshListeners?: pulumi.Input<string>;
    /**
     * The maximum length of regex that can be used in Regexp Query. A stringified number.
     */
    maxRegexLength?: pulumi.Input<string>;
    /**
     * The maximum value of `windowSize` for `rescore` requests in searches of this index. A stringified number.
     */
    maxRescoreWindow?: pulumi.Input<string>;
    /**
     * The maximum value of `from + size` for searches to this index. A stringified number.
     */
    maxResultWindow?: pulumi.Input<string>;
    /**
     * The maximum number of `scriptFields` that are allowed in a query. A stringified number.
     */
    maxScriptFields?: pulumi.Input<string>;
    /**
     * The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter. A stringified number.
     */
    maxShingleDiff?: pulumi.Input<string>;
    /**
     * The maximum number of terms that can be used in Terms Query. A stringified number.
     */
    maxTermsCount?: pulumi.Input<string>;
    /**
     * Name of the index to create
     */
    name?: pulumi.Input<string>;
    /**
     * Number of shard replicas. A stringified number.
     */
    numberOfReplicas?: pulumi.Input<string>;
    /**
     * Value used with number*of*shards to route documents to a primary shard. A stringified number. This can be set only on creation.
     */
    numberOfRoutingShards?: pulumi.Input<string>;
    /**
     * Number of shards for the index. This can be set only on creation.
     */
    numberOfShards?: pulumi.Input<string>;
    /**
     * How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.
     */
    refreshInterval?: pulumi.Input<string>;
    rolloverAlias?: pulumi.Input<string>;
    /**
     * Controls shard allocation for this index. It can be set to: `all` , `primaries` , `newPrimaries` , `none`.
     */
    routingAllocationEnable?: pulumi.Input<string>;
    /**
     * The number of shards a custom routing value can go to. A stringified number. This can be set only on creation.
     */
    routingPartitionSize?: pulumi.Input<string>;
    /**
     * Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.
     */
    routingRebalanceEnable?: pulumi.Input<string>;
    /**
     * How long a shard can not receive a search or get request until it’s considered search idle.
     */
    searchIdleAfter?: pulumi.Input<string>;
    /**
     * Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
     */
    searchSlowlogLevel?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`
     */
    searchSlowlogThresholdFetchDebug?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`
     */
    searchSlowlogThresholdFetchInfo?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`
     */
    searchSlowlogThresholdFetchTrace?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`
     */
    searchSlowlogThresholdFetchWarn?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`
     */
    searchSlowlogThresholdQueryDebug?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`
     */
    searchSlowlogThresholdQueryInfo?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`
     */
    searchSlowlogThresholdQueryTrace?: pulumi.Input<string>;
    /**
     * Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`
     */
    searchSlowlogThresholdQueryWarn?: pulumi.Input<string>;
    /**
     * Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.
     */
    shardCheckOnStartup?: pulumi.Input<string>;
    /**
     * The field to sort shards in this index by.
     */
    sortField?: pulumi.Input<string>;
    /**
     * The direction to sort shards in. Accepts `asc`, `desc`.
     */
    sortOrder?: pulumi.Input<string>;
}
