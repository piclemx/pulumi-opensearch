// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides an OpenSearch snapshot repository resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as opensearch from "@piclemx/pulumi-opensearch";
 *
 * // Create a snapshot repository
 * const repo = new opensearch.SnapshotRepository("repo", {
 *     settings: {
 *         bucket: "es-index-backups",
 *         region: "us-east-1",
 *         role_arn: "arn:aws:iam::123456789012:role/MyRole",
 *     },
 *     type: "s3",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import opensearch:index/snapshotRepository:SnapshotRepository repo es-index-backups
 * ```
 */
export class SnapshotRepository extends pulumi.CustomResource {
    /**
     * Get an existing SnapshotRepository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotRepositoryState, opts?: pulumi.CustomResourceOptions): SnapshotRepository {
        return new SnapshotRepository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opensearch:index/snapshotRepository:SnapshotRepository';

    /**
     * Returns true if the given object is an instance of SnapshotRepository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SnapshotRepository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SnapshotRepository.__pulumiType;
    }

    /**
     * The name of the repository.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The settings map applicable for the backend, see official documentation for plugins.
     */
    public readonly settings!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The name of the repository backend (required plugins must be installed).
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a SnapshotRepository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapshotRepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapshotRepositoryArgs | SnapshotRepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapshotRepositoryState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["settings"] = state ? state.settings : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as SnapshotRepositoryArgs | undefined;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["settings"] = args ? args.settings : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SnapshotRepository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SnapshotRepository resources.
 */
export interface SnapshotRepositoryState {
    /**
     * The name of the repository.
     */
    name?: pulumi.Input<string>;
    /**
     * The settings map applicable for the backend, see official documentation for plugins.
     */
    settings?: pulumi.Input<{[key: string]: any}>;
    /**
     * The name of the repository backend (required plugins must be installed).
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SnapshotRepository resource.
 */
export interface SnapshotRepositoryArgs {
    /**
     * The name of the repository.
     */
    name?: pulumi.Input<string>;
    /**
     * The settings map applicable for the backend, see official documentation for plugins.
     */
    settings?: pulumi.Input<{[key: string]: any}>;
    /**
     * The name of the repository backend (required plugins must be installed).
     */
    type: pulumi.Input<string>;
}
