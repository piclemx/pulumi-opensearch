// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides an OpenSearch security role mapping. Please refer to the OpenSearch Access Control documentation for details.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as opensearch from "@piclemx/pulumi-opensearch";
 *
 * // Create a role mapping
 * const mapper = new opensearch.RolesMapping("mapper", {
 *     backendRoles: [
 *         "arn:aws:iam::123456789012:role/lambda-call-opensearch",
 *         "arn:aws:iam::123456789012:role/run-containers",
 *     ],
 *     description: "Mapping AWS IAM roles to ES role",
 *     roleName: "logs_writer",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import opensearch:index/rolesMapping:RolesMapping mapper logs_writer
 * ```
 */
export class RolesMapping extends pulumi.CustomResource {
    /**
     * Get an existing RolesMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RolesMappingState, opts?: pulumi.CustomResourceOptions): RolesMapping {
        return new RolesMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opensearch:index/rolesMapping:RolesMapping';

    /**
     * Returns true if the given object is an instance of RolesMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RolesMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RolesMapping.__pulumiType;
    }

    /**
     * A list of backend roles.
     */
    public readonly andBackendRoles!: pulumi.Output<string[] | undefined>;
    /**
     * A list of backend roles.
     */
    public readonly backendRoles!: pulumi.Output<string[] | undefined>;
    /**
     * Description of the role mapping.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A list of host names.
     */
    public readonly hosts!: pulumi.Output<string[] | undefined>;
    /**
     * The name of the security role.
     */
    public readonly roleName!: pulumi.Output<string>;
    /**
     * A list of users.
     */
    public readonly users!: pulumi.Output<string[] | undefined>;

    /**
     * Create a RolesMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RolesMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RolesMappingArgs | RolesMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RolesMappingState | undefined;
            resourceInputs["andBackendRoles"] = state ? state.andBackendRoles : undefined;
            resourceInputs["backendRoles"] = state ? state.backendRoles : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hosts"] = state ? state.hosts : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as RolesMappingArgs | undefined;
            if ((!args || args.roleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleName'");
            }
            resourceInputs["andBackendRoles"] = args ? args.andBackendRoles : undefined;
            resourceInputs["backendRoles"] = args ? args.backendRoles : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["hosts"] = args ? args.hosts : undefined;
            resourceInputs["roleName"] = args ? args.roleName : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RolesMapping.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RolesMapping resources.
 */
export interface RolesMappingState {
    /**
     * A list of backend roles.
     */
    andBackendRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of backend roles.
     */
    backendRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the role mapping.
     */
    description?: pulumi.Input<string>;
    /**
     * A list of host names.
     */
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the security role.
     */
    roleName?: pulumi.Input<string>;
    /**
     * A list of users.
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a RolesMapping resource.
 */
export interface RolesMappingArgs {
    /**
     * A list of backend roles.
     */
    andBackendRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of backend roles.
     */
    backendRoles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Description of the role mapping.
     */
    description?: pulumi.Input<string>;
    /**
     * A list of host names.
     */
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the security role.
     */
    roleName: pulumi.Input<string>;
    /**
     * A list of users.
     */
    users?: pulumi.Input<pulumi.Input<string>[]>;
}
