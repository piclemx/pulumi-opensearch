// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as opensearch from "@piclemx/pulumi-opensearch";
 *
 * const test = new opensearch.AuditConfig("test", {
 *     audit: {
 *         disabledRestCategories: [
 *             "GRANTED_PRIVILEGES",
 *             "AUTHENTICATED",
 *         ],
 *         disabledTransportCategories: [
 *             "GRANTED_PRIVILEGES",
 *             "AUTHENTICATED",
 *         ],
 *         enableRest: true,
 *         enableTransport: true,
 *         excludeSensitiveHeaders: true,
 *         ignoreRequests: [
 *             "SearchRequest",
 *             "indices:data/read/*",
 *             "/_cluster/health",
 *         ],
 *         ignoreUsers: ["dashboardserver"],
 *         logRequestBody: true,
 *         resolveBulkRequests: true,
 *         resolveIndices: true,
 *     },
 *     compliance: {
 *         enabled: true,
 *         externalConfig: false,
 *         internalConfig: true,
 *         readIgnoreUsers: ["read-ignore-1"],
 *         readMetadataOnly: true,
 *         readWatchedFields: [
 *             {
 *                 fields: [
 *                     "field-1",
 *                     "field-2",
 *                 ],
 *                 index: "read-index-1",
 *             },
 *             {
 *                 fields: ["field-3"],
 *                 index: "read-index-2",
 *             },
 *         ],
 *         writeIgnoreUsers: ["write-ignore-1"],
 *         writeLogDiffs: false,
 *         writeMetadataOnly: true,
 *         writeWatchedIndices: [
 *             "write-index-1",
 *             "write-index-2",
 *             "log-*",
 *             "*",
 *         ],
 *     },
 *     enabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * Import by name
 *
 * ```sh
 *  $ pulumi import opensearch:index/auditConfig:AuditConfig test_config my-config
 * ```
 */
export class AuditConfig extends pulumi.CustomResource {
    /**
     * Get an existing AuditConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuditConfigState, opts?: pulumi.CustomResourceOptions): AuditConfig {
        return new AuditConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'opensearch:index/auditConfig:AuditConfig';

    /**
     * Returns true if the given object is an instance of AuditConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuditConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuditConfig.__pulumiType;
    }

    public readonly audit!: pulumi.Output<outputs.AuditConfigAudit | undefined>;
    public readonly compliance!: pulumi.Output<outputs.AuditConfigCompliance | undefined>;
    public readonly enabled!: pulumi.Output<boolean>;

    /**
     * Create a AuditConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuditConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuditConfigArgs | AuditConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuditConfigState | undefined;
            resourceInputs["audit"] = state ? state.audit : undefined;
            resourceInputs["compliance"] = state ? state.compliance : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
        } else {
            const args = argsOrState as AuditConfigArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["audit"] = args ? args.audit : undefined;
            resourceInputs["compliance"] = args ? args.compliance : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuditConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuditConfig resources.
 */
export interface AuditConfigState {
    audit?: pulumi.Input<inputs.AuditConfigAudit>;
    compliance?: pulumi.Input<inputs.AuditConfigCompliance>;
    enabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AuditConfig resource.
 */
export interface AuditConfigArgs {
    audit?: pulumi.Input<inputs.AuditConfigAudit>;
    compliance?: pulumi.Input<inputs.AuditConfigCompliance>;
    enabled: pulumi.Input<boolean>;
}
