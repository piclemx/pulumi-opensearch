// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Piclemx.Opensearch
{
    /// <summary>
    /// Provides an OpenSearch Snapshot Management (SM) policy. Please refer to the OpenSearch SM documentation for details.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Opensearch = Piclemx.Opensearch;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a snapshot repository. Make sure you also have created the bucket (eg. 
    ///     // via `terraform-aws-modules/s3-bucket/aws`) and matching IAM role.
    ///     var repo = new Opensearch.SnapshotRepository("repo", new()
    ///     {
    ///         Type = "s3",
    ///         Settings = 
    ///         {
    ///             { "bucket", module.S3_snapshot.S3_bucket_id },
    ///             { "region", module.S3_snapshot.S3_bucket_region },
    ///             { "role_arn", aws_iam_role.Snapshot_create.Arn },
    ///             { "server_side_encryption", true },
    ///         },
    ///     });
    /// 
    ///     // Create the SM policy
    ///     var snapshotToS3 = new Opensearch.SmPolicy("snapshotToS3", new()
    ///     {
    ///         PolicyName = "snapshot_to_s3",
    ///         Body = repo.Name.Apply(name =&gt; JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["enabled"] = true,
    ///             ["description"] = "My snapshot policy",
    ///             ["creation"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["schedule"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["cron"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["expression"] = "0 0 * * *",
    ///                         ["timezone"] = "UTC",
    ///                     },
    ///                 },
    ///                 ["time_limit"] = "1h",
    ///             },
    ///             ["deletion"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["schedule"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["cron"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["expression"] = "0 0 * * *",
    ///                         ["timezone"] = "UTC",
    ///                     },
    ///                 },
    ///                 ["condition"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["max_age"] = "14d",
    ///                     ["max_count"] = 400,
    ///                     ["min_count"] = 1,
    ///                 },
    ///                 ["time_limit"] = "1h",
    ///             },
    ///             ["snapshot_config"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["timezone"] = "UTC",
    ///                 ["indices"] = "*",
    ///                 ["repository"] = name,
    ///             },
    ///         })),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import opensearch:index/smPolicy:SmPolicy cleanup snapshot_to_s3
    /// ```
    /// </summary>
    [OpensearchResourceType("opensearch:index/smPolicy:SmPolicy")]
    public partial class SmPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The policy document.
        /// </summary>
        [Output("body")]
        public Output<string> Body { get; private set; } = null!;

        /// <summary>
        /// The name of the SM policy.
        /// </summary>
        [Output("policyName")]
        public Output<string> PolicyName { get; private set; } = null!;

        /// <summary>
        /// The primary term of the SM policy version.
        /// </summary>
        [Output("primaryTerm")]
        public Output<int> PrimaryTerm { get; private set; } = null!;

        /// <summary>
        /// The sequence number of the SM policy version.
        /// </summary>
        [Output("seqNo")]
        public Output<int> SeqNo { get; private set; } = null!;


        /// <summary>
        /// Create a SmPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SmPolicy(string name, SmPolicyArgs args, CustomResourceOptions? options = null)
            : base("opensearch:index/smPolicy:SmPolicy", name, args ?? new SmPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SmPolicy(string name, Input<string> id, SmPolicyState? state = null, CustomResourceOptions? options = null)
            : base("opensearch:index/smPolicy:SmPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/piclemx/pulumi-opensearch",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SmPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SmPolicy Get(string name, Input<string> id, SmPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new SmPolicy(name, id, state, options);
        }
    }

    public sealed class SmPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The policy document.
        /// </summary>
        [Input("body", required: true)]
        public Input<string> Body { get; set; } = null!;

        /// <summary>
        /// The name of the SM policy.
        /// </summary>
        [Input("policyName", required: true)]
        public Input<string> PolicyName { get; set; } = null!;

        /// <summary>
        /// The primary term of the SM policy version.
        /// </summary>
        [Input("primaryTerm")]
        public Input<int>? PrimaryTerm { get; set; }

        /// <summary>
        /// The sequence number of the SM policy version.
        /// </summary>
        [Input("seqNo")]
        public Input<int>? SeqNo { get; set; }

        public SmPolicyArgs()
        {
        }
        public static new SmPolicyArgs Empty => new SmPolicyArgs();
    }

    public sealed class SmPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The policy document.
        /// </summary>
        [Input("body")]
        public Input<string>? Body { get; set; }

        /// <summary>
        /// The name of the SM policy.
        /// </summary>
        [Input("policyName")]
        public Input<string>? PolicyName { get; set; }

        /// <summary>
        /// The primary term of the SM policy version.
        /// </summary>
        [Input("primaryTerm")]
        public Input<int>? PrimaryTerm { get; set; }

        /// <summary>
        /// The sequence number of the SM policy version.
        /// </summary>
        [Input("seqNo")]
        public Input<int>? SeqNo { get; set; }

        public SmPolicyState()
        {
        }
        public static new SmPolicyState Empty => new SmPolicyState();
    }
}
