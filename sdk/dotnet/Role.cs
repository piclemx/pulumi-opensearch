// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Piclemx.Opensearch
{
    /// <summary>
    /// Provides an OpenSearch security role resource. Please refer to the OpenSearch Access Control documentation for details.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Opensearch = Piclemx.Opensearch;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // To set document level permissions:
    ///     var writer = new Opensearch.Role("writer", new()
    ///     {
    ///         ClusterPermissions = new[]
    ///         {
    ///             "*",
    ///         },
    ///         IndexPermissions = new[]
    ///         {
    ///             new Opensearch.Inputs.RoleIndexPermissionArgs
    ///             {
    ///                 AllowedActions = new[]
    ///                 {
    ///                     "read",
    ///                 },
    ///                 DocumentLevelSecurity = "{\"term\": { \"readable_by\": \"${user.name}\"}}",
    ///                 IndexPatterns = new[]
    ///                 {
    ///                     "pub*",
    ///                 },
    ///             },
    ///         },
    ///         RoleName = "foo_writer",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import opensearch:index/role:Role writer logs_writer
    /// ```
    /// </summary>
    [OpensearchResourceType("opensearch:index/role:Role")]
    public partial class Role : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of cluster permissions.
        /// </summary>
        [Output("clusterPermissions")]
        public Output<ImmutableArray<string>> ClusterPermissions { get; private set; } = null!;

        /// <summary>
        /// Description of the role.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A configuration of index permissions
        /// </summary>
        [Output("indexPermissions")]
        public Output<ImmutableArray<Outputs.RoleIndexPermission>> IndexPermissions { get; private set; } = null!;

        /// <summary>
        /// The name of the security role.
        /// </summary>
        [Output("roleName")]
        public Output<string> RoleName { get; private set; } = null!;

        /// <summary>
        /// A configuration of tenant permissions
        /// </summary>
        [Output("tenantPermissions")]
        public Output<ImmutableArray<Outputs.RoleTenantPermission>> TenantPermissions { get; private set; } = null!;


        /// <summary>
        /// Create a Role resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Role(string name, RoleArgs args, CustomResourceOptions? options = null)
            : base("opensearch:index/role:Role", name, args ?? new RoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Role(string name, Input<string> id, RoleState? state = null, CustomResourceOptions? options = null)
            : base("opensearch:index/role:Role", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/piclemx/pulumi-opensearch",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Role resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Role Get(string name, Input<string> id, RoleState? state = null, CustomResourceOptions? options = null)
        {
            return new Role(name, id, state, options);
        }
    }

    public sealed class RoleArgs : global::Pulumi.ResourceArgs
    {
        [Input("clusterPermissions")]
        private InputList<string>? _clusterPermissions;

        /// <summary>
        /// A list of cluster permissions.
        /// </summary>
        public InputList<string> ClusterPermissions
        {
            get => _clusterPermissions ?? (_clusterPermissions = new InputList<string>());
            set => _clusterPermissions = value;
        }

        /// <summary>
        /// Description of the role.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("indexPermissions")]
        private InputList<Inputs.RoleIndexPermissionArgs>? _indexPermissions;

        /// <summary>
        /// A configuration of index permissions
        /// </summary>
        public InputList<Inputs.RoleIndexPermissionArgs> IndexPermissions
        {
            get => _indexPermissions ?? (_indexPermissions = new InputList<Inputs.RoleIndexPermissionArgs>());
            set => _indexPermissions = value;
        }

        /// <summary>
        /// The name of the security role.
        /// </summary>
        [Input("roleName", required: true)]
        public Input<string> RoleName { get; set; } = null!;

        [Input("tenantPermissions")]
        private InputList<Inputs.RoleTenantPermissionArgs>? _tenantPermissions;

        /// <summary>
        /// A configuration of tenant permissions
        /// </summary>
        public InputList<Inputs.RoleTenantPermissionArgs> TenantPermissions
        {
            get => _tenantPermissions ?? (_tenantPermissions = new InputList<Inputs.RoleTenantPermissionArgs>());
            set => _tenantPermissions = value;
        }

        public RoleArgs()
        {
        }
        public static new RoleArgs Empty => new RoleArgs();
    }

    public sealed class RoleState : global::Pulumi.ResourceArgs
    {
        [Input("clusterPermissions")]
        private InputList<string>? _clusterPermissions;

        /// <summary>
        /// A list of cluster permissions.
        /// </summary>
        public InputList<string> ClusterPermissions
        {
            get => _clusterPermissions ?? (_clusterPermissions = new InputList<string>());
            set => _clusterPermissions = value;
        }

        /// <summary>
        /// Description of the role.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("indexPermissions")]
        private InputList<Inputs.RoleIndexPermissionGetArgs>? _indexPermissions;

        /// <summary>
        /// A configuration of index permissions
        /// </summary>
        public InputList<Inputs.RoleIndexPermissionGetArgs> IndexPermissions
        {
            get => _indexPermissions ?? (_indexPermissions = new InputList<Inputs.RoleIndexPermissionGetArgs>());
            set => _indexPermissions = value;
        }

        /// <summary>
        /// The name of the security role.
        /// </summary>
        [Input("roleName")]
        public Input<string>? RoleName { get; set; }

        [Input("tenantPermissions")]
        private InputList<Inputs.RoleTenantPermissionGetArgs>? _tenantPermissions;

        /// <summary>
        /// A configuration of tenant permissions
        /// </summary>
        public InputList<Inputs.RoleTenantPermissionGetArgs> TenantPermissions
        {
            get => _tenantPermissions ?? (_tenantPermissions = new InputList<Inputs.RoleTenantPermissionGetArgs>());
            set => _tenantPermissions = value;
        }

        public RoleState()
        {
        }
        public static new RoleState Empty => new RoleState();
    }
}
