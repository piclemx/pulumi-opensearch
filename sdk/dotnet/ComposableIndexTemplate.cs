// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Piclemx.Opensearch
{
    /// <summary>
    /// Provides an Composable index template resource. This resource uses the `/_index_template` endpoint of the API that is available since version 2.0.0. Use `opensearch.IndexTemplate` if you are using older versions or if you want to keep using legacy Index Templates.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Opensearch = Piclemx.Opensearch;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var template1 = new Opensearch.ComposableIndexTemplate("template1", new()
    ///     {
    ///         Body = @"{
    ///   ""index_patterns"": [""te*"", ""bar*""],
    ///   ""template"": {
    ///     ""settings"": {
    ///       ""index"": {
    ///         ""number_of_shards"": ""1""
    ///       }
    ///     },
    ///     ""mappings"": {
    ///       ""properties"": {
    ///         ""host_name"": {
    ///           ""type"": ""keyword""
    ///         },
    ///         ""created_at"": {
    ///           ""type"": ""date"",
    ///           ""format"": ""EEE MMM dd HH:mm:ss Z yyyy""
    ///         }
    ///       }
    ///     },
    ///     ""aliases"": {
    ///       ""mydata"": { }
    ///     }
    ///   },
    ///   ""priority"": 200,
    ///   ""version"": 3
    /// }
    /// 
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import opensearch:index/composableIndexTemplate:ComposableIndexTemplate template_1 template_1
    /// ```
    /// </summary>
    [OpensearchResourceType("opensearch:index/composableIndexTemplate:ComposableIndexTemplate")]
    public partial class ComposableIndexTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The JSON body of the index template.
        /// </summary>
        [Output("body")]
        public Output<string> Body { get; private set; } = null!;

        /// <summary>
        /// The name of the index template.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a ComposableIndexTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ComposableIndexTemplate(string name, ComposableIndexTemplateArgs args, CustomResourceOptions? options = null)
            : base("opensearch:index/composableIndexTemplate:ComposableIndexTemplate", name, args ?? new ComposableIndexTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ComposableIndexTemplate(string name, Input<string> id, ComposableIndexTemplateState? state = null, CustomResourceOptions? options = null)
            : base("opensearch:index/composableIndexTemplate:ComposableIndexTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/piclemx/pulumi-opensearch",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ComposableIndexTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ComposableIndexTemplate Get(string name, Input<string> id, ComposableIndexTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new ComposableIndexTemplate(name, id, state, options);
        }
    }

    public sealed class ComposableIndexTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The JSON body of the index template.
        /// </summary>
        [Input("body", required: true)]
        public Input<string> Body { get; set; } = null!;

        /// <summary>
        /// The name of the index template.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ComposableIndexTemplateArgs()
        {
        }
        public static new ComposableIndexTemplateArgs Empty => new ComposableIndexTemplateArgs();
    }

    public sealed class ComposableIndexTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The JSON body of the index template.
        /// </summary>
        [Input("body")]
        public Input<string>? Body { get; set; }

        /// <summary>
        /// The name of the index template.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ComposableIndexTemplateState()
        {
        }
        public static new ComposableIndexTemplateState Empty => new ComposableIndexTemplateState();
    }
}
