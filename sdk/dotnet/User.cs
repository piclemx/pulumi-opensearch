// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Piclemx.Opensearch
{
    /// <summary>
    /// Provides an OpenSearch security user. Please refer to the OpenSearch Access Control documentation for details.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Opensearch = Piclemx.Opensearch;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a user
    ///     var mapper = new Opensearch.User("mapper", new()
    ///     {
    ///         Username = "app-reasdder",
    ///         Password = "SuperSekret123!",
    ///         Description = "a reader role for our app",
    ///     });
    /// 
    ///     // And a full user, role and role mapping example:
    ///     var readerRole = new Opensearch.Role("readerRole", new()
    ///     {
    ///         RoleName = "app_reader",
    ///         Description = "App Reader Role",
    ///         IndexPermissions = new[]
    ///         {
    ///             new Opensearch.Inputs.RoleIndexPermissionArgs
    ///             {
    ///                 IndexPatterns = new[]
    ///                 {
    ///                     "app-*",
    ///                 },
    ///                 AllowedActions = new[]
    ///                 {
    ///                     "get",
    ///                     "read",
    ///                     "search",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var readerUser = new Opensearch.User("readerUser", new()
    ///     {
    ///         Username = "app-reader",
    ///         Password = @var.Password,
    ///     });
    /// 
    ///     var readerRolesMapping = new Opensearch.RolesMapping("readerRolesMapping", new()
    ///     {
    ///         RoleName = readerRole.Id,
    ///         Description = "App Reader Role",
    ///         Users = new[]
    ///         {
    ///             readerUser.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import opensearch:index/user:User reader app_reader
    /// ```
    /// </summary>
    [OpensearchResourceType("opensearch:index/user:User")]
    public partial class User : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A map of arbitrary key value string pairs stored alongside of users.
        /// </summary>
        [Output("attributes")]
        public Output<ImmutableDictionary<string, string>?> Attributes { get; private set; } = null!;

        /// <summary>
        /// A list of backend roles.
        /// </summary>
        [Output("backendRoles")]
        public Output<ImmutableArray<string>> BackendRoles { get; private set; } = null!;

        /// <summary>
        /// Description of the user.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The plain text password for the user, cannot be specified with `password_hash`. Some implementations may enforce a password policy. Invalid passwords may cause a non-descriptive HTTP 400 Bad Request error. For AWS OpenSearch domains "password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one digit, and one special character".
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The pre-hashed password for the user, cannot be specified with `password`.
        /// </summary>
        [Output("passwordHash")]
        public Output<string?> PasswordHash { get; private set; } = null!;

        /// <summary>
        /// The name of the security user.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a User resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public User(string name, UserArgs args, CustomResourceOptions? options = null)
            : base("opensearch:index/user:User", name, args ?? new UserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private User(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
            : base("opensearch:index/user:User", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/piclemx/pulumi-opensearch",
                AdditionalSecretOutputs =
                {
                    "password",
                    "passwordHash",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing User resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static User Get(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
        {
            return new User(name, id, state, options);
        }
    }

    public sealed class UserArgs : global::Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputMap<string>? _attributes;

        /// <summary>
        /// A map of arbitrary key value string pairs stored alongside of users.
        /// </summary>
        public InputMap<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<string>());
            set => _attributes = value;
        }

        [Input("backendRoles")]
        private InputList<string>? _backendRoles;

        /// <summary>
        /// A list of backend roles.
        /// </summary>
        public InputList<string> BackendRoles
        {
            get => _backendRoles ?? (_backendRoles = new InputList<string>());
            set => _backendRoles = value;
        }

        /// <summary>
        /// Description of the user.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The plain text password for the user, cannot be specified with `password_hash`. Some implementations may enforce a password policy. Invalid passwords may cause a non-descriptive HTTP 400 Bad Request error. For AWS OpenSearch domains "password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one digit, and one special character".
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("passwordHash")]
        private Input<string>? _passwordHash;

        /// <summary>
        /// The pre-hashed password for the user, cannot be specified with `password`.
        /// </summary>
        public Input<string>? PasswordHash
        {
            get => _passwordHash;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passwordHash = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the security user.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public UserArgs()
        {
        }
        public static new UserArgs Empty => new UserArgs();
    }

    public sealed class UserState : global::Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputMap<string>? _attributes;

        /// <summary>
        /// A map of arbitrary key value string pairs stored alongside of users.
        /// </summary>
        public InputMap<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<string>());
            set => _attributes = value;
        }

        [Input("backendRoles")]
        private InputList<string>? _backendRoles;

        /// <summary>
        /// A list of backend roles.
        /// </summary>
        public InputList<string> BackendRoles
        {
            get => _backendRoles ?? (_backendRoles = new InputList<string>());
            set => _backendRoles = value;
        }

        /// <summary>
        /// Description of the user.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The plain text password for the user, cannot be specified with `password_hash`. Some implementations may enforce a password policy. Invalid passwords may cause a non-descriptive HTTP 400 Bad Request error. For AWS OpenSearch domains "password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one digit, and one special character".
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("passwordHash")]
        private Input<string>? _passwordHash;

        /// <summary>
        /// The pre-hashed password for the user, cannot be specified with `password`.
        /// </summary>
        public Input<string>? PasswordHash
        {
            get => _passwordHash;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _passwordHash = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of the security user.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public UserState()
        {
        }
        public static new UserState Empty => new UserState();
    }
}
