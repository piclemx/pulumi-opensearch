# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RolesMappingArgs', 'RolesMapping']

@pulumi.input_type
class RolesMappingArgs:
    def __init__(__self__, *,
                 role_name: pulumi.Input[str],
                 and_backend_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 backend_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a RolesMapping resource.
        :param pulumi.Input[str] role_name: The name of the security role.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] and_backend_roles: A list of backend roles.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backend_roles: A list of backend roles.
        :param pulumi.Input[str] description: Description of the role mapping.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: A list of host names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: A list of users.
        """
        pulumi.set(__self__, "role_name", role_name)
        if and_backend_roles is not None:
            pulumi.set(__self__, "and_backend_roles", and_backend_roles)
        if backend_roles is not None:
            pulumi.set(__self__, "backend_roles", backend_roles)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> pulumi.Input[str]:
        """
        The name of the security role.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_name", value)

    @property
    @pulumi.getter(name="andBackendRoles")
    def and_backend_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of backend roles.
        """
        return pulumi.get(self, "and_backend_roles")

    @and_backend_roles.setter
    def and_backend_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "and_backend_roles", value)

    @property
    @pulumi.getter(name="backendRoles")
    def backend_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of backend roles.
        """
        return pulumi.get(self, "backend_roles")

    @backend_roles.setter
    def backend_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backend_roles", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the role mapping.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of host names.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of users.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class _RolesMappingState:
    def __init__(__self__, *,
                 and_backend_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 backend_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering RolesMapping resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] and_backend_roles: A list of backend roles.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backend_roles: A list of backend roles.
        :param pulumi.Input[str] description: Description of the role mapping.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: A list of host names.
        :param pulumi.Input[str] role_name: The name of the security role.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: A list of users.
        """
        if and_backend_roles is not None:
            pulumi.set(__self__, "and_backend_roles", and_backend_roles)
        if backend_roles is not None:
            pulumi.set(__self__, "backend_roles", backend_roles)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="andBackendRoles")
    def and_backend_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of backend roles.
        """
        return pulumi.get(self, "and_backend_roles")

    @and_backend_roles.setter
    def and_backend_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "and_backend_roles", value)

    @property
    @pulumi.getter(name="backendRoles")
    def backend_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of backend roles.
        """
        return pulumi.get(self, "backend_roles")

    @backend_roles.setter
    def backend_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backend_roles", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the role mapping.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of host names.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the security role.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_name", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of users.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


class RolesMapping(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 and_backend_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 backend_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Provides an OpenSearch security role mapping. Please refer to the OpenSearch Access Control documentation for details.

        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_opensearch as opensearch

        # Create a role mapping
        mapper = opensearch.RolesMapping("mapper",
            backend_roles=[
                "arn:aws:iam::123456789012:role/lambda-call-opensearch",
                "arn:aws:iam::123456789012:role/run-containers",
            ],
            description="Mapping AWS IAM roles to ES role",
            role_name="logs_writer")
        ```

        ## Import

        ```sh
         $ pulumi import opensearch:index/rolesMapping:RolesMapping mapper logs_writer
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] and_backend_roles: A list of backend roles.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backend_roles: A list of backend roles.
        :param pulumi.Input[str] description: Description of the role mapping.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: A list of host names.
        :param pulumi.Input[str] role_name: The name of the security role.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: A list of users.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RolesMappingArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an OpenSearch security role mapping. Please refer to the OpenSearch Access Control documentation for details.

        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_opensearch as opensearch

        # Create a role mapping
        mapper = opensearch.RolesMapping("mapper",
            backend_roles=[
                "arn:aws:iam::123456789012:role/lambda-call-opensearch",
                "arn:aws:iam::123456789012:role/run-containers",
            ],
            description="Mapping AWS IAM roles to ES role",
            role_name="logs_writer")
        ```

        ## Import

        ```sh
         $ pulumi import opensearch:index/rolesMapping:RolesMapping mapper logs_writer
        ```

        :param str resource_name: The name of the resource.
        :param RolesMappingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RolesMappingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 and_backend_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 backend_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RolesMappingArgs.__new__(RolesMappingArgs)

            __props__.__dict__["and_backend_roles"] = and_backend_roles
            __props__.__dict__["backend_roles"] = backend_roles
            __props__.__dict__["description"] = description
            __props__.__dict__["hosts"] = hosts
            if role_name is None and not opts.urn:
                raise TypeError("Missing required property 'role_name'")
            __props__.__dict__["role_name"] = role_name
            __props__.__dict__["users"] = users
        super(RolesMapping, __self__).__init__(
            'opensearch:index/rolesMapping:RolesMapping',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            and_backend_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            backend_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            role_name: Optional[pulumi.Input[str]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'RolesMapping':
        """
        Get an existing RolesMapping resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] and_backend_roles: A list of backend roles.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backend_roles: A list of backend roles.
        :param pulumi.Input[str] description: Description of the role mapping.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] hosts: A list of host names.
        :param pulumi.Input[str] role_name: The name of the security role.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: A list of users.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RolesMappingState.__new__(_RolesMappingState)

        __props__.__dict__["and_backend_roles"] = and_backend_roles
        __props__.__dict__["backend_roles"] = backend_roles
        __props__.__dict__["description"] = description
        __props__.__dict__["hosts"] = hosts
        __props__.__dict__["role_name"] = role_name
        __props__.__dict__["users"] = users
        return RolesMapping(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="andBackendRoles")
    def and_backend_roles(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of backend roles.
        """
        return pulumi.get(self, "and_backend_roles")

    @property
    @pulumi.getter(name="backendRoles")
    def backend_roles(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of backend roles.
        """
        return pulumi.get(self, "backend_roles")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the role mapping.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of host names.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> pulumi.Output[str]:
        """
        The name of the security role.
        """
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of users.
        """
        return pulumi.get(self, "users")

