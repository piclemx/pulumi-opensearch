# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AuditConfigArgs', 'AuditConfig']

@pulumi.input_type
class AuditConfigArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 audit: Optional[pulumi.Input['AuditConfigAuditArgs']] = None,
                 compliance: Optional[pulumi.Input['AuditConfigComplianceArgs']] = None):
        """
        The set of arguments for constructing a AuditConfig resource.
        """
        pulumi.set(__self__, "enabled", enabled)
        if audit is not None:
            pulumi.set(__self__, "audit", audit)
        if compliance is not None:
            pulumi.set(__self__, "compliance", compliance)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def audit(self) -> Optional[pulumi.Input['AuditConfigAuditArgs']]:
        return pulumi.get(self, "audit")

    @audit.setter
    def audit(self, value: Optional[pulumi.Input['AuditConfigAuditArgs']]):
        pulumi.set(self, "audit", value)

    @property
    @pulumi.getter
    def compliance(self) -> Optional[pulumi.Input['AuditConfigComplianceArgs']]:
        return pulumi.get(self, "compliance")

    @compliance.setter
    def compliance(self, value: Optional[pulumi.Input['AuditConfigComplianceArgs']]):
        pulumi.set(self, "compliance", value)


@pulumi.input_type
class _AuditConfigState:
    def __init__(__self__, *,
                 audit: Optional[pulumi.Input['AuditConfigAuditArgs']] = None,
                 compliance: Optional[pulumi.Input['AuditConfigComplianceArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering AuditConfig resources.
        """
        if audit is not None:
            pulumi.set(__self__, "audit", audit)
        if compliance is not None:
            pulumi.set(__self__, "compliance", compliance)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def audit(self) -> Optional[pulumi.Input['AuditConfigAuditArgs']]:
        return pulumi.get(self, "audit")

    @audit.setter
    def audit(self, value: Optional[pulumi.Input['AuditConfigAuditArgs']]):
        pulumi.set(self, "audit", value)

    @property
    @pulumi.getter
    def compliance(self) -> Optional[pulumi.Input['AuditConfigComplianceArgs']]:
        return pulumi.get(self, "compliance")

    @compliance.setter
    def compliance(self, value: Optional[pulumi.Input['AuditConfigComplianceArgs']]):
        pulumi.set(self, "compliance", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


class AuditConfig(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audit: Optional[pulumi.Input[pulumi.InputType['AuditConfigAuditArgs']]] = None,
                 compliance: Optional[pulumi.Input[pulumi.InputType['AuditConfigComplianceArgs']]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_opensearch as opensearch

        test = opensearch.AuditConfig("test",
            audit=opensearch.AuditConfigAuditArgs(
                disabled_rest_categories=[
                    "GRANTED_PRIVILEGES",
                    "AUTHENTICATED",
                ],
                disabled_transport_categories=[
                    "GRANTED_PRIVILEGES",
                    "AUTHENTICATED",
                ],
                enable_rest=True,
                enable_transport=True,
                exclude_sensitive_headers=True,
                ignore_requests=[
                    "SearchRequest",
                    "indices:data/read/*",
                    "/_cluster/health",
                ],
                ignore_users=["dashboardserver"],
                log_request_body=True,
                resolve_bulk_requests=True,
                resolve_indices=True,
            ),
            compliance=opensearch.AuditConfigComplianceArgs(
                enabled=True,
                external_config=False,
                internal_config=True,
                read_ignore_users=["read-ignore-1"],
                read_metadata_only=True,
                read_watched_fields=[
                    opensearch.AuditConfigComplianceReadWatchedFieldArgs(
                        fields=[
                            "field-1",
                            "field-2",
                        ],
                        index="read-index-1",
                    ),
                    opensearch.AuditConfigComplianceReadWatchedFieldArgs(
                        fields=["field-3"],
                        index="read-index-2",
                    ),
                ],
                write_ignore_users=["write-ignore-1"],
                write_log_diffs=False,
                write_metadata_only=True,
                write_watched_indices=[
                    "write-index-1",
                    "write-index-2",
                    "log-*",
                    "*",
                ],
            ),
            enabled=True)
        ```

        ## Import

        Import by name

        ```sh
         $ pulumi import opensearch:index/auditConfig:AuditConfig test_config my-config
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AuditConfigArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_opensearch as opensearch

        test = opensearch.AuditConfig("test",
            audit=opensearch.AuditConfigAuditArgs(
                disabled_rest_categories=[
                    "GRANTED_PRIVILEGES",
                    "AUTHENTICATED",
                ],
                disabled_transport_categories=[
                    "GRANTED_PRIVILEGES",
                    "AUTHENTICATED",
                ],
                enable_rest=True,
                enable_transport=True,
                exclude_sensitive_headers=True,
                ignore_requests=[
                    "SearchRequest",
                    "indices:data/read/*",
                    "/_cluster/health",
                ],
                ignore_users=["dashboardserver"],
                log_request_body=True,
                resolve_bulk_requests=True,
                resolve_indices=True,
            ),
            compliance=opensearch.AuditConfigComplianceArgs(
                enabled=True,
                external_config=False,
                internal_config=True,
                read_ignore_users=["read-ignore-1"],
                read_metadata_only=True,
                read_watched_fields=[
                    opensearch.AuditConfigComplianceReadWatchedFieldArgs(
                        fields=[
                            "field-1",
                            "field-2",
                        ],
                        index="read-index-1",
                    ),
                    opensearch.AuditConfigComplianceReadWatchedFieldArgs(
                        fields=["field-3"],
                        index="read-index-2",
                    ),
                ],
                write_ignore_users=["write-ignore-1"],
                write_log_diffs=False,
                write_metadata_only=True,
                write_watched_indices=[
                    "write-index-1",
                    "write-index-2",
                    "log-*",
                    "*",
                ],
            ),
            enabled=True)
        ```

        ## Import

        Import by name

        ```sh
         $ pulumi import opensearch:index/auditConfig:AuditConfig test_config my-config
        ```

        :param str resource_name: The name of the resource.
        :param AuditConfigArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AuditConfigArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audit: Optional[pulumi.Input[pulumi.InputType['AuditConfigAuditArgs']]] = None,
                 compliance: Optional[pulumi.Input[pulumi.InputType['AuditConfigComplianceArgs']]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AuditConfigArgs.__new__(AuditConfigArgs)

            __props__.__dict__["audit"] = audit
            __props__.__dict__["compliance"] = compliance
            if enabled is None and not opts.urn:
                raise TypeError("Missing required property 'enabled'")
            __props__.__dict__["enabled"] = enabled
        super(AuditConfig, __self__).__init__(
            'opensearch:index/auditConfig:AuditConfig',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            audit: Optional[pulumi.Input[pulumi.InputType['AuditConfigAuditArgs']]] = None,
            compliance: Optional[pulumi.Input[pulumi.InputType['AuditConfigComplianceArgs']]] = None,
            enabled: Optional[pulumi.Input[bool]] = None) -> 'AuditConfig':
        """
        Get an existing AuditConfig resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AuditConfigState.__new__(_AuditConfigState)

        __props__.__dict__["audit"] = audit
        __props__.__dict__["compliance"] = compliance
        __props__.__dict__["enabled"] = enabled
        return AuditConfig(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def audit(self) -> pulumi.Output[Optional['outputs.AuditConfigAudit']]:
        return pulumi.get(self, "audit")

    @property
    @pulumi.getter
    def compliance(self) -> pulumi.Output[Optional['outputs.AuditConfigCompliance']]:
        return pulumi.get(self, "compliance")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "enabled")

