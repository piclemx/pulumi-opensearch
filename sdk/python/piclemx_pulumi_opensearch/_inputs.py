# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AuditConfigAuditArgs',
    'AuditConfigComplianceArgs',
    'AuditConfigComplianceReadWatchedFieldArgs',
    'RoleIndexPermissionArgs',
    'RoleTenantPermissionArgs',
]

@pulumi.input_type
class AuditConfigAuditArgs:
    def __init__(__self__, *,
                 disabled_rest_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disabled_transport_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_rest: Optional[pulumi.Input[bool]] = None,
                 enable_transport: Optional[pulumi.Input[bool]] = None,
                 exclude_sensitive_headers: Optional[pulumi.Input[bool]] = None,
                 ignore_requests: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignore_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 log_request_body: Optional[pulumi.Input[bool]] = None,
                 resolve_bulk_requests: Optional[pulumi.Input[bool]] = None,
                 resolve_indices: Optional[pulumi.Input[bool]] = None):
        if disabled_rest_categories is not None:
            pulumi.set(__self__, "disabled_rest_categories", disabled_rest_categories)
        if disabled_transport_categories is not None:
            pulumi.set(__self__, "disabled_transport_categories", disabled_transport_categories)
        if enable_rest is not None:
            pulumi.set(__self__, "enable_rest", enable_rest)
        if enable_transport is not None:
            pulumi.set(__self__, "enable_transport", enable_transport)
        if exclude_sensitive_headers is not None:
            pulumi.set(__self__, "exclude_sensitive_headers", exclude_sensitive_headers)
        if ignore_requests is not None:
            pulumi.set(__self__, "ignore_requests", ignore_requests)
        if ignore_users is not None:
            pulumi.set(__self__, "ignore_users", ignore_users)
        if log_request_body is not None:
            pulumi.set(__self__, "log_request_body", log_request_body)
        if resolve_bulk_requests is not None:
            pulumi.set(__self__, "resolve_bulk_requests", resolve_bulk_requests)
        if resolve_indices is not None:
            pulumi.set(__self__, "resolve_indices", resolve_indices)

    @property
    @pulumi.getter(name="disabledRestCategories")
    def disabled_rest_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "disabled_rest_categories")

    @disabled_rest_categories.setter
    def disabled_rest_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disabled_rest_categories", value)

    @property
    @pulumi.getter(name="disabledTransportCategories")
    def disabled_transport_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "disabled_transport_categories")

    @disabled_transport_categories.setter
    def disabled_transport_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disabled_transport_categories", value)

    @property
    @pulumi.getter(name="enableRest")
    def enable_rest(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_rest")

    @enable_rest.setter
    def enable_rest(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_rest", value)

    @property
    @pulumi.getter(name="enableTransport")
    def enable_transport(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_transport")

    @enable_transport.setter
    def enable_transport(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_transport", value)

    @property
    @pulumi.getter(name="excludeSensitiveHeaders")
    def exclude_sensitive_headers(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exclude_sensitive_headers")

    @exclude_sensitive_headers.setter
    def exclude_sensitive_headers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_sensitive_headers", value)

    @property
    @pulumi.getter(name="ignoreRequests")
    def ignore_requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ignore_requests")

    @ignore_requests.setter
    def ignore_requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignore_requests", value)

    @property
    @pulumi.getter(name="ignoreUsers")
    def ignore_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ignore_users")

    @ignore_users.setter
    def ignore_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignore_users", value)

    @property
    @pulumi.getter(name="logRequestBody")
    def log_request_body(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "log_request_body")

    @log_request_body.setter
    def log_request_body(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_request_body", value)

    @property
    @pulumi.getter(name="resolveBulkRequests")
    def resolve_bulk_requests(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "resolve_bulk_requests")

    @resolve_bulk_requests.setter
    def resolve_bulk_requests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "resolve_bulk_requests", value)

    @property
    @pulumi.getter(name="resolveIndices")
    def resolve_indices(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "resolve_indices")

    @resolve_indices.setter
    def resolve_indices(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "resolve_indices", value)


@pulumi.input_type
class AuditConfigComplianceArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 external_config: Optional[pulumi.Input[bool]] = None,
                 internal_config: Optional[pulumi.Input[bool]] = None,
                 read_ignore_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 read_metadata_only: Optional[pulumi.Input[bool]] = None,
                 read_watched_fields: Optional[pulumi.Input[Sequence[pulumi.Input['AuditConfigComplianceReadWatchedFieldArgs']]]] = None,
                 write_ignore_users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 write_log_diffs: Optional[pulumi.Input[bool]] = None,
                 write_metadata_only: Optional[pulumi.Input[bool]] = None,
                 write_watched_indices: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if external_config is not None:
            pulumi.set(__self__, "external_config", external_config)
        if internal_config is not None:
            pulumi.set(__self__, "internal_config", internal_config)
        if read_ignore_users is not None:
            pulumi.set(__self__, "read_ignore_users", read_ignore_users)
        if read_metadata_only is not None:
            pulumi.set(__self__, "read_metadata_only", read_metadata_only)
        if read_watched_fields is not None:
            pulumi.set(__self__, "read_watched_fields", read_watched_fields)
        if write_ignore_users is not None:
            pulumi.set(__self__, "write_ignore_users", write_ignore_users)
        if write_log_diffs is not None:
            pulumi.set(__self__, "write_log_diffs", write_log_diffs)
        if write_metadata_only is not None:
            pulumi.set(__self__, "write_metadata_only", write_metadata_only)
        if write_watched_indices is not None:
            pulumi.set(__self__, "write_watched_indices", write_watched_indices)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="externalConfig")
    def external_config(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "external_config")

    @external_config.setter
    def external_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "external_config", value)

    @property
    @pulumi.getter(name="internalConfig")
    def internal_config(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "internal_config")

    @internal_config.setter
    def internal_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "internal_config", value)

    @property
    @pulumi.getter(name="readIgnoreUsers")
    def read_ignore_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "read_ignore_users")

    @read_ignore_users.setter
    def read_ignore_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "read_ignore_users", value)

    @property
    @pulumi.getter(name="readMetadataOnly")
    def read_metadata_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_metadata_only")

    @read_metadata_only.setter
    def read_metadata_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_metadata_only", value)

    @property
    @pulumi.getter(name="readWatchedFields")
    def read_watched_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AuditConfigComplianceReadWatchedFieldArgs']]]]:
        return pulumi.get(self, "read_watched_fields")

    @read_watched_fields.setter
    def read_watched_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AuditConfigComplianceReadWatchedFieldArgs']]]]):
        pulumi.set(self, "read_watched_fields", value)

    @property
    @pulumi.getter(name="writeIgnoreUsers")
    def write_ignore_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "write_ignore_users")

    @write_ignore_users.setter
    def write_ignore_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "write_ignore_users", value)

    @property
    @pulumi.getter(name="writeLogDiffs")
    def write_log_diffs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "write_log_diffs")

    @write_log_diffs.setter
    def write_log_diffs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "write_log_diffs", value)

    @property
    @pulumi.getter(name="writeMetadataOnly")
    def write_metadata_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "write_metadata_only")

    @write_metadata_only.setter
    def write_metadata_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "write_metadata_only", value)

    @property
    @pulumi.getter(name="writeWatchedIndices")
    def write_watched_indices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "write_watched_indices")

    @write_watched_indices.setter
    def write_watched_indices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "write_watched_indices", value)


@pulumi.input_type
class AuditConfigComplianceReadWatchedFieldArgs:
    def __init__(__self__, *,
                 fields: pulumi.Input[Sequence[pulumi.Input[str]]],
                 index: pulumi.Input[str]):
        pulumi.set(__self__, "fields", fields)
        pulumi.set(__self__, "index", index)

    @property
    @pulumi.getter
    def fields(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)


@pulumi.input_type
class RoleIndexPermissionArgs:
    def __init__(__self__, *,
                 allowed_actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 document_level_security: Optional[pulumi.Input[str]] = None,
                 field_level_securities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 index_patterns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 masked_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_actions: A list of allowed actions.
        :param pulumi.Input[str] document_level_security: A selector for document-level security (json formatted using jsonencode).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] field_level_securities: A list of selectors for field-level security.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] index_patterns: A list of glob patterns for the index names.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] masked_fields: A list of masked fields
        """
        if allowed_actions is not None:
            pulumi.set(__self__, "allowed_actions", allowed_actions)
        if document_level_security is not None:
            pulumi.set(__self__, "document_level_security", document_level_security)
        if field_level_securities is not None:
            pulumi.set(__self__, "field_level_securities", field_level_securities)
        if index_patterns is not None:
            pulumi.set(__self__, "index_patterns", index_patterns)
        if masked_fields is not None:
            pulumi.set(__self__, "masked_fields", masked_fields)

    @property
    @pulumi.getter(name="allowedActions")
    def allowed_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of allowed actions.
        """
        return pulumi.get(self, "allowed_actions")

    @allowed_actions.setter
    def allowed_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_actions", value)

    @property
    @pulumi.getter(name="documentLevelSecurity")
    def document_level_security(self) -> Optional[pulumi.Input[str]]:
        """
        A selector for document-level security (json formatted using jsonencode).
        """
        return pulumi.get(self, "document_level_security")

    @document_level_security.setter
    def document_level_security(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "document_level_security", value)

    @property
    @pulumi.getter(name="fieldLevelSecurities")
    def field_level_securities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of selectors for field-level security.
        """
        return pulumi.get(self, "field_level_securities")

    @field_level_securities.setter
    def field_level_securities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "field_level_securities", value)

    @property
    @pulumi.getter(name="indexPatterns")
    def index_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of glob patterns for the index names.
        """
        return pulumi.get(self, "index_patterns")

    @index_patterns.setter
    def index_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "index_patterns", value)

    @property
    @pulumi.getter(name="maskedFields")
    def masked_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of masked fields
        """
        return pulumi.get(self, "masked_fields")

    @masked_fields.setter
    def masked_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "masked_fields", value)


@pulumi.input_type
class RoleTenantPermissionArgs:
    def __init__(__self__, *,
                 allowed_actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_patterns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_actions: A list of allowed actions.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tenant_patterns: A list of glob patterns for the tenant names
        """
        if allowed_actions is not None:
            pulumi.set(__self__, "allowed_actions", allowed_actions)
        if tenant_patterns is not None:
            pulumi.set(__self__, "tenant_patterns", tenant_patterns)

    @property
    @pulumi.getter(name="allowedActions")
    def allowed_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of allowed actions.
        """
        return pulumi.get(self, "allowed_actions")

    @allowed_actions.setter
    def allowed_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_actions", value)

    @property
    @pulumi.getter(name="tenantPatterns")
    def tenant_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of glob patterns for the tenant names
        """
        return pulumi.get(self, "tenant_patterns")

    @tenant_patterns.setter
    def tenant_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tenant_patterns", value)


