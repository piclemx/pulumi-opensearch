# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ScriptArgs', 'Script']

@pulumi.input_type
class ScriptArgs:
    def __init__(__self__, *,
                 script_id: pulumi.Input[str],
                 source: pulumi.Input[str],
                 lang: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Script resource.
        :param pulumi.Input[str] script_id: Identifier for the stored script. Must be unique within the cluster.
        :param pulumi.Input[str] source: The source of the stored script
        :param pulumi.Input[str] lang: Specifies the language the script is written in. Defaults to painless.
        """
        pulumi.set(__self__, "script_id", script_id)
        pulumi.set(__self__, "source", source)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> pulumi.Input[str]:
        """
        Identifier for the stored script. Must be unique within the cluster.
        """
        return pulumi.get(self, "script_id")

    @script_id.setter
    def script_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "script_id", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        The source of the stored script
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the language the script is written in. Defaults to painless.
        """
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lang", value)


@pulumi.input_type
class _ScriptState:
    def __init__(__self__, *,
                 lang: Optional[pulumi.Input[str]] = None,
                 script_id: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Script resources.
        :param pulumi.Input[str] lang: Specifies the language the script is written in. Defaults to painless.
        :param pulumi.Input[str] script_id: Identifier for the stored script. Must be unique within the cluster.
        :param pulumi.Input[str] source: The source of the stored script
        """
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if script_id is not None:
            pulumi.set(__self__, "script_id", script_id)
        if source is not None:
            pulumi.set(__self__, "source", source)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the language the script is written in. Defaults to painless.
        """
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lang", value)

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier for the stored script. Must be unique within the cluster.
        """
        return pulumi.get(self, "script_id")

    @script_id.setter
    def script_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script_id", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        """
        The source of the stored script
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)


class Script(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 lang: Optional[pulumi.Input[str]] = None,
                 script_id: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides an OpenSearch script resource.

        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_opensearch as opensearch

        # Create a script
        test_script = opensearch.Script("testScript",
            lang="painless",
            script_id="my_script",
            source="Math.log(_score * 2) + params.my_modifier")
        ```

        ## Import

        ```sh
         $ pulumi import opensearch:index/script:Script test_script my_script
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] lang: Specifies the language the script is written in. Defaults to painless.
        :param pulumi.Input[str] script_id: Identifier for the stored script. Must be unique within the cluster.
        :param pulumi.Input[str] source: The source of the stored script
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ScriptArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an OpenSearch script resource.

        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_opensearch as opensearch

        # Create a script
        test_script = opensearch.Script("testScript",
            lang="painless",
            script_id="my_script",
            source="Math.log(_score * 2) + params.my_modifier")
        ```

        ## Import

        ```sh
         $ pulumi import opensearch:index/script:Script test_script my_script
        ```

        :param str resource_name: The name of the resource.
        :param ScriptArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ScriptArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 lang: Optional[pulumi.Input[str]] = None,
                 script_id: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ScriptArgs.__new__(ScriptArgs)

            __props__.__dict__["lang"] = lang
            if script_id is None and not opts.urn:
                raise TypeError("Missing required property 'script_id'")
            __props__.__dict__["script_id"] = script_id
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
        super(Script, __self__).__init__(
            'opensearch:index/script:Script',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            lang: Optional[pulumi.Input[str]] = None,
            script_id: Optional[pulumi.Input[str]] = None,
            source: Optional[pulumi.Input[str]] = None) -> 'Script':
        """
        Get an existing Script resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] lang: Specifies the language the script is written in. Defaults to painless.
        :param pulumi.Input[str] script_id: Identifier for the stored script. Must be unique within the cluster.
        :param pulumi.Input[str] source: The source of the stored script
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ScriptState.__new__(_ScriptState)

        __props__.__dict__["lang"] = lang
        __props__.__dict__["script_id"] = script_id
        __props__.__dict__["source"] = source
        return Script(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def lang(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the language the script is written in. Defaults to painless.
        """
        return pulumi.get(self, "lang")

    @property
    @pulumi.getter(name="scriptId")
    def script_id(self) -> pulumi.Output[str]:
        """
        Identifier for the stored script. Must be unique within the cluster.
        """
        return pulumi.get(self, "script_id")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[str]:
        """
        The source of the stored script
        """
        return pulumi.get(self, "source")

