# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RoleArgs', 'Role']

@pulumi.input_type
class RoleArgs:
    def __init__(__self__, *,
                 role_name: pulumi.Input[str],
                 cluster_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 index_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['RoleIndexPermissionArgs']]]] = None,
                 tenant_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['RoleTenantPermissionArgs']]]] = None):
        """
        The set of arguments for constructing a Role resource.
        :param pulumi.Input[str] role_name: The name of the security role.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cluster_permissions: A list of cluster permissions.
        :param pulumi.Input[str] description: Description of the role.
        :param pulumi.Input[Sequence[pulumi.Input['RoleIndexPermissionArgs']]] index_permissions: A configuration of index permissions
        :param pulumi.Input[Sequence[pulumi.Input['RoleTenantPermissionArgs']]] tenant_permissions: A configuration of tenant permissions
        """
        pulumi.set(__self__, "role_name", role_name)
        if cluster_permissions is not None:
            pulumi.set(__self__, "cluster_permissions", cluster_permissions)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if index_permissions is not None:
            pulumi.set(__self__, "index_permissions", index_permissions)
        if tenant_permissions is not None:
            pulumi.set(__self__, "tenant_permissions", tenant_permissions)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> pulumi.Input[str]:
        """
        The name of the security role.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_name", value)

    @property
    @pulumi.getter(name="clusterPermissions")
    def cluster_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of cluster permissions.
        """
        return pulumi.get(self, "cluster_permissions")

    @cluster_permissions.setter
    def cluster_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cluster_permissions", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the role.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="indexPermissions")
    def index_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoleIndexPermissionArgs']]]]:
        """
        A configuration of index permissions
        """
        return pulumi.get(self, "index_permissions")

    @index_permissions.setter
    def index_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoleIndexPermissionArgs']]]]):
        pulumi.set(self, "index_permissions", value)

    @property
    @pulumi.getter(name="tenantPermissions")
    def tenant_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoleTenantPermissionArgs']]]]:
        """
        A configuration of tenant permissions
        """
        return pulumi.get(self, "tenant_permissions")

    @tenant_permissions.setter
    def tenant_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoleTenantPermissionArgs']]]]):
        pulumi.set(self, "tenant_permissions", value)


@pulumi.input_type
class _RoleState:
    def __init__(__self__, *,
                 cluster_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 index_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['RoleIndexPermissionArgs']]]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 tenant_permissions: Optional[pulumi.Input[Sequence[pulumi.Input['RoleTenantPermissionArgs']]]] = None):
        """
        Input properties used for looking up and filtering Role resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cluster_permissions: A list of cluster permissions.
        :param pulumi.Input[str] description: Description of the role.
        :param pulumi.Input[Sequence[pulumi.Input['RoleIndexPermissionArgs']]] index_permissions: A configuration of index permissions
        :param pulumi.Input[str] role_name: The name of the security role.
        :param pulumi.Input[Sequence[pulumi.Input['RoleTenantPermissionArgs']]] tenant_permissions: A configuration of tenant permissions
        """
        if cluster_permissions is not None:
            pulumi.set(__self__, "cluster_permissions", cluster_permissions)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if index_permissions is not None:
            pulumi.set(__self__, "index_permissions", index_permissions)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if tenant_permissions is not None:
            pulumi.set(__self__, "tenant_permissions", tenant_permissions)

    @property
    @pulumi.getter(name="clusterPermissions")
    def cluster_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of cluster permissions.
        """
        return pulumi.get(self, "cluster_permissions")

    @cluster_permissions.setter
    def cluster_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cluster_permissions", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the role.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="indexPermissions")
    def index_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoleIndexPermissionArgs']]]]:
        """
        A configuration of index permissions
        """
        return pulumi.get(self, "index_permissions")

    @index_permissions.setter
    def index_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoleIndexPermissionArgs']]]]):
        pulumi.set(self, "index_permissions", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the security role.
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_name", value)

    @property
    @pulumi.getter(name="tenantPermissions")
    def tenant_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoleTenantPermissionArgs']]]]:
        """
        A configuration of tenant permissions
        """
        return pulumi.get(self, "tenant_permissions")

    @tenant_permissions.setter
    def tenant_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoleTenantPermissionArgs']]]]):
        pulumi.set(self, "tenant_permissions", value)


class Role(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 index_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RoleIndexPermissionArgs']]]]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 tenant_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RoleTenantPermissionArgs']]]]] = None,
                 __props__=None):
        """
        Provides an OpenSearch security role resource. Please refer to the OpenSearch Access Control documentation for details.

        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_opensearch as opensearch

        # To set document level permissions:
        writer = opensearch.Role("writer",
            cluster_permissions=["*"],
            index_permissions=[opensearch.RoleIndexPermissionArgs(
                allowed_actions=["read"],
                document_level_security="{\\"term\\": { \\"readable_by\\": \\"${user.name}\\"}}",
                index_patterns=["pub*"],
            )],
            role_name="foo_writer")
        ```

        ## Import

        ```sh
         $ pulumi import opensearch:index/role:Role writer logs_writer
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cluster_permissions: A list of cluster permissions.
        :param pulumi.Input[str] description: Description of the role.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RoleIndexPermissionArgs']]]] index_permissions: A configuration of index permissions
        :param pulumi.Input[str] role_name: The name of the security role.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RoleTenantPermissionArgs']]]] tenant_permissions: A configuration of tenant permissions
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RoleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an OpenSearch security role resource. Please refer to the OpenSearch Access Control documentation for details.

        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_opensearch as opensearch

        # To set document level permissions:
        writer = opensearch.Role("writer",
            cluster_permissions=["*"],
            index_permissions=[opensearch.RoleIndexPermissionArgs(
                allowed_actions=["read"],
                document_level_security="{\\"term\\": { \\"readable_by\\": \\"${user.name}\\"}}",
                index_patterns=["pub*"],
            )],
            role_name="foo_writer")
        ```

        ## Import

        ```sh
         $ pulumi import opensearch:index/role:Role writer logs_writer
        ```

        :param str resource_name: The name of the resource.
        :param RoleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RoleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 index_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RoleIndexPermissionArgs']]]]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 tenant_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RoleTenantPermissionArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RoleArgs.__new__(RoleArgs)

            __props__.__dict__["cluster_permissions"] = cluster_permissions
            __props__.__dict__["description"] = description
            __props__.__dict__["index_permissions"] = index_permissions
            if role_name is None and not opts.urn:
                raise TypeError("Missing required property 'role_name'")
            __props__.__dict__["role_name"] = role_name
            __props__.__dict__["tenant_permissions"] = tenant_permissions
        super(Role, __self__).__init__(
            'opensearch:index/role:Role',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            index_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RoleIndexPermissionArgs']]]]] = None,
            role_name: Optional[pulumi.Input[str]] = None,
            tenant_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RoleTenantPermissionArgs']]]]] = None) -> 'Role':
        """
        Get an existing Role resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cluster_permissions: A list of cluster permissions.
        :param pulumi.Input[str] description: Description of the role.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RoleIndexPermissionArgs']]]] index_permissions: A configuration of index permissions
        :param pulumi.Input[str] role_name: The name of the security role.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RoleTenantPermissionArgs']]]] tenant_permissions: A configuration of tenant permissions
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RoleState.__new__(_RoleState)

        __props__.__dict__["cluster_permissions"] = cluster_permissions
        __props__.__dict__["description"] = description
        __props__.__dict__["index_permissions"] = index_permissions
        __props__.__dict__["role_name"] = role_name
        __props__.__dict__["tenant_permissions"] = tenant_permissions
        return Role(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterPermissions")
    def cluster_permissions(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of cluster permissions.
        """
        return pulumi.get(self, "cluster_permissions")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the role.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="indexPermissions")
    def index_permissions(self) -> pulumi.Output[Optional[Sequence['outputs.RoleIndexPermission']]]:
        """
        A configuration of index permissions
        """
        return pulumi.get(self, "index_permissions")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> pulumi.Output[str]:
        """
        The name of the security role.
        """
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter(name="tenantPermissions")
    def tenant_permissions(self) -> pulumi.Output[Optional[Sequence['outputs.RoleTenantPermission']]]:
        """
        A configuration of tenant permissions
        """
        return pulumi.get(self, "tenant_permissions")

