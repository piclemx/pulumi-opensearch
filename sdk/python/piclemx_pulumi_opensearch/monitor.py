# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['MonitorArgs', 'Monitor']

@pulumi.input_type
class MonitorArgs:
    def __init__(__self__, *,
                 body: pulumi.Input[str]):
        """
        The set of arguments for constructing a Monitor resource.
        :param pulumi.Input[str] body: The monitor document
        """
        pulumi.set(__self__, "body", body)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Input[str]:
        """
        The monitor document
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input[str]):
        pulumi.set(self, "body", value)


@pulumi.input_type
class _MonitorState:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Monitor resources.
        :param pulumi.Input[str] body: The monitor document
        """
        if body is not None:
            pulumi.set(__self__, "body", body)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        The monitor document
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)


class Monitor(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides an OpenSearch monitor. Please refer to the OpenSearch monitor documentation for details.

        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_opensearch as opensearch

        movies_last_hour = opensearch.Monitor("moviesLastHour", body=f\"\"\"{{
          "name": "test-monitor",
          "type": "monitor",
          "enabled": true,
          "schedule": {{
            "period": {{
              "interval": 1,
              "unit": "MINUTES"
            }}
          }},
          "inputs": [{{
            "search": {{
              "indices": ["movies"],
              "query": {{
                "size": 0,
                "aggregations": {{}},
                "query": {{
                  "bool": {{
                    "adjust_pure_negative":true,
                    "boost":1,
                    "filter": [{{
                      "range": {{
                        "@timestamp": {{
                          "boost":1,
                          "from":"||-1h",
                          "to":"",
                          "include_lower":true,
                          "include_upper":true,
                          "format": "epoch_millis"
                        }}
                      }}
                    }}]
                  }}
                }}
              }}
            }}
          }}],
          "triggers": [
            {{
              "name" : "Errors",
              "severity" : "1",
              "condition" : {{
                "script" : {{
                  "source" : "ctx.results[0].hits.total.value > 0",
                  "lang" : "painless"
                }}
              }},
              "actions" : [
                {{
                  "name" : "Slack",
                  "destination_id" : "{opensearch_channel_configuration["slack_on_call_channel"]["id"]}",
                  "message_template" : {{
                    "source" : "bogus",
                    "lang" : "mustache"
                  }},
                  "throttle_enabled" : false,
                  "subject_template" : {{
                    "source" : "Production Errors",
                    "lang" : "mustache"
                  }}
                }}
              ]
            }}
          ]
        }}

        \"\"\")
        ```

        ## Import

        ```sh
         $ pulumi import opensearch:index/monitor:Monitor alert lgOZb3UB96pyyRQv0ppQ
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] body: The monitor document
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MonitorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an OpenSearch monitor. Please refer to the OpenSearch monitor documentation for details.

        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_opensearch as opensearch

        movies_last_hour = opensearch.Monitor("moviesLastHour", body=f\"\"\"{{
          "name": "test-monitor",
          "type": "monitor",
          "enabled": true,
          "schedule": {{
            "period": {{
              "interval": 1,
              "unit": "MINUTES"
            }}
          }},
          "inputs": [{{
            "search": {{
              "indices": ["movies"],
              "query": {{
                "size": 0,
                "aggregations": {{}},
                "query": {{
                  "bool": {{
                    "adjust_pure_negative":true,
                    "boost":1,
                    "filter": [{{
                      "range": {{
                        "@timestamp": {{
                          "boost":1,
                          "from":"||-1h",
                          "to":"",
                          "include_lower":true,
                          "include_upper":true,
                          "format": "epoch_millis"
                        }}
                      }}
                    }}]
                  }}
                }}
              }}
            }}
          }}],
          "triggers": [
            {{
              "name" : "Errors",
              "severity" : "1",
              "condition" : {{
                "script" : {{
                  "source" : "ctx.results[0].hits.total.value > 0",
                  "lang" : "painless"
                }}
              }},
              "actions" : [
                {{
                  "name" : "Slack",
                  "destination_id" : "{opensearch_channel_configuration["slack_on_call_channel"]["id"]}",
                  "message_template" : {{
                    "source" : "bogus",
                    "lang" : "mustache"
                  }},
                  "throttle_enabled" : false,
                  "subject_template" : {{
                    "source" : "Production Errors",
                    "lang" : "mustache"
                  }}
                }}
              ]
            }}
          ]
        }}

        \"\"\")
        ```

        ## Import

        ```sh
         $ pulumi import opensearch:index/monitor:Monitor alert lgOZb3UB96pyyRQv0ppQ
        ```

        :param str resource_name: The name of the resource.
        :param MonitorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MonitorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MonitorArgs.__new__(MonitorArgs)

            if body is None and not opts.urn:
                raise TypeError("Missing required property 'body'")
            __props__.__dict__["body"] = body
        super(Monitor, __self__).__init__(
            'opensearch:index/monitor:Monitor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            body: Optional[pulumi.Input[str]] = None) -> 'Monitor':
        """
        Get an existing Monitor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] body: The monitor document
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MonitorState.__new__(_MonitorState)

        __props__.__dict__["body"] = body
        return Monitor(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Output[str]:
        """
        The monitor document
        """
        return pulumi.get(self, "body")

