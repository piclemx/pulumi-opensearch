# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SnapshotRepositoryArgs', 'SnapshotRepository']

@pulumi.input_type
class SnapshotRepositoryArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        The set of arguments for constructing a SnapshotRepository resource.
        :param pulumi.Input[str] type: The name of the repository backend (required plugins must be installed).
        :param pulumi.Input[str] name: The name of the repository.
        :param pulumi.Input[Mapping[str, Any]] settings: The settings map applicable for the backend, see official documentation for plugins.
        """
        pulumi.set(__self__, "type", type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The name of the repository backend (required plugins must be installed).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the repository.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The settings map applicable for the backend, see official documentation for plugins.
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "settings", value)


@pulumi.input_type
class _SnapshotRepositoryState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SnapshotRepository resources.
        :param pulumi.Input[str] name: The name of the repository.
        :param pulumi.Input[Mapping[str, Any]] settings: The settings map applicable for the backend, see official documentation for plugins.
        :param pulumi.Input[str] type: The name of the repository backend (required plugins must be installed).
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the repository.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        The settings map applicable for the backend, see official documentation for plugins.
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "settings", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the repository backend (required plugins must be installed).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class SnapshotRepository(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides an OpenSearch snapshot repository resource.

        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_opensearch as opensearch

        # Create a snapshot repository
        repo = opensearch.SnapshotRepository("repo",
            settings={
                "bucket": "es-index-backups",
                "region": "us-east-1",
                "role_arn": "arn:aws:iam::123456789012:role/MyRole",
            },
            type="s3")
        ```

        ## Import

        ```sh
         $ pulumi import opensearch:index/snapshotRepository:SnapshotRepository repo es-index-backups
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the repository.
        :param pulumi.Input[Mapping[str, Any]] settings: The settings map applicable for the backend, see official documentation for plugins.
        :param pulumi.Input[str] type: The name of the repository backend (required plugins must be installed).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SnapshotRepositoryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an OpenSearch snapshot repository resource.

        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_opensearch as opensearch

        # Create a snapshot repository
        repo = opensearch.SnapshotRepository("repo",
            settings={
                "bucket": "es-index-backups",
                "region": "us-east-1",
                "role_arn": "arn:aws:iam::123456789012:role/MyRole",
            },
            type="s3")
        ```

        ## Import

        ```sh
         $ pulumi import opensearch:index/snapshotRepository:SnapshotRepository repo es-index-backups
        ```

        :param str resource_name: The name of the resource.
        :param SnapshotRepositoryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SnapshotRepositoryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SnapshotRepositoryArgs.__new__(SnapshotRepositoryArgs)

            __props__.__dict__["name"] = name
            __props__.__dict__["settings"] = settings
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(SnapshotRepository, __self__).__init__(
            'opensearch:index/snapshotRepository:SnapshotRepository',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            settings: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'SnapshotRepository':
        """
        Get an existing SnapshotRepository resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the repository.
        :param pulumi.Input[Mapping[str, Any]] settings: The settings map applicable for the backend, see official documentation for plugins.
        :param pulumi.Input[str] type: The name of the repository backend (required plugins must be installed).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SnapshotRepositoryState.__new__(_SnapshotRepositoryState)

        __props__.__dict__["name"] = name
        __props__.__dict__["settings"] = settings
        __props__.__dict__["type"] = type
        return SnapshotRepository(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the repository.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def settings(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        The settings map applicable for the backend, see official documentation for plugins.
        """
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The name of the repository backend (required plugins must be installed).
        """
        return pulumi.get(self, "type")

