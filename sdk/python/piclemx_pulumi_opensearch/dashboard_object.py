# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DashboardObjectArgs', 'DashboardObject']

@pulumi.input_type
class DashboardObjectArgs:
    def __init__(__self__, *,
                 body: pulumi.Input[str],
                 index: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DashboardObject resource.
        :param pulumi.Input[str] body: The JSON body of the dashboard object.
        :param pulumi.Input[str] index: The name of the index where dashboard data is stored.
        """
        pulumi.set(__self__, "body", body)
        if index is not None:
            pulumi.set(__self__, "index", index)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Input[str]:
        """
        The JSON body of the dashboard object.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input[str]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the index where dashboard data is stored.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index", value)


@pulumi.input_type
class _DashboardObjectState:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 index: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DashboardObject resources.
        :param pulumi.Input[str] body: The JSON body of the dashboard object.
        :param pulumi.Input[str] index: The name of the index where dashboard data is stored.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if index is not None:
            pulumi.set(__self__, "index", index)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        The JSON body of the dashboard object.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def index(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the index where dashboard data is stored.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "index", value)


class DashboardObject(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 index: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides an OpenSearch Dashboards object resource. This resource interacts directly with the underlying OpenSearch index backing Dashboards, so the format must match what Dashboards the version of Dashboards is expecting. Dashboards with older versions - directly pulling the JSON from a Dashboards index of the same version of OpenSearch targeted by the provider is a workaround.

        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_opensearch as opensearch

        test_visualization_v6 = opensearch.DashboardObject("testVisualizationV6", body=\"\"\"[
          {
            "_id": "visualization:response-time-percentile",
            "_type": "doc",
            "_source": {
              "type": "visualization",
              "visualization": {
                "title": "Total response time percentiles",
                "visState": "{\\"title\\":\\"Total response time percentiles\\",\\"type\\":\\"line\\",\\"params\\":{\\"addTooltip\\":true,\\"addLegend\\":true,\\"legendPosition\\":\\"right\\",\\"showCircles\\":true,\\"interpolate\\":\\"linear\\",\\"scale\\":\\"linear\\",\\"drawLinesBetweenPoints\\":true,\\"radiusRatio\\":9,\\"times\\":[],\\"addTimeMarker\\":false,\\"defaultYExtents\\":false,\\"setYExtents\\":false},\\"aggs\\":[{\\"id\\":\\"1\\",\\"enabled\\":true,\\"type\\":\\"percentiles\\",\\"schema\\":\\"metric\\",\\"params\\":{\\"field\\":\\"app.total_time\\",\\"percents\\":[50,90,95]}},{\\"id\\":\\"2\\",\\"enabled\\":true,\\"type\\":\\"date_histogram\\",\\"schema\\":\\"segment\\",\\"params\\":{\\"field\\":\\"@timestamp\\",\\"interval\\":\\"auto\\",\\"customInterval\\":\\"2h\\",\\"min_doc_count\\":1,\\"extended_bounds\\":{}}},{\\"id\\":\\"3\\",\\"enabled\\":true,\\"type\\":\\"terms\\",\\"schema\\":\\"group\\",\\"params\\":{\\"field\\":\\"system.syslog.program\\",\\"size\\":5,\\"order\\":\\"desc\\",\\"orderBy\\":\\"_term\\"}}],\\"listeners\\":{}}",
                "uiStateJSON": "{}",
                "description": "",
                "version": 1
              }
            }
          }
        ]

        \"\"\")
        test_visualization_v7 = opensearch.DashboardObject("testVisualizationV7", body=\"\"\"[
          {
            "_id": "response-time-percentile",
            "_source": {
              "type": "visualization",
              "visualization": {
                "title": "Total response time percentiles",
                "visState": "{\\"title\\":\\"Total response time percentiles\\",\\"type\\":\\"line\\",\\"params\\":{\\"addTooltip\\":true,\\"addLegend\\":true,\\"legendPosition\\":\\"right\\",\\"showCircles\\":true,\\"interpolate\\":\\"linear\\",\\"scale\\":\\"linear\\",\\"drawLinesBetweenPoints\\":true,\\"radiusRatio\\":9,\\"times\\":[],\\"addTimeMarker\\":false,\\"defaultYExtents\\":false,\\"setYExtents\\":false},\\"aggs\\":[{\\"id\\":\\"1\\",\\"enabled\\":true,\\"type\\":\\"percentiles\\",\\"schema\\":\\"metric\\",\\"params\\":{\\"field\\":\\"app.total_time\\",\\"percents\\":[50,90,95]}},{\\"id\\":\\"2\\",\\"enabled\\":true,\\"type\\":\\"date_histogram\\",\\"schema\\":\\"segment\\",\\"params\\":{\\"field\\":\\"@timestamp\\",\\"interval\\":\\"auto\\",\\"customInterval\\":\\"2h\\",\\"min_doc_count\\":1,\\"extended_bounds\\":{}}},{\\"id\\":\\"3\\",\\"enabled\\":true,\\"type\\":\\"terms\\",\\"schema\\":\\"group\\",\\"params\\":{\\"field\\":\\"system.syslog.program\\",\\"size\\":5,\\"order\\":\\"desc\\",\\"orderBy\\":\\"_term\\"}}],\\"listeners\\":{}}",
                "uiStateJSON": "{}",
                "description": "",
                "version": 1
              }
            }
          }
        ]

        \"\"\")
        test_index_pattern_v6 = opensearch.DashboardObject("testIndexPatternV6", body=\"\"\"[
          {
            "_id": "index-pattern:cloudwatch",
            "_type": "doc",
            "_source": {
              "type": "index-pattern",
              "index-pattern": {
                "title": "cloudwatch-*",
                "timeFieldName": "timestamp"
              }
            }
          }
        ]

        \"\"\")
        test_index_pattern_v7 = opensearch.DashboardObject("testIndexPatternV7", body=\"\"\"[
          {
            "_id": "index-pattern:cloudwatch",
            "_type": "doc",
            "_source": {
              "type": "index-pattern",
              "index-pattern": {
                "title": "cloudwatch-*",
                "timeFieldName": "timestamp"
              }
            }
          }
        ]

        \"\"\")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] body: The JSON body of the dashboard object.
        :param pulumi.Input[str] index: The name of the index where dashboard data is stored.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DashboardObjectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides an OpenSearch Dashboards object resource. This resource interacts directly with the underlying OpenSearch index backing Dashboards, so the format must match what Dashboards the version of Dashboards is expecting. Dashboards with older versions - directly pulling the JSON from a Dashboards index of the same version of OpenSearch targeted by the provider is a workaround.

        ## Example Usage

        ```python
        import pulumi
        import piclemx_pulumi_opensearch as opensearch

        test_visualization_v6 = opensearch.DashboardObject("testVisualizationV6", body=\"\"\"[
          {
            "_id": "visualization:response-time-percentile",
            "_type": "doc",
            "_source": {
              "type": "visualization",
              "visualization": {
                "title": "Total response time percentiles",
                "visState": "{\\"title\\":\\"Total response time percentiles\\",\\"type\\":\\"line\\",\\"params\\":{\\"addTooltip\\":true,\\"addLegend\\":true,\\"legendPosition\\":\\"right\\",\\"showCircles\\":true,\\"interpolate\\":\\"linear\\",\\"scale\\":\\"linear\\",\\"drawLinesBetweenPoints\\":true,\\"radiusRatio\\":9,\\"times\\":[],\\"addTimeMarker\\":false,\\"defaultYExtents\\":false,\\"setYExtents\\":false},\\"aggs\\":[{\\"id\\":\\"1\\",\\"enabled\\":true,\\"type\\":\\"percentiles\\",\\"schema\\":\\"metric\\",\\"params\\":{\\"field\\":\\"app.total_time\\",\\"percents\\":[50,90,95]}},{\\"id\\":\\"2\\",\\"enabled\\":true,\\"type\\":\\"date_histogram\\",\\"schema\\":\\"segment\\",\\"params\\":{\\"field\\":\\"@timestamp\\",\\"interval\\":\\"auto\\",\\"customInterval\\":\\"2h\\",\\"min_doc_count\\":1,\\"extended_bounds\\":{}}},{\\"id\\":\\"3\\",\\"enabled\\":true,\\"type\\":\\"terms\\",\\"schema\\":\\"group\\",\\"params\\":{\\"field\\":\\"system.syslog.program\\",\\"size\\":5,\\"order\\":\\"desc\\",\\"orderBy\\":\\"_term\\"}}],\\"listeners\\":{}}",
                "uiStateJSON": "{}",
                "description": "",
                "version": 1
              }
            }
          }
        ]

        \"\"\")
        test_visualization_v7 = opensearch.DashboardObject("testVisualizationV7", body=\"\"\"[
          {
            "_id": "response-time-percentile",
            "_source": {
              "type": "visualization",
              "visualization": {
                "title": "Total response time percentiles",
                "visState": "{\\"title\\":\\"Total response time percentiles\\",\\"type\\":\\"line\\",\\"params\\":{\\"addTooltip\\":true,\\"addLegend\\":true,\\"legendPosition\\":\\"right\\",\\"showCircles\\":true,\\"interpolate\\":\\"linear\\",\\"scale\\":\\"linear\\",\\"drawLinesBetweenPoints\\":true,\\"radiusRatio\\":9,\\"times\\":[],\\"addTimeMarker\\":false,\\"defaultYExtents\\":false,\\"setYExtents\\":false},\\"aggs\\":[{\\"id\\":\\"1\\",\\"enabled\\":true,\\"type\\":\\"percentiles\\",\\"schema\\":\\"metric\\",\\"params\\":{\\"field\\":\\"app.total_time\\",\\"percents\\":[50,90,95]}},{\\"id\\":\\"2\\",\\"enabled\\":true,\\"type\\":\\"date_histogram\\",\\"schema\\":\\"segment\\",\\"params\\":{\\"field\\":\\"@timestamp\\",\\"interval\\":\\"auto\\",\\"customInterval\\":\\"2h\\",\\"min_doc_count\\":1,\\"extended_bounds\\":{}}},{\\"id\\":\\"3\\",\\"enabled\\":true,\\"type\\":\\"terms\\",\\"schema\\":\\"group\\",\\"params\\":{\\"field\\":\\"system.syslog.program\\",\\"size\\":5,\\"order\\":\\"desc\\",\\"orderBy\\":\\"_term\\"}}],\\"listeners\\":{}}",
                "uiStateJSON": "{}",
                "description": "",
                "version": 1
              }
            }
          }
        ]

        \"\"\")
        test_index_pattern_v6 = opensearch.DashboardObject("testIndexPatternV6", body=\"\"\"[
          {
            "_id": "index-pattern:cloudwatch",
            "_type": "doc",
            "_source": {
              "type": "index-pattern",
              "index-pattern": {
                "title": "cloudwatch-*",
                "timeFieldName": "timestamp"
              }
            }
          }
        ]

        \"\"\")
        test_index_pattern_v7 = opensearch.DashboardObject("testIndexPatternV7", body=\"\"\"[
          {
            "_id": "index-pattern:cloudwatch",
            "_type": "doc",
            "_source": {
              "type": "index-pattern",
              "index-pattern": {
                "title": "cloudwatch-*",
                "timeFieldName": "timestamp"
              }
            }
          }
        ]

        \"\"\")
        ```

        :param str resource_name: The name of the resource.
        :param DashboardObjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DashboardObjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 index: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DashboardObjectArgs.__new__(DashboardObjectArgs)

            if body is None and not opts.urn:
                raise TypeError("Missing required property 'body'")
            __props__.__dict__["body"] = body
            __props__.__dict__["index"] = index
        super(DashboardObject, __self__).__init__(
            'opensearch:index/dashboardObject:DashboardObject',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            body: Optional[pulumi.Input[str]] = None,
            index: Optional[pulumi.Input[str]] = None) -> 'DashboardObject':
        """
        Get an existing DashboardObject resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] body: The JSON body of the dashboard object.
        :param pulumi.Input[str] index: The name of the index where dashboard data is stored.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DashboardObjectState.__new__(_DashboardObjectState)

        __props__.__dict__["body"] = body
        __props__.__dict__["index"] = index
        return DashboardObject(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Output[str]:
        """
        The JSON body of the dashboard object.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def index(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the index where dashboard data is stored.
        """
        return pulumi.get(self, "index")

