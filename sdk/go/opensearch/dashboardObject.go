// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an OpenSearch Dashboards object resource. This resource interacts directly with the underlying OpenSearch index backing Dashboards, so the format must match what Dashboards the version of Dashboards is expecting. Dashboards with older versions - directly pulling the JSON from a Dashboards index of the same version of OpenSearch targeted by the provider is a workaround.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := opensearch.NewDashboardObject(ctx, "testVisualizationV6", &opensearch.DashboardObjectArgs{
//				Body: pulumi.String(`[
//	  {
//	    "_id": "visualization:response-time-percentile",
//	    "_type": "doc",
//	    "_source": {
//	      "type": "visualization",
//	      "visualization": {
//	        "title": "Total response time percentiles",
//	        "visState": "{\"title\":\"Total response time percentiles\",\"type\":\"line\",\"params\":{\"addTooltip\":true,\"addLegend\":true,\"legendPosition\":\"right\",\"showCircles\":true,\"interpolate\":\"linear\",\"scale\":\"linear\",\"drawLinesBetweenPoints\":true,\"radiusRatio\":9,\"times\":[],\"addTimeMarker\":false,\"defaultYExtents\":false,\"setYExtents\":false},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"percentiles\",\"schema\":\"metric\",\"params\":{\"field\":\"app.total_time\",\"percents\":[50,90,95]}},{\"id\":\"2\",\"enabled\":true,\"type\":\"date_histogram\",\"schema\":\"segment\",\"params\":{\"field\":\"@timestamp\",\"interval\":\"auto\",\"customInterval\":\"2h\",\"min_doc_count\":1,\"extended_bounds\":{}}},{\"id\":\"3\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"group\",\"params\":{\"field\":\"system.syslog.program\",\"size\":5,\"order\":\"desc\",\"orderBy\":\"_term\"}}],\"listeners\":{}}",
//	        "uiStateJSON": "{}",
//	        "description": "",
//	        "version": 1
//	      }
//	    }
//	  }
//
// ]
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			_, err = opensearch.NewDashboardObject(ctx, "testVisualizationV7", &opensearch.DashboardObjectArgs{
//				Body: pulumi.String(`[
//	  {
//	    "_id": "response-time-percentile",
//	    "_source": {
//	      "type": "visualization",
//	      "visualization": {
//	        "title": "Total response time percentiles",
//	        "visState": "{\"title\":\"Total response time percentiles\",\"type\":\"line\",\"params\":{\"addTooltip\":true,\"addLegend\":true,\"legendPosition\":\"right\",\"showCircles\":true,\"interpolate\":\"linear\",\"scale\":\"linear\",\"drawLinesBetweenPoints\":true,\"radiusRatio\":9,\"times\":[],\"addTimeMarker\":false,\"defaultYExtents\":false,\"setYExtents\":false},\"aggs\":[{\"id\":\"1\",\"enabled\":true,\"type\":\"percentiles\",\"schema\":\"metric\",\"params\":{\"field\":\"app.total_time\",\"percents\":[50,90,95]}},{\"id\":\"2\",\"enabled\":true,\"type\":\"date_histogram\",\"schema\":\"segment\",\"params\":{\"field\":\"@timestamp\",\"interval\":\"auto\",\"customInterval\":\"2h\",\"min_doc_count\":1,\"extended_bounds\":{}}},{\"id\":\"3\",\"enabled\":true,\"type\":\"terms\",\"schema\":\"group\",\"params\":{\"field\":\"system.syslog.program\",\"size\":5,\"order\":\"desc\",\"orderBy\":\"_term\"}}],\"listeners\":{}}",
//	        "uiStateJSON": "{}",
//	        "description": "",
//	        "version": 1
//	      }
//	    }
//	  }
//
// ]
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			_, err = opensearch.NewDashboardObject(ctx, "testIndexPatternV6", &opensearch.DashboardObjectArgs{
//				Body: pulumi.String(`[
//	  {
//	    "_id": "index-pattern:cloudwatch",
//	    "_type": "doc",
//	    "_source": {
//	      "type": "index-pattern",
//	      "index-pattern": {
//	        "title": "cloudwatch-*",
//	        "timeFieldName": "timestamp"
//	      }
//	    }
//	  }
//
// ]
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			_, err = opensearch.NewDashboardObject(ctx, "testIndexPatternV7", &opensearch.DashboardObjectArgs{
//				Body: pulumi.String(`[
//	  {
//	    "_id": "index-pattern:cloudwatch",
//	    "_type": "doc",
//	    "_source": {
//	      "type": "index-pattern",
//	      "index-pattern": {
//	        "title": "cloudwatch-*",
//	        "timeFieldName": "timestamp"
//	      }
//	    }
//	  }
//
// ]
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DashboardObject struct {
	pulumi.CustomResourceState

	// The JSON body of the dashboard object.
	Body pulumi.StringOutput `pulumi:"body"`
	// The name of the index where dashboard data is stored.
	Index pulumi.StringPtrOutput `pulumi:"index"`
}

// NewDashboardObject registers a new resource with the given unique name, arguments, and options.
func NewDashboardObject(ctx *pulumi.Context,
	name string, args *DashboardObjectArgs, opts ...pulumi.ResourceOption) (*DashboardObject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Body == nil {
		return nil, errors.New("invalid value for required argument 'Body'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DashboardObject
	err := ctx.RegisterResource("opensearch:index/dashboardObject:DashboardObject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboardObject gets an existing DashboardObject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboardObject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardObjectState, opts ...pulumi.ResourceOption) (*DashboardObject, error) {
	var resource DashboardObject
	err := ctx.ReadResource("opensearch:index/dashboardObject:DashboardObject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DashboardObject resources.
type dashboardObjectState struct {
	// The JSON body of the dashboard object.
	Body *string `pulumi:"body"`
	// The name of the index where dashboard data is stored.
	Index *string `pulumi:"index"`
}

type DashboardObjectState struct {
	// The JSON body of the dashboard object.
	Body pulumi.StringPtrInput
	// The name of the index where dashboard data is stored.
	Index pulumi.StringPtrInput
}

func (DashboardObjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardObjectState)(nil)).Elem()
}

type dashboardObjectArgs struct {
	// The JSON body of the dashboard object.
	Body string `pulumi:"body"`
	// The name of the index where dashboard data is stored.
	Index *string `pulumi:"index"`
}

// The set of arguments for constructing a DashboardObject resource.
type DashboardObjectArgs struct {
	// The JSON body of the dashboard object.
	Body pulumi.StringInput
	// The name of the index where dashboard data is stored.
	Index pulumi.StringPtrInput
}

func (DashboardObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardObjectArgs)(nil)).Elem()
}

type DashboardObjectInput interface {
	pulumi.Input

	ToDashboardObjectOutput() DashboardObjectOutput
	ToDashboardObjectOutputWithContext(ctx context.Context) DashboardObjectOutput
}

func (*DashboardObject) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardObject)(nil)).Elem()
}

func (i *DashboardObject) ToDashboardObjectOutput() DashboardObjectOutput {
	return i.ToDashboardObjectOutputWithContext(context.Background())
}

func (i *DashboardObject) ToDashboardObjectOutputWithContext(ctx context.Context) DashboardObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardObjectOutput)
}

// DashboardObjectArrayInput is an input type that accepts DashboardObjectArray and DashboardObjectArrayOutput values.
// You can construct a concrete instance of `DashboardObjectArrayInput` via:
//
//	DashboardObjectArray{ DashboardObjectArgs{...} }
type DashboardObjectArrayInput interface {
	pulumi.Input

	ToDashboardObjectArrayOutput() DashboardObjectArrayOutput
	ToDashboardObjectArrayOutputWithContext(context.Context) DashboardObjectArrayOutput
}

type DashboardObjectArray []DashboardObjectInput

func (DashboardObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardObject)(nil)).Elem()
}

func (i DashboardObjectArray) ToDashboardObjectArrayOutput() DashboardObjectArrayOutput {
	return i.ToDashboardObjectArrayOutputWithContext(context.Background())
}

func (i DashboardObjectArray) ToDashboardObjectArrayOutputWithContext(ctx context.Context) DashboardObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardObjectArrayOutput)
}

// DashboardObjectMapInput is an input type that accepts DashboardObjectMap and DashboardObjectMapOutput values.
// You can construct a concrete instance of `DashboardObjectMapInput` via:
//
//	DashboardObjectMap{ "key": DashboardObjectArgs{...} }
type DashboardObjectMapInput interface {
	pulumi.Input

	ToDashboardObjectMapOutput() DashboardObjectMapOutput
	ToDashboardObjectMapOutputWithContext(context.Context) DashboardObjectMapOutput
}

type DashboardObjectMap map[string]DashboardObjectInput

func (DashboardObjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardObject)(nil)).Elem()
}

func (i DashboardObjectMap) ToDashboardObjectMapOutput() DashboardObjectMapOutput {
	return i.ToDashboardObjectMapOutputWithContext(context.Background())
}

func (i DashboardObjectMap) ToDashboardObjectMapOutputWithContext(ctx context.Context) DashboardObjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardObjectMapOutput)
}

type DashboardObjectOutput struct{ *pulumi.OutputState }

func (DashboardObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardObject)(nil)).Elem()
}

func (o DashboardObjectOutput) ToDashboardObjectOutput() DashboardObjectOutput {
	return o
}

func (o DashboardObjectOutput) ToDashboardObjectOutputWithContext(ctx context.Context) DashboardObjectOutput {
	return o
}

// The JSON body of the dashboard object.
func (o DashboardObjectOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardObject) pulumi.StringOutput { return v.Body }).(pulumi.StringOutput)
}

// The name of the index where dashboard data is stored.
func (o DashboardObjectOutput) Index() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardObject) pulumi.StringPtrOutput { return v.Index }).(pulumi.StringPtrOutput)
}

type DashboardObjectArrayOutput struct{ *pulumi.OutputState }

func (DashboardObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardObject)(nil)).Elem()
}

func (o DashboardObjectArrayOutput) ToDashboardObjectArrayOutput() DashboardObjectArrayOutput {
	return o
}

func (o DashboardObjectArrayOutput) ToDashboardObjectArrayOutputWithContext(ctx context.Context) DashboardObjectArrayOutput {
	return o
}

func (o DashboardObjectArrayOutput) Index(i pulumi.IntInput) DashboardObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DashboardObject {
		return vs[0].([]*DashboardObject)[vs[1].(int)]
	}).(DashboardObjectOutput)
}

type DashboardObjectMapOutput struct{ *pulumi.OutputState }

func (DashboardObjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardObject)(nil)).Elem()
}

func (o DashboardObjectMapOutput) ToDashboardObjectMapOutput() DashboardObjectMapOutput {
	return o
}

func (o DashboardObjectMapOutput) ToDashboardObjectMapOutputWithContext(ctx context.Context) DashboardObjectMapOutput {
	return o
}

func (o DashboardObjectMapOutput) MapIndex(k pulumi.StringInput) DashboardObjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DashboardObject {
		return vs[0].(map[string]*DashboardObject)[vs[1].(string)]
	}).(DashboardObjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardObjectInput)(nil)).Elem(), &DashboardObject{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardObjectArrayInput)(nil)).Elem(), DashboardObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardObjectMapInput)(nil)).Elem(), DashboardObjectMap{})
	pulumi.RegisterOutputType(DashboardObjectOutput{})
	pulumi.RegisterOutputType(DashboardObjectArrayOutput{})
	pulumi.RegisterOutputType(DashboardObjectMapOutput{})
}
