// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an OpenSearch security role resource. Please refer to the OpenSearch Access Control documentation for details.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := opensearch.NewRole(ctx, "writer", &opensearch.RoleArgs{
//				ClusterPermissions: pulumi.StringArray{
//					pulumi.String("*"),
//				},
//				IndexPermissions: opensearch.RoleIndexPermissionArray{
//					&opensearch.RoleIndexPermissionArgs{
//						AllowedActions: pulumi.StringArray{
//							pulumi.String("read"),
//						},
//						DocumentLevelSecurity: pulumi.String("{\"term\": { \"readable_by\": \"${user.name}\"}}"),
//						IndexPatterns: pulumi.StringArray{
//							pulumi.String("pub*"),
//						},
//					},
//				},
//				RoleName: pulumi.String("foo_writer"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import opensearch:index/role:Role writer logs_writer
//
// ```
type Role struct {
	pulumi.CustomResourceState

	// A list of cluster permissions.
	ClusterPermissions pulumi.StringArrayOutput `pulumi:"clusterPermissions"`
	// Description of the role.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A configuration of index permissions
	IndexPermissions RoleIndexPermissionArrayOutput `pulumi:"indexPermissions"`
	// The name of the security role.
	RoleName pulumi.StringOutput `pulumi:"roleName"`
	// A configuration of tenant permissions
	TenantPermissions RoleTenantPermissionArrayOutput `pulumi:"tenantPermissions"`
}

// NewRole registers a new resource with the given unique name, arguments, and options.
func NewRole(ctx *pulumi.Context,
	name string, args *RoleArgs, opts ...pulumi.ResourceOption) (*Role, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleName == nil {
		return nil, errors.New("invalid value for required argument 'RoleName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Role
	err := ctx.RegisterResource("opensearch:index/role:Role", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRole gets an existing Role resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleState, opts ...pulumi.ResourceOption) (*Role, error) {
	var resource Role
	err := ctx.ReadResource("opensearch:index/role:Role", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Role resources.
type roleState struct {
	// A list of cluster permissions.
	ClusterPermissions []string `pulumi:"clusterPermissions"`
	// Description of the role.
	Description *string `pulumi:"description"`
	// A configuration of index permissions
	IndexPermissions []RoleIndexPermission `pulumi:"indexPermissions"`
	// The name of the security role.
	RoleName *string `pulumi:"roleName"`
	// A configuration of tenant permissions
	TenantPermissions []RoleTenantPermission `pulumi:"tenantPermissions"`
}

type RoleState struct {
	// A list of cluster permissions.
	ClusterPermissions pulumi.StringArrayInput
	// Description of the role.
	Description pulumi.StringPtrInput
	// A configuration of index permissions
	IndexPermissions RoleIndexPermissionArrayInput
	// The name of the security role.
	RoleName pulumi.StringPtrInput
	// A configuration of tenant permissions
	TenantPermissions RoleTenantPermissionArrayInput
}

func (RoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleState)(nil)).Elem()
}

type roleArgs struct {
	// A list of cluster permissions.
	ClusterPermissions []string `pulumi:"clusterPermissions"`
	// Description of the role.
	Description *string `pulumi:"description"`
	// A configuration of index permissions
	IndexPermissions []RoleIndexPermission `pulumi:"indexPermissions"`
	// The name of the security role.
	RoleName string `pulumi:"roleName"`
	// A configuration of tenant permissions
	TenantPermissions []RoleTenantPermission `pulumi:"tenantPermissions"`
}

// The set of arguments for constructing a Role resource.
type RoleArgs struct {
	// A list of cluster permissions.
	ClusterPermissions pulumi.StringArrayInput
	// Description of the role.
	Description pulumi.StringPtrInput
	// A configuration of index permissions
	IndexPermissions RoleIndexPermissionArrayInput
	// The name of the security role.
	RoleName pulumi.StringInput
	// A configuration of tenant permissions
	TenantPermissions RoleTenantPermissionArrayInput
}

func (RoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleArgs)(nil)).Elem()
}

type RoleInput interface {
	pulumi.Input

	ToRoleOutput() RoleOutput
	ToRoleOutputWithContext(ctx context.Context) RoleOutput
}

func (*Role) ElementType() reflect.Type {
	return reflect.TypeOf((**Role)(nil)).Elem()
}

func (i *Role) ToRoleOutput() RoleOutput {
	return i.ToRoleOutputWithContext(context.Background())
}

func (i *Role) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleOutput)
}

// RoleArrayInput is an input type that accepts RoleArray and RoleArrayOutput values.
// You can construct a concrete instance of `RoleArrayInput` via:
//
//	RoleArray{ RoleArgs{...} }
type RoleArrayInput interface {
	pulumi.Input

	ToRoleArrayOutput() RoleArrayOutput
	ToRoleArrayOutputWithContext(context.Context) RoleArrayOutput
}

type RoleArray []RoleInput

func (RoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Role)(nil)).Elem()
}

func (i RoleArray) ToRoleArrayOutput() RoleArrayOutput {
	return i.ToRoleArrayOutputWithContext(context.Background())
}

func (i RoleArray) ToRoleArrayOutputWithContext(ctx context.Context) RoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleArrayOutput)
}

// RoleMapInput is an input type that accepts RoleMap and RoleMapOutput values.
// You can construct a concrete instance of `RoleMapInput` via:
//
//	RoleMap{ "key": RoleArgs{...} }
type RoleMapInput interface {
	pulumi.Input

	ToRoleMapOutput() RoleMapOutput
	ToRoleMapOutputWithContext(context.Context) RoleMapOutput
}

type RoleMap map[string]RoleInput

func (RoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Role)(nil)).Elem()
}

func (i RoleMap) ToRoleMapOutput() RoleMapOutput {
	return i.ToRoleMapOutputWithContext(context.Background())
}

func (i RoleMap) ToRoleMapOutputWithContext(ctx context.Context) RoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleMapOutput)
}

type RoleOutput struct{ *pulumi.OutputState }

func (RoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Role)(nil)).Elem()
}

func (o RoleOutput) ToRoleOutput() RoleOutput {
	return o
}

func (o RoleOutput) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return o
}

// A list of cluster permissions.
func (o RoleOutput) ClusterPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Role) pulumi.StringArrayOutput { return v.ClusterPermissions }).(pulumi.StringArrayOutput)
}

// Description of the role.
func (o RoleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Role) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A configuration of index permissions
func (o RoleOutput) IndexPermissions() RoleIndexPermissionArrayOutput {
	return o.ApplyT(func(v *Role) RoleIndexPermissionArrayOutput { return v.IndexPermissions }).(RoleIndexPermissionArrayOutput)
}

// The name of the security role.
func (o RoleOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.RoleName }).(pulumi.StringOutput)
}

// A configuration of tenant permissions
func (o RoleOutput) TenantPermissions() RoleTenantPermissionArrayOutput {
	return o.ApplyT(func(v *Role) RoleTenantPermissionArrayOutput { return v.TenantPermissions }).(RoleTenantPermissionArrayOutput)
}

type RoleArrayOutput struct{ *pulumi.OutputState }

func (RoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Role)(nil)).Elem()
}

func (o RoleArrayOutput) ToRoleArrayOutput() RoleArrayOutput {
	return o
}

func (o RoleArrayOutput) ToRoleArrayOutputWithContext(ctx context.Context) RoleArrayOutput {
	return o
}

func (o RoleArrayOutput) Index(i pulumi.IntInput) RoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Role {
		return vs[0].([]*Role)[vs[1].(int)]
	}).(RoleOutput)
}

type RoleMapOutput struct{ *pulumi.OutputState }

func (RoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Role)(nil)).Elem()
}

func (o RoleMapOutput) ToRoleMapOutput() RoleMapOutput {
	return o
}

func (o RoleMapOutput) ToRoleMapOutputWithContext(ctx context.Context) RoleMapOutput {
	return o
}

func (o RoleMapOutput) MapIndex(k pulumi.StringInput) RoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Role {
		return vs[0].(map[string]*Role)[vs[1].(string)]
	}).(RoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleInput)(nil)).Elem(), &Role{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleArrayInput)(nil)).Elem(), RoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleMapInput)(nil)).Elem(), RoleMap{})
	pulumi.RegisterOutputType(RoleOutput{})
	pulumi.RegisterOutputType(RoleArrayOutput{})
	pulumi.RegisterOutputType(RoleMapOutput{})
}
