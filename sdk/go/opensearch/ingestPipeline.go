// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an OpenSearch ingest pipeline resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := opensearch.NewIngestPipeline(ctx, "test", &opensearch.IngestPipelineArgs{
//				Body: pulumi.String(`{
//	  "description" : "describe pipeline",
//	  "version": 123,
//	  "processors" : [
//	    {
//	      "set" : {
//	        "field": "foo",
//	        "value": "bar"
//	      }
//	    }
//	  ]
//	}
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import opensearch:index/ingestPipeline:IngestPipeline test terraform-test
//
// ```
type IngestPipeline struct {
	pulumi.CustomResourceState

	// The JSON body of the ingest pipeline
	Body pulumi.StringOutput `pulumi:"body"`
	// The name of the ingest pipeline
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewIngestPipeline registers a new resource with the given unique name, arguments, and options.
func NewIngestPipeline(ctx *pulumi.Context,
	name string, args *IngestPipelineArgs, opts ...pulumi.ResourceOption) (*IngestPipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Body == nil {
		return nil, errors.New("invalid value for required argument 'Body'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IngestPipeline
	err := ctx.RegisterResource("opensearch:index/ingestPipeline:IngestPipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIngestPipeline gets an existing IngestPipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIngestPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IngestPipelineState, opts ...pulumi.ResourceOption) (*IngestPipeline, error) {
	var resource IngestPipeline
	err := ctx.ReadResource("opensearch:index/ingestPipeline:IngestPipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IngestPipeline resources.
type ingestPipelineState struct {
	// The JSON body of the ingest pipeline
	Body *string `pulumi:"body"`
	// The name of the ingest pipeline
	Name *string `pulumi:"name"`
}

type IngestPipelineState struct {
	// The JSON body of the ingest pipeline
	Body pulumi.StringPtrInput
	// The name of the ingest pipeline
	Name pulumi.StringPtrInput
}

func (IngestPipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*ingestPipelineState)(nil)).Elem()
}

type ingestPipelineArgs struct {
	// The JSON body of the ingest pipeline
	Body string `pulumi:"body"`
	// The name of the ingest pipeline
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a IngestPipeline resource.
type IngestPipelineArgs struct {
	// The JSON body of the ingest pipeline
	Body pulumi.StringInput
	// The name of the ingest pipeline
	Name pulumi.StringPtrInput
}

func (IngestPipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ingestPipelineArgs)(nil)).Elem()
}

type IngestPipelineInput interface {
	pulumi.Input

	ToIngestPipelineOutput() IngestPipelineOutput
	ToIngestPipelineOutputWithContext(ctx context.Context) IngestPipelineOutput
}

func (*IngestPipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**IngestPipeline)(nil)).Elem()
}

func (i *IngestPipeline) ToIngestPipelineOutput() IngestPipelineOutput {
	return i.ToIngestPipelineOutputWithContext(context.Background())
}

func (i *IngestPipeline) ToIngestPipelineOutputWithContext(ctx context.Context) IngestPipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngestPipelineOutput)
}

// IngestPipelineArrayInput is an input type that accepts IngestPipelineArray and IngestPipelineArrayOutput values.
// You can construct a concrete instance of `IngestPipelineArrayInput` via:
//
//	IngestPipelineArray{ IngestPipelineArgs{...} }
type IngestPipelineArrayInput interface {
	pulumi.Input

	ToIngestPipelineArrayOutput() IngestPipelineArrayOutput
	ToIngestPipelineArrayOutputWithContext(context.Context) IngestPipelineArrayOutput
}

type IngestPipelineArray []IngestPipelineInput

func (IngestPipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IngestPipeline)(nil)).Elem()
}

func (i IngestPipelineArray) ToIngestPipelineArrayOutput() IngestPipelineArrayOutput {
	return i.ToIngestPipelineArrayOutputWithContext(context.Background())
}

func (i IngestPipelineArray) ToIngestPipelineArrayOutputWithContext(ctx context.Context) IngestPipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngestPipelineArrayOutput)
}

// IngestPipelineMapInput is an input type that accepts IngestPipelineMap and IngestPipelineMapOutput values.
// You can construct a concrete instance of `IngestPipelineMapInput` via:
//
//	IngestPipelineMap{ "key": IngestPipelineArgs{...} }
type IngestPipelineMapInput interface {
	pulumi.Input

	ToIngestPipelineMapOutput() IngestPipelineMapOutput
	ToIngestPipelineMapOutputWithContext(context.Context) IngestPipelineMapOutput
}

type IngestPipelineMap map[string]IngestPipelineInput

func (IngestPipelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IngestPipeline)(nil)).Elem()
}

func (i IngestPipelineMap) ToIngestPipelineMapOutput() IngestPipelineMapOutput {
	return i.ToIngestPipelineMapOutputWithContext(context.Background())
}

func (i IngestPipelineMap) ToIngestPipelineMapOutputWithContext(ctx context.Context) IngestPipelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IngestPipelineMapOutput)
}

type IngestPipelineOutput struct{ *pulumi.OutputState }

func (IngestPipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IngestPipeline)(nil)).Elem()
}

func (o IngestPipelineOutput) ToIngestPipelineOutput() IngestPipelineOutput {
	return o
}

func (o IngestPipelineOutput) ToIngestPipelineOutputWithContext(ctx context.Context) IngestPipelineOutput {
	return o
}

// The JSON body of the ingest pipeline
func (o IngestPipelineOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v *IngestPipeline) pulumi.StringOutput { return v.Body }).(pulumi.StringOutput)
}

// The name of the ingest pipeline
func (o IngestPipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IngestPipeline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type IngestPipelineArrayOutput struct{ *pulumi.OutputState }

func (IngestPipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IngestPipeline)(nil)).Elem()
}

func (o IngestPipelineArrayOutput) ToIngestPipelineArrayOutput() IngestPipelineArrayOutput {
	return o
}

func (o IngestPipelineArrayOutput) ToIngestPipelineArrayOutputWithContext(ctx context.Context) IngestPipelineArrayOutput {
	return o
}

func (o IngestPipelineArrayOutput) Index(i pulumi.IntInput) IngestPipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IngestPipeline {
		return vs[0].([]*IngestPipeline)[vs[1].(int)]
	}).(IngestPipelineOutput)
}

type IngestPipelineMapOutput struct{ *pulumi.OutputState }

func (IngestPipelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IngestPipeline)(nil)).Elem()
}

func (o IngestPipelineMapOutput) ToIngestPipelineMapOutput() IngestPipelineMapOutput {
	return o
}

func (o IngestPipelineMapOutput) ToIngestPipelineMapOutputWithContext(ctx context.Context) IngestPipelineMapOutput {
	return o
}

func (o IngestPipelineMapOutput) MapIndex(k pulumi.StringInput) IngestPipelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IngestPipeline {
		return vs[0].(map[string]*IngestPipeline)[vs[1].(string)]
	}).(IngestPipelineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IngestPipelineInput)(nil)).Elem(), &IngestPipeline{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngestPipelineArrayInput)(nil)).Elem(), IngestPipelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IngestPipelineMapInput)(nil)).Elem(), IngestPipelineMap{})
	pulumi.RegisterOutputType(IngestPipelineOutput{})
	pulumi.RegisterOutputType(IngestPipelineArrayOutput{})
	pulumi.RegisterOutputType(IngestPipelineMapOutput{})
}
