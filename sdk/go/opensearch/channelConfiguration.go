// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an OpenSearch channel configuration. Please refer to the OpenSearch channel configuration documentation for details.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := opensearch.NewChannelConfiguration(ctx, "configuration1", &opensearch.ChannelConfigurationArgs{
//				Body: pulumi.String(`{
//	  "config_id": "configuration_1",
//	  "config": {
//	    "name": "name",
//	    "description" : "description",
//	    "config_type" : "slack",
//	    "is_enabled" : true,
//	    "slack": {
//	      "url": "https://sample-slack-webhook"
//	    }
//	  }
//	}
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import opensearch:index/channelConfiguration:ChannelConfiguration configuration_1 configuration_1
//
// ```
type ChannelConfiguration struct {
	pulumi.CustomResourceState

	// The channel configuration document
	Body pulumi.StringOutput `pulumi:"body"`
}

// NewChannelConfiguration registers a new resource with the given unique name, arguments, and options.
func NewChannelConfiguration(ctx *pulumi.Context,
	name string, args *ChannelConfigurationArgs, opts ...pulumi.ResourceOption) (*ChannelConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Body == nil {
		return nil, errors.New("invalid value for required argument 'Body'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ChannelConfiguration
	err := ctx.RegisterResource("opensearch:index/channelConfiguration:ChannelConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChannelConfiguration gets an existing ChannelConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChannelConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChannelConfigurationState, opts ...pulumi.ResourceOption) (*ChannelConfiguration, error) {
	var resource ChannelConfiguration
	err := ctx.ReadResource("opensearch:index/channelConfiguration:ChannelConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChannelConfiguration resources.
type channelConfigurationState struct {
	// The channel configuration document
	Body *string `pulumi:"body"`
}

type ChannelConfigurationState struct {
	// The channel configuration document
	Body pulumi.StringPtrInput
}

func (ChannelConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*channelConfigurationState)(nil)).Elem()
}

type channelConfigurationArgs struct {
	// The channel configuration document
	Body string `pulumi:"body"`
}

// The set of arguments for constructing a ChannelConfiguration resource.
type ChannelConfigurationArgs struct {
	// The channel configuration document
	Body pulumi.StringInput
}

func (ChannelConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*channelConfigurationArgs)(nil)).Elem()
}

type ChannelConfigurationInput interface {
	pulumi.Input

	ToChannelConfigurationOutput() ChannelConfigurationOutput
	ToChannelConfigurationOutputWithContext(ctx context.Context) ChannelConfigurationOutput
}

func (*ChannelConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelConfiguration)(nil)).Elem()
}

func (i *ChannelConfiguration) ToChannelConfigurationOutput() ChannelConfigurationOutput {
	return i.ToChannelConfigurationOutputWithContext(context.Background())
}

func (i *ChannelConfiguration) ToChannelConfigurationOutputWithContext(ctx context.Context) ChannelConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelConfigurationOutput)
}

// ChannelConfigurationArrayInput is an input type that accepts ChannelConfigurationArray and ChannelConfigurationArrayOutput values.
// You can construct a concrete instance of `ChannelConfigurationArrayInput` via:
//
//	ChannelConfigurationArray{ ChannelConfigurationArgs{...} }
type ChannelConfigurationArrayInput interface {
	pulumi.Input

	ToChannelConfigurationArrayOutput() ChannelConfigurationArrayOutput
	ToChannelConfigurationArrayOutputWithContext(context.Context) ChannelConfigurationArrayOutput
}

type ChannelConfigurationArray []ChannelConfigurationInput

func (ChannelConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChannelConfiguration)(nil)).Elem()
}

func (i ChannelConfigurationArray) ToChannelConfigurationArrayOutput() ChannelConfigurationArrayOutput {
	return i.ToChannelConfigurationArrayOutputWithContext(context.Background())
}

func (i ChannelConfigurationArray) ToChannelConfigurationArrayOutputWithContext(ctx context.Context) ChannelConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelConfigurationArrayOutput)
}

// ChannelConfigurationMapInput is an input type that accepts ChannelConfigurationMap and ChannelConfigurationMapOutput values.
// You can construct a concrete instance of `ChannelConfigurationMapInput` via:
//
//	ChannelConfigurationMap{ "key": ChannelConfigurationArgs{...} }
type ChannelConfigurationMapInput interface {
	pulumi.Input

	ToChannelConfigurationMapOutput() ChannelConfigurationMapOutput
	ToChannelConfigurationMapOutputWithContext(context.Context) ChannelConfigurationMapOutput
}

type ChannelConfigurationMap map[string]ChannelConfigurationInput

func (ChannelConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChannelConfiguration)(nil)).Elem()
}

func (i ChannelConfigurationMap) ToChannelConfigurationMapOutput() ChannelConfigurationMapOutput {
	return i.ToChannelConfigurationMapOutputWithContext(context.Background())
}

func (i ChannelConfigurationMap) ToChannelConfigurationMapOutputWithContext(ctx context.Context) ChannelConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChannelConfigurationMapOutput)
}

type ChannelConfigurationOutput struct{ *pulumi.OutputState }

func (ChannelConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChannelConfiguration)(nil)).Elem()
}

func (o ChannelConfigurationOutput) ToChannelConfigurationOutput() ChannelConfigurationOutput {
	return o
}

func (o ChannelConfigurationOutput) ToChannelConfigurationOutputWithContext(ctx context.Context) ChannelConfigurationOutput {
	return o
}

// The channel configuration document
func (o ChannelConfigurationOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v *ChannelConfiguration) pulumi.StringOutput { return v.Body }).(pulumi.StringOutput)
}

type ChannelConfigurationArrayOutput struct{ *pulumi.OutputState }

func (ChannelConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChannelConfiguration)(nil)).Elem()
}

func (o ChannelConfigurationArrayOutput) ToChannelConfigurationArrayOutput() ChannelConfigurationArrayOutput {
	return o
}

func (o ChannelConfigurationArrayOutput) ToChannelConfigurationArrayOutputWithContext(ctx context.Context) ChannelConfigurationArrayOutput {
	return o
}

func (o ChannelConfigurationArrayOutput) Index(i pulumi.IntInput) ChannelConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ChannelConfiguration {
		return vs[0].([]*ChannelConfiguration)[vs[1].(int)]
	}).(ChannelConfigurationOutput)
}

type ChannelConfigurationMapOutput struct{ *pulumi.OutputState }

func (ChannelConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChannelConfiguration)(nil)).Elem()
}

func (o ChannelConfigurationMapOutput) ToChannelConfigurationMapOutput() ChannelConfigurationMapOutput {
	return o
}

func (o ChannelConfigurationMapOutput) ToChannelConfigurationMapOutputWithContext(ctx context.Context) ChannelConfigurationMapOutput {
	return o
}

func (o ChannelConfigurationMapOutput) MapIndex(k pulumi.StringInput) ChannelConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ChannelConfiguration {
		return vs[0].(map[string]*ChannelConfiguration)[vs[1].(string)]
	}).(ChannelConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelConfigurationInput)(nil)).Elem(), &ChannelConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelConfigurationArrayInput)(nil)).Elem(), ChannelConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChannelConfigurationMapInput)(nil)).Elem(), ChannelConfigurationMap{})
	pulumi.RegisterOutputType(ChannelConfigurationOutput{})
	pulumi.RegisterOutputType(ChannelConfigurationArrayOutput{})
	pulumi.RegisterOutputType(ChannelConfigurationMapOutput{})
}
