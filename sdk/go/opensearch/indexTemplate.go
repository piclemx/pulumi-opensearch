// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an OpenSearch index template resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := opensearch.NewIndexTemplate(ctx, "template1", &opensearch.IndexTemplateArgs{
//				Body: pulumi.String(`{
//	  "index_patterns": [
//	    "logs-2020-01-*"
//	  ],
//	  "template": {
//	    "aliases": {
//	      "my_logs": {}
//	    },
//	    "settings": {
//	      "index": {
//	        "number_of_shards": "2",
//	        "number_of_replicas": "1"
//	      }
//	    },
//	    "mappings": {
//	      "properties": {
//	        "timestamp": {
//	          "type": "date",
//	          "format": "yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"
//	        },
//	        "value": {
//	          "type": "double"
//	        }
//	      }
//	    }
//	  }
//	}
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import opensearch:index/indexTemplate:IndexTemplate template_1 template_1
//
// ```
type IndexTemplate struct {
	pulumi.CustomResourceState

	// The JSON body of the index template.
	Body pulumi.StringOutput `pulumi:"body"`
	// The name of the index template.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewIndexTemplate registers a new resource with the given unique name, arguments, and options.
func NewIndexTemplate(ctx *pulumi.Context,
	name string, args *IndexTemplateArgs, opts ...pulumi.ResourceOption) (*IndexTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Body == nil {
		return nil, errors.New("invalid value for required argument 'Body'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IndexTemplate
	err := ctx.RegisterResource("opensearch:index/indexTemplate:IndexTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIndexTemplate gets an existing IndexTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIndexTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IndexTemplateState, opts ...pulumi.ResourceOption) (*IndexTemplate, error) {
	var resource IndexTemplate
	err := ctx.ReadResource("opensearch:index/indexTemplate:IndexTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IndexTemplate resources.
type indexTemplateState struct {
	// The JSON body of the index template.
	Body *string `pulumi:"body"`
	// The name of the index template.
	Name *string `pulumi:"name"`
}

type IndexTemplateState struct {
	// The JSON body of the index template.
	Body pulumi.StringPtrInput
	// The name of the index template.
	Name pulumi.StringPtrInput
}

func (IndexTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*indexTemplateState)(nil)).Elem()
}

type indexTemplateArgs struct {
	// The JSON body of the index template.
	Body string `pulumi:"body"`
	// The name of the index template.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a IndexTemplate resource.
type IndexTemplateArgs struct {
	// The JSON body of the index template.
	Body pulumi.StringInput
	// The name of the index template.
	Name pulumi.StringPtrInput
}

func (IndexTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*indexTemplateArgs)(nil)).Elem()
}

type IndexTemplateInput interface {
	pulumi.Input

	ToIndexTemplateOutput() IndexTemplateOutput
	ToIndexTemplateOutputWithContext(ctx context.Context) IndexTemplateOutput
}

func (*IndexTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexTemplate)(nil)).Elem()
}

func (i *IndexTemplate) ToIndexTemplateOutput() IndexTemplateOutput {
	return i.ToIndexTemplateOutputWithContext(context.Background())
}

func (i *IndexTemplate) ToIndexTemplateOutputWithContext(ctx context.Context) IndexTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexTemplateOutput)
}

// IndexTemplateArrayInput is an input type that accepts IndexTemplateArray and IndexTemplateArrayOutput values.
// You can construct a concrete instance of `IndexTemplateArrayInput` via:
//
//	IndexTemplateArray{ IndexTemplateArgs{...} }
type IndexTemplateArrayInput interface {
	pulumi.Input

	ToIndexTemplateArrayOutput() IndexTemplateArrayOutput
	ToIndexTemplateArrayOutputWithContext(context.Context) IndexTemplateArrayOutput
}

type IndexTemplateArray []IndexTemplateInput

func (IndexTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IndexTemplate)(nil)).Elem()
}

func (i IndexTemplateArray) ToIndexTemplateArrayOutput() IndexTemplateArrayOutput {
	return i.ToIndexTemplateArrayOutputWithContext(context.Background())
}

func (i IndexTemplateArray) ToIndexTemplateArrayOutputWithContext(ctx context.Context) IndexTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexTemplateArrayOutput)
}

// IndexTemplateMapInput is an input type that accepts IndexTemplateMap and IndexTemplateMapOutput values.
// You can construct a concrete instance of `IndexTemplateMapInput` via:
//
//	IndexTemplateMap{ "key": IndexTemplateArgs{...} }
type IndexTemplateMapInput interface {
	pulumi.Input

	ToIndexTemplateMapOutput() IndexTemplateMapOutput
	ToIndexTemplateMapOutputWithContext(context.Context) IndexTemplateMapOutput
}

type IndexTemplateMap map[string]IndexTemplateInput

func (IndexTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IndexTemplate)(nil)).Elem()
}

func (i IndexTemplateMap) ToIndexTemplateMapOutput() IndexTemplateMapOutput {
	return i.ToIndexTemplateMapOutputWithContext(context.Background())
}

func (i IndexTemplateMap) ToIndexTemplateMapOutputWithContext(ctx context.Context) IndexTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexTemplateMapOutput)
}

type IndexTemplateOutput struct{ *pulumi.OutputState }

func (IndexTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IndexTemplate)(nil)).Elem()
}

func (o IndexTemplateOutput) ToIndexTemplateOutput() IndexTemplateOutput {
	return o
}

func (o IndexTemplateOutput) ToIndexTemplateOutputWithContext(ctx context.Context) IndexTemplateOutput {
	return o
}

// The JSON body of the index template.
func (o IndexTemplateOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v *IndexTemplate) pulumi.StringOutput { return v.Body }).(pulumi.StringOutput)
}

// The name of the index template.
func (o IndexTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IndexTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type IndexTemplateArrayOutput struct{ *pulumi.OutputState }

func (IndexTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IndexTemplate)(nil)).Elem()
}

func (o IndexTemplateArrayOutput) ToIndexTemplateArrayOutput() IndexTemplateArrayOutput {
	return o
}

func (o IndexTemplateArrayOutput) ToIndexTemplateArrayOutputWithContext(ctx context.Context) IndexTemplateArrayOutput {
	return o
}

func (o IndexTemplateArrayOutput) Index(i pulumi.IntInput) IndexTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IndexTemplate {
		return vs[0].([]*IndexTemplate)[vs[1].(int)]
	}).(IndexTemplateOutput)
}

type IndexTemplateMapOutput struct{ *pulumi.OutputState }

func (IndexTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IndexTemplate)(nil)).Elem()
}

func (o IndexTemplateMapOutput) ToIndexTemplateMapOutput() IndexTemplateMapOutput {
	return o
}

func (o IndexTemplateMapOutput) ToIndexTemplateMapOutputWithContext(ctx context.Context) IndexTemplateMapOutput {
	return o
}

func (o IndexTemplateMapOutput) MapIndex(k pulumi.StringInput) IndexTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IndexTemplate {
		return vs[0].(map[string]*IndexTemplate)[vs[1].(string)]
	}).(IndexTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IndexTemplateInput)(nil)).Elem(), &IndexTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexTemplateArrayInput)(nil)).Elem(), IndexTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexTemplateMapInput)(nil)).Elem(), IndexTemplateMap{})
	pulumi.RegisterOutputType(IndexTemplateOutput{})
	pulumi.RegisterOutputType(IndexTemplateArrayOutput{})
	pulumi.RegisterOutputType(IndexTemplateMapOutput{})
}
