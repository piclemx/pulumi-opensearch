// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Component templates are building blocks for constructing index templates that specify index mappings, settings, and aliases. You cannot directly apply a component template to a data stream or index. To be applied, a component template must be included in an index templateâ€™s `composedOf` list.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := opensearch.NewComponentTemplate(ctx, "test", &opensearch.ComponentTemplateArgs{
//				Body: pulumi.String(`{
//	  "template": {
//	    "settings": {
//	      "index": {
//	        "number_of_shards": "1"
//	      }
//	    },
//	    "mappings": {
//	      "properties": {
//	        "host_name": {
//	          "type": "keyword"
//	        },
//	        "created_at": {
//	          "type": "date",
//	          "format": "EEE MMM dd HH:mm:ss Z yyyy"
//	        }
//	      }
//	    },
//	    "aliases": {
//	      "mydata": { }
//	    }
//	  }
//	}
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import by name
//
// ```sh
//
//	$ pulumi import opensearch:index/componentTemplate:ComponentTemplate test terraform-test
//
// ```
type ComponentTemplate struct {
	pulumi.CustomResourceState

	// The JSON body of the template.
	Body pulumi.StringOutput `pulumi:"body"`
	// Name of the component template to create.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewComponentTemplate registers a new resource with the given unique name, arguments, and options.
func NewComponentTemplate(ctx *pulumi.Context,
	name string, args *ComponentTemplateArgs, opts ...pulumi.ResourceOption) (*ComponentTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Body == nil {
		return nil, errors.New("invalid value for required argument 'Body'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ComponentTemplate
	err := ctx.RegisterResource("opensearch:index/componentTemplate:ComponentTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComponentTemplate gets an existing ComponentTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComponentTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComponentTemplateState, opts ...pulumi.ResourceOption) (*ComponentTemplate, error) {
	var resource ComponentTemplate
	err := ctx.ReadResource("opensearch:index/componentTemplate:ComponentTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComponentTemplate resources.
type componentTemplateState struct {
	// The JSON body of the template.
	Body *string `pulumi:"body"`
	// Name of the component template to create.
	Name *string `pulumi:"name"`
}

type ComponentTemplateState struct {
	// The JSON body of the template.
	Body pulumi.StringPtrInput
	// Name of the component template to create.
	Name pulumi.StringPtrInput
}

func (ComponentTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*componentTemplateState)(nil)).Elem()
}

type componentTemplateArgs struct {
	// The JSON body of the template.
	Body string `pulumi:"body"`
	// Name of the component template to create.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ComponentTemplate resource.
type ComponentTemplateArgs struct {
	// The JSON body of the template.
	Body pulumi.StringInput
	// Name of the component template to create.
	Name pulumi.StringPtrInput
}

func (ComponentTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*componentTemplateArgs)(nil)).Elem()
}

type ComponentTemplateInput interface {
	pulumi.Input

	ToComponentTemplateOutput() ComponentTemplateOutput
	ToComponentTemplateOutputWithContext(ctx context.Context) ComponentTemplateOutput
}

func (*ComponentTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTemplate)(nil)).Elem()
}

func (i *ComponentTemplate) ToComponentTemplateOutput() ComponentTemplateOutput {
	return i.ToComponentTemplateOutputWithContext(context.Background())
}

func (i *ComponentTemplate) ToComponentTemplateOutputWithContext(ctx context.Context) ComponentTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTemplateOutput)
}

// ComponentTemplateArrayInput is an input type that accepts ComponentTemplateArray and ComponentTemplateArrayOutput values.
// You can construct a concrete instance of `ComponentTemplateArrayInput` via:
//
//	ComponentTemplateArray{ ComponentTemplateArgs{...} }
type ComponentTemplateArrayInput interface {
	pulumi.Input

	ToComponentTemplateArrayOutput() ComponentTemplateArrayOutput
	ToComponentTemplateArrayOutputWithContext(context.Context) ComponentTemplateArrayOutput
}

type ComponentTemplateArray []ComponentTemplateInput

func (ComponentTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComponentTemplate)(nil)).Elem()
}

func (i ComponentTemplateArray) ToComponentTemplateArrayOutput() ComponentTemplateArrayOutput {
	return i.ToComponentTemplateArrayOutputWithContext(context.Background())
}

func (i ComponentTemplateArray) ToComponentTemplateArrayOutputWithContext(ctx context.Context) ComponentTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTemplateArrayOutput)
}

// ComponentTemplateMapInput is an input type that accepts ComponentTemplateMap and ComponentTemplateMapOutput values.
// You can construct a concrete instance of `ComponentTemplateMapInput` via:
//
//	ComponentTemplateMap{ "key": ComponentTemplateArgs{...} }
type ComponentTemplateMapInput interface {
	pulumi.Input

	ToComponentTemplateMapOutput() ComponentTemplateMapOutput
	ToComponentTemplateMapOutputWithContext(context.Context) ComponentTemplateMapOutput
}

type ComponentTemplateMap map[string]ComponentTemplateInput

func (ComponentTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComponentTemplate)(nil)).Elem()
}

func (i ComponentTemplateMap) ToComponentTemplateMapOutput() ComponentTemplateMapOutput {
	return i.ToComponentTemplateMapOutputWithContext(context.Background())
}

func (i ComponentTemplateMap) ToComponentTemplateMapOutputWithContext(ctx context.Context) ComponentTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentTemplateMapOutput)
}

type ComponentTemplateOutput struct{ *pulumi.OutputState }

func (ComponentTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComponentTemplate)(nil)).Elem()
}

func (o ComponentTemplateOutput) ToComponentTemplateOutput() ComponentTemplateOutput {
	return o
}

func (o ComponentTemplateOutput) ToComponentTemplateOutputWithContext(ctx context.Context) ComponentTemplateOutput {
	return o
}

// The JSON body of the template.
func (o ComponentTemplateOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v *ComponentTemplate) pulumi.StringOutput { return v.Body }).(pulumi.StringOutput)
}

// Name of the component template to create.
func (o ComponentTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComponentTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type ComponentTemplateArrayOutput struct{ *pulumi.OutputState }

func (ComponentTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComponentTemplate)(nil)).Elem()
}

func (o ComponentTemplateArrayOutput) ToComponentTemplateArrayOutput() ComponentTemplateArrayOutput {
	return o
}

func (o ComponentTemplateArrayOutput) ToComponentTemplateArrayOutputWithContext(ctx context.Context) ComponentTemplateArrayOutput {
	return o
}

func (o ComponentTemplateArrayOutput) Index(i pulumi.IntInput) ComponentTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ComponentTemplate {
		return vs[0].([]*ComponentTemplate)[vs[1].(int)]
	}).(ComponentTemplateOutput)
}

type ComponentTemplateMapOutput struct{ *pulumi.OutputState }

func (ComponentTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComponentTemplate)(nil)).Elem()
}

func (o ComponentTemplateMapOutput) ToComponentTemplateMapOutput() ComponentTemplateMapOutput {
	return o
}

func (o ComponentTemplateMapOutput) ToComponentTemplateMapOutputWithContext(ctx context.Context) ComponentTemplateMapOutput {
	return o
}

func (o ComponentTemplateMapOutput) MapIndex(k pulumi.StringInput) ComponentTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ComponentTemplate {
		return vs[0].(map[string]*ComponentTemplate)[vs[1].(string)]
	}).(ComponentTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTemplateInput)(nil)).Elem(), &ComponentTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTemplateArrayInput)(nil)).Elem(), ComponentTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentTemplateMapInput)(nil)).Elem(), ComponentTemplateMap{})
	pulumi.RegisterOutputType(ComponentTemplateOutput{})
	pulumi.RegisterOutputType(ComponentTemplateArrayOutput{})
	pulumi.RegisterOutputType(ComponentTemplateMapOutput{})
}
