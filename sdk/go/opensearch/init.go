// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "opensearch:index/anomalyDetection:AnomalyDetection":
		r = &AnomalyDetection{}
	case "opensearch:index/auditConfig:AuditConfig":
		r = &AuditConfig{}
	case "opensearch:index/channelConfiguration:ChannelConfiguration":
		r = &ChannelConfiguration{}
	case "opensearch:index/clusterSettings:ClusterSettings":
		r = &ClusterSettings{}
	case "opensearch:index/componentTemplate:ComponentTemplate":
		r = &ComponentTemplate{}
	case "opensearch:index/composableIndexTemplate:ComposableIndexTemplate":
		r = &ComposableIndexTemplate{}
	case "opensearch:index/dashboardObject:DashboardObject":
		r = &DashboardObject{}
	case "opensearch:index/dashboardTenant:DashboardTenant":
		r = &DashboardTenant{}
	case "opensearch:index/dataStream:DataStream":
		r = &DataStream{}
	case "opensearch:index/index:Index":
		r = &Index{}
	case "opensearch:index/indexTemplate:IndexTemplate":
		r = &IndexTemplate{}
	case "opensearch:index/ingestPipeline:IngestPipeline":
		r = &IngestPipeline{}
	case "opensearch:index/ismPolicy:IsmPolicy":
		r = &IsmPolicy{}
	case "opensearch:index/ismPolicyMapping:IsmPolicyMapping":
		r = &IsmPolicyMapping{}
	case "opensearch:index/monitor:Monitor":
		r = &Monitor{}
	case "opensearch:index/role:Role":
		r = &Role{}
	case "opensearch:index/rolesMapping:RolesMapping":
		r = &RolesMapping{}
	case "opensearch:index/script:Script":
		r = &Script{}
	case "opensearch:index/smPolicy:SmPolicy":
		r = &SmPolicy{}
	case "opensearch:index/snapshotRepository:SnapshotRepository":
		r = &SnapshotRepository{}
	case "opensearch:index/user:User":
		r = &User{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:opensearch" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/anomalyDetection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/auditConfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/channelConfiguration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/clusterSettings",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/componentTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/composableIndexTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/dashboardObject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/dashboardTenant",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/dataStream",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/index",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/indexTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/ingestPipeline",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/ismPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/ismPolicyMapping",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/monitor",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/role",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/rolesMapping",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/script",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/smPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/snapshotRepository",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"opensearch",
		"index/user",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"opensearch",
		&pkg{version},
	)
}
