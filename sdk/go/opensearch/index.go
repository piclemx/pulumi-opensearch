// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an OpenSearch index resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := opensearch.NewIndex(ctx, "test-simple-index", &opensearch.IndexArgs{
//				Mappings: pulumi.String(`{
//	  "properties": {
//	    "name": {
//	      "type": "text"
//	    }
//	  }
//	}
//
// `),
//
//				NumberOfReplicas: pulumi.String("1"),
//				NumberOfShards:   pulumi.String("1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// # Import by name
//
// ```sh
//
//	$ pulumi import opensearch:index/index:Index test terraform-test
//
// ```
type Index struct {
	pulumi.CustomResourceState

	// A JSON string describing a set of aliases. The index aliases API allows aliasing an index with a name, with all APIs automatically converting the alias name to the actual index name. An alias can also be mapped to more than one index, and when specifying it, the alias will automatically expand to the aliased indices.
	Aliases pulumi.StringPtrOutput `pulumi:"aliases"`
	// A JSON string describing the analyzers applied to the index.
	AnalysisAnalyzer pulumi.StringPtrOutput `pulumi:"analysisAnalyzer"`
	// A JSON string describing the charFilters applied to the index.
	AnalysisCharFilter pulumi.StringPtrOutput `pulumi:"analysisCharFilter"`
	// A JSON string describing the filters applied to the index.
	AnalysisFilter pulumi.StringPtrOutput `pulumi:"analysisFilter"`
	// A JSON string describing the normalizers applied to the index.
	AnalysisNormalizer pulumi.StringPtrOutput `pulumi:"analysisNormalizer"`
	// A JSON string describing the tokenizers applied to the index.
	AnalysisTokenizer pulumi.StringPtrOutput `pulumi:"analysisTokenizer"`
	// The maximum number of tokens that can be produced using _analyze API. A stringified number.
	AnalyzeMaxTokenCount pulumi.StringPtrOutput `pulumi:"analyzeMaxTokenCount"`
	// Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)
	AutoExpandReplicas pulumi.StringPtrOutput `pulumi:"autoExpandReplicas"`
	// Set to `true` to disable index metadata reads and writes.
	BlocksMetadata pulumi.BoolPtrOutput `pulumi:"blocksMetadata"`
	// Set to `true` to disable read operations against the index.
	BlocksRead pulumi.BoolPtrOutput `pulumi:"blocksRead"`
	// Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.
	BlocksReadOnly pulumi.BoolPtrOutput `pulumi:"blocksReadOnly"`
	// Identical to `index.blocks.read_only` but allows deleting the index to free up resources.
	BlocksReadOnlyAllowDelete pulumi.BoolPtrOutput `pulumi:"blocksReadOnlyAllowDelete"`
	// Set to `true` to disable data write operations against the index. This setting does not affect metadata.
	BlocksWrite pulumi.BoolPtrOutput `pulumi:"blocksWrite"`
	// The `default` value compresses stored data with LZ4 compression, but this can be set to `bestCompression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.
	Codec pulumi.StringPtrOutput `pulumi:"codec"`
	// The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.
	DefaultPipeline pulumi.StringPtrOutput `pulumi:"defaultPipeline"`
	// A boolean that indicates that the index should be deleted even if it contains documents.
	ForceDestroy pulumi.BoolPtrOutput `pulumi:"forceDestroy"`
	// The length of time that a deleted document's version number remains available for further versioned operations.
	GcDeletes pulumi.StringPtrOutput `pulumi:"gcDeletes"`
	// The maximum number of characters that will be analyzed for a highlight request. A stringified number.
	HighlightMaxAnalyzedOffset pulumi.StringPtrOutput `pulumi:"highlightMaxAnalyzedOffset"`
	// A string that indicates if and what we should pass to include*type*name parameter. Set to `"false"` when trying to create an index on a v6 cluster without a doc type or set to `"true"` when trying to create an index on a v7 cluster with a doc type. Since mapping updates are not currently supported, this applies only on index create.
	IncludeTypeName pulumi.StringPtrOutput `pulumi:"includeTypeName"`
	// Indicates whether the index should build native library indices for the knn*vector fields. If set to false, the knn*vector fields will be stored in doc values, but Approximate k-NN search functionality will be disabled.
	IndexKnn pulumi.BoolPtrOutput `pulumi:"indexKnn"`
	// The size of the dynamic list used during k-NN searches. Higher values lead to more accurate but slower searches. Only available for nmslib.
	IndexKnnAlgoParamEfSearch pulumi.StringPtrOutput `pulumi:"indexKnnAlgoParamEfSearch"`
	// A JSON string describing the default index similarity config.
	IndexSimilarityDefault pulumi.StringPtrOutput `pulumi:"indexSimilarityDefault"`
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	IndexingSlowlogLevel pulumi.StringPtrOutput `pulumi:"indexingSlowlogLevel"`
	// Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.
	IndexingSlowlogSource pulumi.StringPtrOutput `pulumi:"indexingSlowlogSource"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`
	IndexingSlowlogThresholdIndexDebug pulumi.StringPtrOutput `pulumi:"indexingSlowlogThresholdIndexDebug"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`
	IndexingSlowlogThresholdIndexInfo pulumi.StringPtrOutput `pulumi:"indexingSlowlogThresholdIndexInfo"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`
	IndexingSlowlogThresholdIndexTrace pulumi.StringPtrOutput `pulumi:"indexingSlowlogThresholdIndexTrace"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`
	IndexingSlowlogThresholdIndexWarn pulumi.StringPtrOutput `pulumi:"indexingSlowlogThresholdIndexWarn"`
	// Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.
	LoadFixedBitsetFiltersEagerly pulumi.BoolPtrOutput `pulumi:"loadFixedBitsetFiltersEagerly"`
	// A JSON string defining how documents in the index, and the fields they contain, are stored and indexed. To avoid the complexities of field mapping updates, updates of this field are not allowed via this provider.
	Mappings pulumi.StringPtrOutput `pulumi:"mappings"`
	// The maximum number of `docvalueFields` that are allowed in a query. A stringified number.
	MaxDocvalueFieldsSearch pulumi.StringPtrOutput `pulumi:"maxDocvalueFieldsSearch"`
	// The maximum value of `from + size` for inner hits definition and top hits aggregations to this index. A stringified number.
	MaxInnerResultWindow pulumi.StringPtrOutput `pulumi:"maxInnerResultWindow"`
	// The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter. A stringified number.
	MaxNgramDiff pulumi.StringPtrOutput `pulumi:"maxNgramDiff"`
	// Maximum number of refresh listeners available on each shard of the index. A stringified number.
	MaxRefreshListeners pulumi.StringPtrOutput `pulumi:"maxRefreshListeners"`
	// The maximum length of regex that can be used in Regexp Query. A stringified number.
	MaxRegexLength pulumi.StringPtrOutput `pulumi:"maxRegexLength"`
	// The maximum value of `windowSize` for `rescore` requests in searches of this index. A stringified number.
	MaxRescoreWindow pulumi.StringPtrOutput `pulumi:"maxRescoreWindow"`
	// The maximum value of `from + size` for searches to this index. A stringified number.
	MaxResultWindow pulumi.StringPtrOutput `pulumi:"maxResultWindow"`
	// The maximum number of `scriptFields` that are allowed in a query. A stringified number.
	MaxScriptFields pulumi.StringPtrOutput `pulumi:"maxScriptFields"`
	// The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter. A stringified number.
	MaxShingleDiff pulumi.StringPtrOutput `pulumi:"maxShingleDiff"`
	// The maximum number of terms that can be used in Terms Query. A stringified number.
	MaxTermsCount pulumi.StringPtrOutput `pulumi:"maxTermsCount"`
	// Name of the index to create
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of shard replicas. A stringified number.
	NumberOfReplicas pulumi.StringOutput `pulumi:"numberOfReplicas"`
	// Value used with number*of*shards to route documents to a primary shard. A stringified number. This can be set only on creation.
	NumberOfRoutingShards pulumi.StringPtrOutput `pulumi:"numberOfRoutingShards"`
	// Number of shards for the index. This can be set only on creation.
	NumberOfShards pulumi.StringOutput `pulumi:"numberOfShards"`
	// How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.
	RefreshInterval pulumi.StringPtrOutput `pulumi:"refreshInterval"`
	RolloverAlias   pulumi.StringOutput    `pulumi:"rolloverAlias"`
	// Controls shard allocation for this index. It can be set to: `all` , `primaries` , `newPrimaries` , `none`.
	RoutingAllocationEnable pulumi.StringPtrOutput `pulumi:"routingAllocationEnable"`
	// The number of shards a custom routing value can go to. A stringified number. This can be set only on creation.
	RoutingPartitionSize pulumi.StringPtrOutput `pulumi:"routingPartitionSize"`
	// Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.
	RoutingRebalanceEnable pulumi.StringPtrOutput `pulumi:"routingRebalanceEnable"`
	// How long a shard can not receive a search or get request until it’s considered search idle.
	SearchIdleAfter pulumi.StringPtrOutput `pulumi:"searchIdleAfter"`
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	SearchSlowlogLevel pulumi.StringPtrOutput `pulumi:"searchSlowlogLevel"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`
	SearchSlowlogThresholdFetchDebug pulumi.StringPtrOutput `pulumi:"searchSlowlogThresholdFetchDebug"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`
	SearchSlowlogThresholdFetchInfo pulumi.StringPtrOutput `pulumi:"searchSlowlogThresholdFetchInfo"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdFetchTrace pulumi.StringPtrOutput `pulumi:"searchSlowlogThresholdFetchTrace"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`
	SearchSlowlogThresholdFetchWarn pulumi.StringPtrOutput `pulumi:"searchSlowlogThresholdFetchWarn"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`
	SearchSlowlogThresholdQueryDebug pulumi.StringPtrOutput `pulumi:"searchSlowlogThresholdQueryDebug"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`
	SearchSlowlogThresholdQueryInfo pulumi.StringPtrOutput `pulumi:"searchSlowlogThresholdQueryInfo"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdQueryTrace pulumi.StringPtrOutput `pulumi:"searchSlowlogThresholdQueryTrace"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`
	SearchSlowlogThresholdQueryWarn pulumi.StringPtrOutput `pulumi:"searchSlowlogThresholdQueryWarn"`
	// Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.
	ShardCheckOnStartup pulumi.StringPtrOutput `pulumi:"shardCheckOnStartup"`
	// The field to sort shards in this index by.
	SortField pulumi.StringPtrOutput `pulumi:"sortField"`
	// The direction to sort shards in. Accepts `asc`, `desc`.
	SortOrder pulumi.StringPtrOutput `pulumi:"sortOrder"`
}

// NewIndex registers a new resource with the given unique name, arguments, and options.
func NewIndex(ctx *pulumi.Context,
	name string, args *IndexArgs, opts ...pulumi.ResourceOption) (*Index, error) {
	if args == nil {
		args = &IndexArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Index
	err := ctx.RegisterResource("opensearch:index/index:Index", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIndex gets an existing Index resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IndexState, opts ...pulumi.ResourceOption) (*Index, error) {
	var resource Index
	err := ctx.ReadResource("opensearch:index/index:Index", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Index resources.
type indexState struct {
	// A JSON string describing a set of aliases. The index aliases API allows aliasing an index with a name, with all APIs automatically converting the alias name to the actual index name. An alias can also be mapped to more than one index, and when specifying it, the alias will automatically expand to the aliased indices.
	Aliases *string `pulumi:"aliases"`
	// A JSON string describing the analyzers applied to the index.
	AnalysisAnalyzer *string `pulumi:"analysisAnalyzer"`
	// A JSON string describing the charFilters applied to the index.
	AnalysisCharFilter *string `pulumi:"analysisCharFilter"`
	// A JSON string describing the filters applied to the index.
	AnalysisFilter *string `pulumi:"analysisFilter"`
	// A JSON string describing the normalizers applied to the index.
	AnalysisNormalizer *string `pulumi:"analysisNormalizer"`
	// A JSON string describing the tokenizers applied to the index.
	AnalysisTokenizer *string `pulumi:"analysisTokenizer"`
	// The maximum number of tokens that can be produced using _analyze API. A stringified number.
	AnalyzeMaxTokenCount *string `pulumi:"analyzeMaxTokenCount"`
	// Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)
	AutoExpandReplicas *string `pulumi:"autoExpandReplicas"`
	// Set to `true` to disable index metadata reads and writes.
	BlocksMetadata *bool `pulumi:"blocksMetadata"`
	// Set to `true` to disable read operations against the index.
	BlocksRead *bool `pulumi:"blocksRead"`
	// Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.
	BlocksReadOnly *bool `pulumi:"blocksReadOnly"`
	// Identical to `index.blocks.read_only` but allows deleting the index to free up resources.
	BlocksReadOnlyAllowDelete *bool `pulumi:"blocksReadOnlyAllowDelete"`
	// Set to `true` to disable data write operations against the index. This setting does not affect metadata.
	BlocksWrite *bool `pulumi:"blocksWrite"`
	// The `default` value compresses stored data with LZ4 compression, but this can be set to `bestCompression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.
	Codec *string `pulumi:"codec"`
	// The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.
	DefaultPipeline *string `pulumi:"defaultPipeline"`
	// A boolean that indicates that the index should be deleted even if it contains documents.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// The length of time that a deleted document's version number remains available for further versioned operations.
	GcDeletes *string `pulumi:"gcDeletes"`
	// The maximum number of characters that will be analyzed for a highlight request. A stringified number.
	HighlightMaxAnalyzedOffset *string `pulumi:"highlightMaxAnalyzedOffset"`
	// A string that indicates if and what we should pass to include*type*name parameter. Set to `"false"` when trying to create an index on a v6 cluster without a doc type or set to `"true"` when trying to create an index on a v7 cluster with a doc type. Since mapping updates are not currently supported, this applies only on index create.
	IncludeTypeName *string `pulumi:"includeTypeName"`
	// Indicates whether the index should build native library indices for the knn*vector fields. If set to false, the knn*vector fields will be stored in doc values, but Approximate k-NN search functionality will be disabled.
	IndexKnn *bool `pulumi:"indexKnn"`
	// The size of the dynamic list used during k-NN searches. Higher values lead to more accurate but slower searches. Only available for nmslib.
	IndexKnnAlgoParamEfSearch *string `pulumi:"indexKnnAlgoParamEfSearch"`
	// A JSON string describing the default index similarity config.
	IndexSimilarityDefault *string `pulumi:"indexSimilarityDefault"`
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	IndexingSlowlogLevel *string `pulumi:"indexingSlowlogLevel"`
	// Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.
	IndexingSlowlogSource *string `pulumi:"indexingSlowlogSource"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`
	IndexingSlowlogThresholdIndexDebug *string `pulumi:"indexingSlowlogThresholdIndexDebug"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`
	IndexingSlowlogThresholdIndexInfo *string `pulumi:"indexingSlowlogThresholdIndexInfo"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`
	IndexingSlowlogThresholdIndexTrace *string `pulumi:"indexingSlowlogThresholdIndexTrace"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`
	IndexingSlowlogThresholdIndexWarn *string `pulumi:"indexingSlowlogThresholdIndexWarn"`
	// Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.
	LoadFixedBitsetFiltersEagerly *bool `pulumi:"loadFixedBitsetFiltersEagerly"`
	// A JSON string defining how documents in the index, and the fields they contain, are stored and indexed. To avoid the complexities of field mapping updates, updates of this field are not allowed via this provider.
	Mappings *string `pulumi:"mappings"`
	// The maximum number of `docvalueFields` that are allowed in a query. A stringified number.
	MaxDocvalueFieldsSearch *string `pulumi:"maxDocvalueFieldsSearch"`
	// The maximum value of `from + size` for inner hits definition and top hits aggregations to this index. A stringified number.
	MaxInnerResultWindow *string `pulumi:"maxInnerResultWindow"`
	// The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter. A stringified number.
	MaxNgramDiff *string `pulumi:"maxNgramDiff"`
	// Maximum number of refresh listeners available on each shard of the index. A stringified number.
	MaxRefreshListeners *string `pulumi:"maxRefreshListeners"`
	// The maximum length of regex that can be used in Regexp Query. A stringified number.
	MaxRegexLength *string `pulumi:"maxRegexLength"`
	// The maximum value of `windowSize` for `rescore` requests in searches of this index. A stringified number.
	MaxRescoreWindow *string `pulumi:"maxRescoreWindow"`
	// The maximum value of `from + size` for searches to this index. A stringified number.
	MaxResultWindow *string `pulumi:"maxResultWindow"`
	// The maximum number of `scriptFields` that are allowed in a query. A stringified number.
	MaxScriptFields *string `pulumi:"maxScriptFields"`
	// The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter. A stringified number.
	MaxShingleDiff *string `pulumi:"maxShingleDiff"`
	// The maximum number of terms that can be used in Terms Query. A stringified number.
	MaxTermsCount *string `pulumi:"maxTermsCount"`
	// Name of the index to create
	Name *string `pulumi:"name"`
	// Number of shard replicas. A stringified number.
	NumberOfReplicas *string `pulumi:"numberOfReplicas"`
	// Value used with number*of*shards to route documents to a primary shard. A stringified number. This can be set only on creation.
	NumberOfRoutingShards *string `pulumi:"numberOfRoutingShards"`
	// Number of shards for the index. This can be set only on creation.
	NumberOfShards *string `pulumi:"numberOfShards"`
	// How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.
	RefreshInterval *string `pulumi:"refreshInterval"`
	RolloverAlias   *string `pulumi:"rolloverAlias"`
	// Controls shard allocation for this index. It can be set to: `all` , `primaries` , `newPrimaries` , `none`.
	RoutingAllocationEnable *string `pulumi:"routingAllocationEnable"`
	// The number of shards a custom routing value can go to. A stringified number. This can be set only on creation.
	RoutingPartitionSize *string `pulumi:"routingPartitionSize"`
	// Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.
	RoutingRebalanceEnable *string `pulumi:"routingRebalanceEnable"`
	// How long a shard can not receive a search or get request until it’s considered search idle.
	SearchIdleAfter *string `pulumi:"searchIdleAfter"`
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	SearchSlowlogLevel *string `pulumi:"searchSlowlogLevel"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`
	SearchSlowlogThresholdFetchDebug *string `pulumi:"searchSlowlogThresholdFetchDebug"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`
	SearchSlowlogThresholdFetchInfo *string `pulumi:"searchSlowlogThresholdFetchInfo"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdFetchTrace *string `pulumi:"searchSlowlogThresholdFetchTrace"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`
	SearchSlowlogThresholdFetchWarn *string `pulumi:"searchSlowlogThresholdFetchWarn"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`
	SearchSlowlogThresholdQueryDebug *string `pulumi:"searchSlowlogThresholdQueryDebug"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`
	SearchSlowlogThresholdQueryInfo *string `pulumi:"searchSlowlogThresholdQueryInfo"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdQueryTrace *string `pulumi:"searchSlowlogThresholdQueryTrace"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`
	SearchSlowlogThresholdQueryWarn *string `pulumi:"searchSlowlogThresholdQueryWarn"`
	// Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.
	ShardCheckOnStartup *string `pulumi:"shardCheckOnStartup"`
	// The field to sort shards in this index by.
	SortField *string `pulumi:"sortField"`
	// The direction to sort shards in. Accepts `asc`, `desc`.
	SortOrder *string `pulumi:"sortOrder"`
}

type IndexState struct {
	// A JSON string describing a set of aliases. The index aliases API allows aliasing an index with a name, with all APIs automatically converting the alias name to the actual index name. An alias can also be mapped to more than one index, and when specifying it, the alias will automatically expand to the aliased indices.
	Aliases pulumi.StringPtrInput
	// A JSON string describing the analyzers applied to the index.
	AnalysisAnalyzer pulumi.StringPtrInput
	// A JSON string describing the charFilters applied to the index.
	AnalysisCharFilter pulumi.StringPtrInput
	// A JSON string describing the filters applied to the index.
	AnalysisFilter pulumi.StringPtrInput
	// A JSON string describing the normalizers applied to the index.
	AnalysisNormalizer pulumi.StringPtrInput
	// A JSON string describing the tokenizers applied to the index.
	AnalysisTokenizer pulumi.StringPtrInput
	// The maximum number of tokens that can be produced using _analyze API. A stringified number.
	AnalyzeMaxTokenCount pulumi.StringPtrInput
	// Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)
	AutoExpandReplicas pulumi.StringPtrInput
	// Set to `true` to disable index metadata reads and writes.
	BlocksMetadata pulumi.BoolPtrInput
	// Set to `true` to disable read operations against the index.
	BlocksRead pulumi.BoolPtrInput
	// Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.
	BlocksReadOnly pulumi.BoolPtrInput
	// Identical to `index.blocks.read_only` but allows deleting the index to free up resources.
	BlocksReadOnlyAllowDelete pulumi.BoolPtrInput
	// Set to `true` to disable data write operations against the index. This setting does not affect metadata.
	BlocksWrite pulumi.BoolPtrInput
	// The `default` value compresses stored data with LZ4 compression, but this can be set to `bestCompression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.
	Codec pulumi.StringPtrInput
	// The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.
	DefaultPipeline pulumi.StringPtrInput
	// A boolean that indicates that the index should be deleted even if it contains documents.
	ForceDestroy pulumi.BoolPtrInput
	// The length of time that a deleted document's version number remains available for further versioned operations.
	GcDeletes pulumi.StringPtrInput
	// The maximum number of characters that will be analyzed for a highlight request. A stringified number.
	HighlightMaxAnalyzedOffset pulumi.StringPtrInput
	// A string that indicates if and what we should pass to include*type*name parameter. Set to `"false"` when trying to create an index on a v6 cluster without a doc type or set to `"true"` when trying to create an index on a v7 cluster with a doc type. Since mapping updates are not currently supported, this applies only on index create.
	IncludeTypeName pulumi.StringPtrInput
	// Indicates whether the index should build native library indices for the knn*vector fields. If set to false, the knn*vector fields will be stored in doc values, but Approximate k-NN search functionality will be disabled.
	IndexKnn pulumi.BoolPtrInput
	// The size of the dynamic list used during k-NN searches. Higher values lead to more accurate but slower searches. Only available for nmslib.
	IndexKnnAlgoParamEfSearch pulumi.StringPtrInput
	// A JSON string describing the default index similarity config.
	IndexSimilarityDefault pulumi.StringPtrInput
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	IndexingSlowlogLevel pulumi.StringPtrInput
	// Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.
	IndexingSlowlogSource pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`
	IndexingSlowlogThresholdIndexDebug pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`
	IndexingSlowlogThresholdIndexInfo pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`
	IndexingSlowlogThresholdIndexTrace pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`
	IndexingSlowlogThresholdIndexWarn pulumi.StringPtrInput
	// Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.
	LoadFixedBitsetFiltersEagerly pulumi.BoolPtrInput
	// A JSON string defining how documents in the index, and the fields they contain, are stored and indexed. To avoid the complexities of field mapping updates, updates of this field are not allowed via this provider.
	Mappings pulumi.StringPtrInput
	// The maximum number of `docvalueFields` that are allowed in a query. A stringified number.
	MaxDocvalueFieldsSearch pulumi.StringPtrInput
	// The maximum value of `from + size` for inner hits definition and top hits aggregations to this index. A stringified number.
	MaxInnerResultWindow pulumi.StringPtrInput
	// The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter. A stringified number.
	MaxNgramDiff pulumi.StringPtrInput
	// Maximum number of refresh listeners available on each shard of the index. A stringified number.
	MaxRefreshListeners pulumi.StringPtrInput
	// The maximum length of regex that can be used in Regexp Query. A stringified number.
	MaxRegexLength pulumi.StringPtrInput
	// The maximum value of `windowSize` for `rescore` requests in searches of this index. A stringified number.
	MaxRescoreWindow pulumi.StringPtrInput
	// The maximum value of `from + size` for searches to this index. A stringified number.
	MaxResultWindow pulumi.StringPtrInput
	// The maximum number of `scriptFields` that are allowed in a query. A stringified number.
	MaxScriptFields pulumi.StringPtrInput
	// The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter. A stringified number.
	MaxShingleDiff pulumi.StringPtrInput
	// The maximum number of terms that can be used in Terms Query. A stringified number.
	MaxTermsCount pulumi.StringPtrInput
	// Name of the index to create
	Name pulumi.StringPtrInput
	// Number of shard replicas. A stringified number.
	NumberOfReplicas pulumi.StringPtrInput
	// Value used with number*of*shards to route documents to a primary shard. A stringified number. This can be set only on creation.
	NumberOfRoutingShards pulumi.StringPtrInput
	// Number of shards for the index. This can be set only on creation.
	NumberOfShards pulumi.StringPtrInput
	// How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.
	RefreshInterval pulumi.StringPtrInput
	RolloverAlias   pulumi.StringPtrInput
	// Controls shard allocation for this index. It can be set to: `all` , `primaries` , `newPrimaries` , `none`.
	RoutingAllocationEnable pulumi.StringPtrInput
	// The number of shards a custom routing value can go to. A stringified number. This can be set only on creation.
	RoutingPartitionSize pulumi.StringPtrInput
	// Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.
	RoutingRebalanceEnable pulumi.StringPtrInput
	// How long a shard can not receive a search or get request until it’s considered search idle.
	SearchIdleAfter pulumi.StringPtrInput
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	SearchSlowlogLevel pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`
	SearchSlowlogThresholdFetchDebug pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`
	SearchSlowlogThresholdFetchInfo pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdFetchTrace pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`
	SearchSlowlogThresholdFetchWarn pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`
	SearchSlowlogThresholdQueryDebug pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`
	SearchSlowlogThresholdQueryInfo pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdQueryTrace pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`
	SearchSlowlogThresholdQueryWarn pulumi.StringPtrInput
	// Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.
	ShardCheckOnStartup pulumi.StringPtrInput
	// The field to sort shards in this index by.
	SortField pulumi.StringPtrInput
	// The direction to sort shards in. Accepts `asc`, `desc`.
	SortOrder pulumi.StringPtrInput
}

func (IndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*indexState)(nil)).Elem()
}

type indexArgs struct {
	// A JSON string describing a set of aliases. The index aliases API allows aliasing an index with a name, with all APIs automatically converting the alias name to the actual index name. An alias can also be mapped to more than one index, and when specifying it, the alias will automatically expand to the aliased indices.
	Aliases *string `pulumi:"aliases"`
	// A JSON string describing the analyzers applied to the index.
	AnalysisAnalyzer *string `pulumi:"analysisAnalyzer"`
	// A JSON string describing the charFilters applied to the index.
	AnalysisCharFilter *string `pulumi:"analysisCharFilter"`
	// A JSON string describing the filters applied to the index.
	AnalysisFilter *string `pulumi:"analysisFilter"`
	// A JSON string describing the normalizers applied to the index.
	AnalysisNormalizer *string `pulumi:"analysisNormalizer"`
	// A JSON string describing the tokenizers applied to the index.
	AnalysisTokenizer *string `pulumi:"analysisTokenizer"`
	// The maximum number of tokens that can be produced using _analyze API. A stringified number.
	AnalyzeMaxTokenCount *string `pulumi:"analyzeMaxTokenCount"`
	// Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)
	AutoExpandReplicas *string `pulumi:"autoExpandReplicas"`
	// Set to `true` to disable index metadata reads and writes.
	BlocksMetadata *bool `pulumi:"blocksMetadata"`
	// Set to `true` to disable read operations against the index.
	BlocksRead *bool `pulumi:"blocksRead"`
	// Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.
	BlocksReadOnly *bool `pulumi:"blocksReadOnly"`
	// Identical to `index.blocks.read_only` but allows deleting the index to free up resources.
	BlocksReadOnlyAllowDelete *bool `pulumi:"blocksReadOnlyAllowDelete"`
	// Set to `true` to disable data write operations against the index. This setting does not affect metadata.
	BlocksWrite *bool `pulumi:"blocksWrite"`
	// The `default` value compresses stored data with LZ4 compression, but this can be set to `bestCompression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.
	Codec *string `pulumi:"codec"`
	// The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.
	DefaultPipeline *string `pulumi:"defaultPipeline"`
	// A boolean that indicates that the index should be deleted even if it contains documents.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// The length of time that a deleted document's version number remains available for further versioned operations.
	GcDeletes *string `pulumi:"gcDeletes"`
	// The maximum number of characters that will be analyzed for a highlight request. A stringified number.
	HighlightMaxAnalyzedOffset *string `pulumi:"highlightMaxAnalyzedOffset"`
	// A string that indicates if and what we should pass to include*type*name parameter. Set to `"false"` when trying to create an index on a v6 cluster without a doc type or set to `"true"` when trying to create an index on a v7 cluster with a doc type. Since mapping updates are not currently supported, this applies only on index create.
	IncludeTypeName *string `pulumi:"includeTypeName"`
	// Indicates whether the index should build native library indices for the knn*vector fields. If set to false, the knn*vector fields will be stored in doc values, but Approximate k-NN search functionality will be disabled.
	IndexKnn *bool `pulumi:"indexKnn"`
	// The size of the dynamic list used during k-NN searches. Higher values lead to more accurate but slower searches. Only available for nmslib.
	IndexKnnAlgoParamEfSearch *string `pulumi:"indexKnnAlgoParamEfSearch"`
	// A JSON string describing the default index similarity config.
	IndexSimilarityDefault *string `pulumi:"indexSimilarityDefault"`
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	IndexingSlowlogLevel *string `pulumi:"indexingSlowlogLevel"`
	// Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.
	IndexingSlowlogSource *string `pulumi:"indexingSlowlogSource"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`
	IndexingSlowlogThresholdIndexDebug *string `pulumi:"indexingSlowlogThresholdIndexDebug"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`
	IndexingSlowlogThresholdIndexInfo *string `pulumi:"indexingSlowlogThresholdIndexInfo"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`
	IndexingSlowlogThresholdIndexTrace *string `pulumi:"indexingSlowlogThresholdIndexTrace"`
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`
	IndexingSlowlogThresholdIndexWarn *string `pulumi:"indexingSlowlogThresholdIndexWarn"`
	// Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.
	LoadFixedBitsetFiltersEagerly *bool `pulumi:"loadFixedBitsetFiltersEagerly"`
	// A JSON string defining how documents in the index, and the fields they contain, are stored and indexed. To avoid the complexities of field mapping updates, updates of this field are not allowed via this provider.
	Mappings *string `pulumi:"mappings"`
	// The maximum number of `docvalueFields` that are allowed in a query. A stringified number.
	MaxDocvalueFieldsSearch *string `pulumi:"maxDocvalueFieldsSearch"`
	// The maximum value of `from + size` for inner hits definition and top hits aggregations to this index. A stringified number.
	MaxInnerResultWindow *string `pulumi:"maxInnerResultWindow"`
	// The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter. A stringified number.
	MaxNgramDiff *string `pulumi:"maxNgramDiff"`
	// Maximum number of refresh listeners available on each shard of the index. A stringified number.
	MaxRefreshListeners *string `pulumi:"maxRefreshListeners"`
	// The maximum length of regex that can be used in Regexp Query. A stringified number.
	MaxRegexLength *string `pulumi:"maxRegexLength"`
	// The maximum value of `windowSize` for `rescore` requests in searches of this index. A stringified number.
	MaxRescoreWindow *string `pulumi:"maxRescoreWindow"`
	// The maximum value of `from + size` for searches to this index. A stringified number.
	MaxResultWindow *string `pulumi:"maxResultWindow"`
	// The maximum number of `scriptFields` that are allowed in a query. A stringified number.
	MaxScriptFields *string `pulumi:"maxScriptFields"`
	// The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter. A stringified number.
	MaxShingleDiff *string `pulumi:"maxShingleDiff"`
	// The maximum number of terms that can be used in Terms Query. A stringified number.
	MaxTermsCount *string `pulumi:"maxTermsCount"`
	// Name of the index to create
	Name *string `pulumi:"name"`
	// Number of shard replicas. A stringified number.
	NumberOfReplicas *string `pulumi:"numberOfReplicas"`
	// Value used with number*of*shards to route documents to a primary shard. A stringified number. This can be set only on creation.
	NumberOfRoutingShards *string `pulumi:"numberOfRoutingShards"`
	// Number of shards for the index. This can be set only on creation.
	NumberOfShards *string `pulumi:"numberOfShards"`
	// How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.
	RefreshInterval *string `pulumi:"refreshInterval"`
	RolloverAlias   *string `pulumi:"rolloverAlias"`
	// Controls shard allocation for this index. It can be set to: `all` , `primaries` , `newPrimaries` , `none`.
	RoutingAllocationEnable *string `pulumi:"routingAllocationEnable"`
	// The number of shards a custom routing value can go to. A stringified number. This can be set only on creation.
	RoutingPartitionSize *string `pulumi:"routingPartitionSize"`
	// Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.
	RoutingRebalanceEnable *string `pulumi:"routingRebalanceEnable"`
	// How long a shard can not receive a search or get request until it’s considered search idle.
	SearchIdleAfter *string `pulumi:"searchIdleAfter"`
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	SearchSlowlogLevel *string `pulumi:"searchSlowlogLevel"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`
	SearchSlowlogThresholdFetchDebug *string `pulumi:"searchSlowlogThresholdFetchDebug"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`
	SearchSlowlogThresholdFetchInfo *string `pulumi:"searchSlowlogThresholdFetchInfo"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdFetchTrace *string `pulumi:"searchSlowlogThresholdFetchTrace"`
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`
	SearchSlowlogThresholdFetchWarn *string `pulumi:"searchSlowlogThresholdFetchWarn"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`
	SearchSlowlogThresholdQueryDebug *string `pulumi:"searchSlowlogThresholdQueryDebug"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`
	SearchSlowlogThresholdQueryInfo *string `pulumi:"searchSlowlogThresholdQueryInfo"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdQueryTrace *string `pulumi:"searchSlowlogThresholdQueryTrace"`
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`
	SearchSlowlogThresholdQueryWarn *string `pulumi:"searchSlowlogThresholdQueryWarn"`
	// Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.
	ShardCheckOnStartup *string `pulumi:"shardCheckOnStartup"`
	// The field to sort shards in this index by.
	SortField *string `pulumi:"sortField"`
	// The direction to sort shards in. Accepts `asc`, `desc`.
	SortOrder *string `pulumi:"sortOrder"`
}

// The set of arguments for constructing a Index resource.
type IndexArgs struct {
	// A JSON string describing a set of aliases. The index aliases API allows aliasing an index with a name, with all APIs automatically converting the alias name to the actual index name. An alias can also be mapped to more than one index, and when specifying it, the alias will automatically expand to the aliased indices.
	Aliases pulumi.StringPtrInput
	// A JSON string describing the analyzers applied to the index.
	AnalysisAnalyzer pulumi.StringPtrInput
	// A JSON string describing the charFilters applied to the index.
	AnalysisCharFilter pulumi.StringPtrInput
	// A JSON string describing the filters applied to the index.
	AnalysisFilter pulumi.StringPtrInput
	// A JSON string describing the normalizers applied to the index.
	AnalysisNormalizer pulumi.StringPtrInput
	// A JSON string describing the tokenizers applied to the index.
	AnalysisTokenizer pulumi.StringPtrInput
	// The maximum number of tokens that can be produced using _analyze API. A stringified number.
	AnalyzeMaxTokenCount pulumi.StringPtrInput
	// Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)
	AutoExpandReplicas pulumi.StringPtrInput
	// Set to `true` to disable index metadata reads and writes.
	BlocksMetadata pulumi.BoolPtrInput
	// Set to `true` to disable read operations against the index.
	BlocksRead pulumi.BoolPtrInput
	// Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.
	BlocksReadOnly pulumi.BoolPtrInput
	// Identical to `index.blocks.read_only` but allows deleting the index to free up resources.
	BlocksReadOnlyAllowDelete pulumi.BoolPtrInput
	// Set to `true` to disable data write operations against the index. This setting does not affect metadata.
	BlocksWrite pulumi.BoolPtrInput
	// The `default` value compresses stored data with LZ4 compression, but this can be set to `bestCompression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.
	Codec pulumi.StringPtrInput
	// The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.
	DefaultPipeline pulumi.StringPtrInput
	// A boolean that indicates that the index should be deleted even if it contains documents.
	ForceDestroy pulumi.BoolPtrInput
	// The length of time that a deleted document's version number remains available for further versioned operations.
	GcDeletes pulumi.StringPtrInput
	// The maximum number of characters that will be analyzed for a highlight request. A stringified number.
	HighlightMaxAnalyzedOffset pulumi.StringPtrInput
	// A string that indicates if and what we should pass to include*type*name parameter. Set to `"false"` when trying to create an index on a v6 cluster without a doc type or set to `"true"` when trying to create an index on a v7 cluster with a doc type. Since mapping updates are not currently supported, this applies only on index create.
	IncludeTypeName pulumi.StringPtrInput
	// Indicates whether the index should build native library indices for the knn*vector fields. If set to false, the knn*vector fields will be stored in doc values, but Approximate k-NN search functionality will be disabled.
	IndexKnn pulumi.BoolPtrInput
	// The size of the dynamic list used during k-NN searches. Higher values lead to more accurate but slower searches. Only available for nmslib.
	IndexKnnAlgoParamEfSearch pulumi.StringPtrInput
	// A JSON string describing the default index similarity config.
	IndexSimilarityDefault pulumi.StringPtrInput
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	IndexingSlowlogLevel pulumi.StringPtrInput
	// Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.
	IndexingSlowlogSource pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`
	IndexingSlowlogThresholdIndexDebug pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`
	IndexingSlowlogThresholdIndexInfo pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`
	IndexingSlowlogThresholdIndexTrace pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`
	IndexingSlowlogThresholdIndexWarn pulumi.StringPtrInput
	// Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.
	LoadFixedBitsetFiltersEagerly pulumi.BoolPtrInput
	// A JSON string defining how documents in the index, and the fields they contain, are stored and indexed. To avoid the complexities of field mapping updates, updates of this field are not allowed via this provider.
	Mappings pulumi.StringPtrInput
	// The maximum number of `docvalueFields` that are allowed in a query. A stringified number.
	MaxDocvalueFieldsSearch pulumi.StringPtrInput
	// The maximum value of `from + size` for inner hits definition and top hits aggregations to this index. A stringified number.
	MaxInnerResultWindow pulumi.StringPtrInput
	// The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter. A stringified number.
	MaxNgramDiff pulumi.StringPtrInput
	// Maximum number of refresh listeners available on each shard of the index. A stringified number.
	MaxRefreshListeners pulumi.StringPtrInput
	// The maximum length of regex that can be used in Regexp Query. A stringified number.
	MaxRegexLength pulumi.StringPtrInput
	// The maximum value of `windowSize` for `rescore` requests in searches of this index. A stringified number.
	MaxRescoreWindow pulumi.StringPtrInput
	// The maximum value of `from + size` for searches to this index. A stringified number.
	MaxResultWindow pulumi.StringPtrInput
	// The maximum number of `scriptFields` that are allowed in a query. A stringified number.
	MaxScriptFields pulumi.StringPtrInput
	// The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter. A stringified number.
	MaxShingleDiff pulumi.StringPtrInput
	// The maximum number of terms that can be used in Terms Query. A stringified number.
	MaxTermsCount pulumi.StringPtrInput
	// Name of the index to create
	Name pulumi.StringPtrInput
	// Number of shard replicas. A stringified number.
	NumberOfReplicas pulumi.StringPtrInput
	// Value used with number*of*shards to route documents to a primary shard. A stringified number. This can be set only on creation.
	NumberOfRoutingShards pulumi.StringPtrInput
	// Number of shards for the index. This can be set only on creation.
	NumberOfShards pulumi.StringPtrInput
	// How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.
	RefreshInterval pulumi.StringPtrInput
	RolloverAlias   pulumi.StringPtrInput
	// Controls shard allocation for this index. It can be set to: `all` , `primaries` , `newPrimaries` , `none`.
	RoutingAllocationEnable pulumi.StringPtrInput
	// The number of shards a custom routing value can go to. A stringified number. This can be set only on creation.
	RoutingPartitionSize pulumi.StringPtrInput
	// Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.
	RoutingRebalanceEnable pulumi.StringPtrInput
	// How long a shard can not receive a search or get request until it’s considered search idle.
	SearchIdleAfter pulumi.StringPtrInput
	// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
	SearchSlowlogLevel pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`
	SearchSlowlogThresholdFetchDebug pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`
	SearchSlowlogThresholdFetchInfo pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdFetchTrace pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`
	SearchSlowlogThresholdFetchWarn pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`
	SearchSlowlogThresholdQueryDebug pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`
	SearchSlowlogThresholdQueryInfo pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`
	SearchSlowlogThresholdQueryTrace pulumi.StringPtrInput
	// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`
	SearchSlowlogThresholdQueryWarn pulumi.StringPtrInput
	// Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.
	ShardCheckOnStartup pulumi.StringPtrInput
	// The field to sort shards in this index by.
	SortField pulumi.StringPtrInput
	// The direction to sort shards in. Accepts `asc`, `desc`.
	SortOrder pulumi.StringPtrInput
}

func (IndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*indexArgs)(nil)).Elem()
}

type IndexInput interface {
	pulumi.Input

	ToIndexOutput() IndexOutput
	ToIndexOutputWithContext(ctx context.Context) IndexOutput
}

func (*Index) ElementType() reflect.Type {
	return reflect.TypeOf((**Index)(nil)).Elem()
}

func (i *Index) ToIndexOutput() IndexOutput {
	return i.ToIndexOutputWithContext(context.Background())
}

func (i *Index) ToIndexOutputWithContext(ctx context.Context) IndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexOutput)
}

// IndexArrayInput is an input type that accepts IndexArray and IndexArrayOutput values.
// You can construct a concrete instance of `IndexArrayInput` via:
//
//	IndexArray{ IndexArgs{...} }
type IndexArrayInput interface {
	pulumi.Input

	ToIndexArrayOutput() IndexArrayOutput
	ToIndexArrayOutputWithContext(context.Context) IndexArrayOutput
}

type IndexArray []IndexInput

func (IndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Index)(nil)).Elem()
}

func (i IndexArray) ToIndexArrayOutput() IndexArrayOutput {
	return i.ToIndexArrayOutputWithContext(context.Background())
}

func (i IndexArray) ToIndexArrayOutputWithContext(ctx context.Context) IndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexArrayOutput)
}

// IndexMapInput is an input type that accepts IndexMap and IndexMapOutput values.
// You can construct a concrete instance of `IndexMapInput` via:
//
//	IndexMap{ "key": IndexArgs{...} }
type IndexMapInput interface {
	pulumi.Input

	ToIndexMapOutput() IndexMapOutput
	ToIndexMapOutputWithContext(context.Context) IndexMapOutput
}

type IndexMap map[string]IndexInput

func (IndexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Index)(nil)).Elem()
}

func (i IndexMap) ToIndexMapOutput() IndexMapOutput {
	return i.ToIndexMapOutputWithContext(context.Background())
}

func (i IndexMap) ToIndexMapOutputWithContext(ctx context.Context) IndexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexMapOutput)
}

type IndexOutput struct{ *pulumi.OutputState }

func (IndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Index)(nil)).Elem()
}

func (o IndexOutput) ToIndexOutput() IndexOutput {
	return o
}

func (o IndexOutput) ToIndexOutputWithContext(ctx context.Context) IndexOutput {
	return o
}

// A JSON string describing a set of aliases. The index aliases API allows aliasing an index with a name, with all APIs automatically converting the alias name to the actual index name. An alias can also be mapped to more than one index, and when specifying it, the alias will automatically expand to the aliased indices.
func (o IndexOutput) Aliases() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.Aliases }).(pulumi.StringPtrOutput)
}

// A JSON string describing the analyzers applied to the index.
func (o IndexOutput) AnalysisAnalyzer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.AnalysisAnalyzer }).(pulumi.StringPtrOutput)
}

// A JSON string describing the charFilters applied to the index.
func (o IndexOutput) AnalysisCharFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.AnalysisCharFilter }).(pulumi.StringPtrOutput)
}

// A JSON string describing the filters applied to the index.
func (o IndexOutput) AnalysisFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.AnalysisFilter }).(pulumi.StringPtrOutput)
}

// A JSON string describing the normalizers applied to the index.
func (o IndexOutput) AnalysisNormalizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.AnalysisNormalizer }).(pulumi.StringPtrOutput)
}

// A JSON string describing the tokenizers applied to the index.
func (o IndexOutput) AnalysisTokenizer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.AnalysisTokenizer }).(pulumi.StringPtrOutput)
}

// The maximum number of tokens that can be produced using _analyze API. A stringified number.
func (o IndexOutput) AnalyzeMaxTokenCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.AnalyzeMaxTokenCount }).(pulumi.StringPtrOutput)
}

// Set the number of replicas to the node count in the cluster. Set to a dash delimited lower and upper bound (e.g. 0-5) or use all for the upper bound (e.g. 0-all)
func (o IndexOutput) AutoExpandReplicas() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.AutoExpandReplicas }).(pulumi.StringPtrOutput)
}

// Set to `true` to disable index metadata reads and writes.
func (o IndexOutput) BlocksMetadata() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolPtrOutput { return v.BlocksMetadata }).(pulumi.BoolPtrOutput)
}

// Set to `true` to disable read operations against the index.
func (o IndexOutput) BlocksRead() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolPtrOutput { return v.BlocksRead }).(pulumi.BoolPtrOutput)
}

// Set to `true` to make the index and index metadata read only, `false` to allow writes and metadata changes.
func (o IndexOutput) BlocksReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolPtrOutput { return v.BlocksReadOnly }).(pulumi.BoolPtrOutput)
}

// Identical to `index.blocks.read_only` but allows deleting the index to free up resources.
func (o IndexOutput) BlocksReadOnlyAllowDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolPtrOutput { return v.BlocksReadOnlyAllowDelete }).(pulumi.BoolPtrOutput)
}

// Set to `true` to disable data write operations against the index. This setting does not affect metadata.
func (o IndexOutput) BlocksWrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolPtrOutput { return v.BlocksWrite }).(pulumi.BoolPtrOutput)
}

// The `default` value compresses stored data with LZ4 compression, but this can be set to `bestCompression` which uses DEFLATE for a higher compression ratio. This can be set only on creation.
func (o IndexOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.Codec }).(pulumi.StringPtrOutput)
}

// The default ingest node pipeline for this index. Index requests will fail if the default pipeline is set and the pipeline does not exist.
func (o IndexOutput) DefaultPipeline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.DefaultPipeline }).(pulumi.StringPtrOutput)
}

// A boolean that indicates that the index should be deleted even if it contains documents.
func (o IndexOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolPtrOutput { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

// The length of time that a deleted document's version number remains available for further versioned operations.
func (o IndexOutput) GcDeletes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.GcDeletes }).(pulumi.StringPtrOutput)
}

// The maximum number of characters that will be analyzed for a highlight request. A stringified number.
func (o IndexOutput) HighlightMaxAnalyzedOffset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.HighlightMaxAnalyzedOffset }).(pulumi.StringPtrOutput)
}

// A string that indicates if and what we should pass to include*type*name parameter. Set to `"false"` when trying to create an index on a v6 cluster without a doc type or set to `"true"` when trying to create an index on a v7 cluster with a doc type. Since mapping updates are not currently supported, this applies only on index create.
func (o IndexOutput) IncludeTypeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.IncludeTypeName }).(pulumi.StringPtrOutput)
}

// Indicates whether the index should build native library indices for the knn*vector fields. If set to false, the knn*vector fields will be stored in doc values, but Approximate k-NN search functionality will be disabled.
func (o IndexOutput) IndexKnn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolPtrOutput { return v.IndexKnn }).(pulumi.BoolPtrOutput)
}

// The size of the dynamic list used during k-NN searches. Higher values lead to more accurate but slower searches. Only available for nmslib.
func (o IndexOutput) IndexKnnAlgoParamEfSearch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.IndexKnnAlgoParamEfSearch }).(pulumi.StringPtrOutput)
}

// A JSON string describing the default index similarity config.
func (o IndexOutput) IndexSimilarityDefault() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.IndexSimilarityDefault }).(pulumi.StringPtrOutput)
}

// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
func (o IndexOutput) IndexingSlowlogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.IndexingSlowlogLevel }).(pulumi.StringPtrOutput)
}

// Set the number of characters of the `_source` to include in the slowlog lines, `false` or `0` will skip logging the source entirely and setting it to `true` will log the entire source regardless of size. The original `_source` is reformatted by default to make sure that it fits on a single log line.
func (o IndexOutput) IndexingSlowlogSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.IndexingSlowlogSource }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `2s`
func (o IndexOutput) IndexingSlowlogThresholdIndexDebug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.IndexingSlowlogThresholdIndexDebug }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `5s`
func (o IndexOutput) IndexingSlowlogThresholdIndexInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.IndexingSlowlogThresholdIndexInfo }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `500ms`
func (o IndexOutput) IndexingSlowlogThresholdIndexTrace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.IndexingSlowlogThresholdIndexTrace }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches for indexing queries, in time units, e.g. `10s`
func (o IndexOutput) IndexingSlowlogThresholdIndexWarn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.IndexingSlowlogThresholdIndexWarn }).(pulumi.StringPtrOutput)
}

// Indicates whether cached filters are pre-loaded for nested queries. This can be set only on creation.
func (o IndexOutput) LoadFixedBitsetFiltersEagerly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolPtrOutput { return v.LoadFixedBitsetFiltersEagerly }).(pulumi.BoolPtrOutput)
}

// A JSON string defining how documents in the index, and the fields they contain, are stored and indexed. To avoid the complexities of field mapping updates, updates of this field are not allowed via this provider.
func (o IndexOutput) Mappings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.Mappings }).(pulumi.StringPtrOutput)
}

// The maximum number of `docvalueFields` that are allowed in a query. A stringified number.
func (o IndexOutput) MaxDocvalueFieldsSearch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.MaxDocvalueFieldsSearch }).(pulumi.StringPtrOutput)
}

// The maximum value of `from + size` for inner hits definition and top hits aggregations to this index. A stringified number.
func (o IndexOutput) MaxInnerResultWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.MaxInnerResultWindow }).(pulumi.StringPtrOutput)
}

// The maximum allowed difference between min*gram and max*gram for NGramTokenizer and NGramTokenFilter. A stringified number.
func (o IndexOutput) MaxNgramDiff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.MaxNgramDiff }).(pulumi.StringPtrOutput)
}

// Maximum number of refresh listeners available on each shard of the index. A stringified number.
func (o IndexOutput) MaxRefreshListeners() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.MaxRefreshListeners }).(pulumi.StringPtrOutput)
}

// The maximum length of regex that can be used in Regexp Query. A stringified number.
func (o IndexOutput) MaxRegexLength() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.MaxRegexLength }).(pulumi.StringPtrOutput)
}

// The maximum value of `windowSize` for `rescore` requests in searches of this index. A stringified number.
func (o IndexOutput) MaxRescoreWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.MaxRescoreWindow }).(pulumi.StringPtrOutput)
}

// The maximum value of `from + size` for searches to this index. A stringified number.
func (o IndexOutput) MaxResultWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.MaxResultWindow }).(pulumi.StringPtrOutput)
}

// The maximum number of `scriptFields` that are allowed in a query. A stringified number.
func (o IndexOutput) MaxScriptFields() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.MaxScriptFields }).(pulumi.StringPtrOutput)
}

// The maximum allowed difference between max*shingle*size and min*shingle*size for ShingleTokenFilter. A stringified number.
func (o IndexOutput) MaxShingleDiff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.MaxShingleDiff }).(pulumi.StringPtrOutput)
}

// The maximum number of terms that can be used in Terms Query. A stringified number.
func (o IndexOutput) MaxTermsCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.MaxTermsCount }).(pulumi.StringPtrOutput)
}

// Name of the index to create
func (o IndexOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of shard replicas. A stringified number.
func (o IndexOutput) NumberOfReplicas() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.NumberOfReplicas }).(pulumi.StringOutput)
}

// Value used with number*of*shards to route documents to a primary shard. A stringified number. This can be set only on creation.
func (o IndexOutput) NumberOfRoutingShards() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.NumberOfRoutingShards }).(pulumi.StringPtrOutput)
}

// Number of shards for the index. This can be set only on creation.
func (o IndexOutput) NumberOfShards() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.NumberOfShards }).(pulumi.StringOutput)
}

// How often to perform a refresh operation, which makes recent changes to the index visible to search. Can be set to `-1` to disable refresh.
func (o IndexOutput) RefreshInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.RefreshInterval }).(pulumi.StringPtrOutput)
}

func (o IndexOutput) RolloverAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.RolloverAlias }).(pulumi.StringOutput)
}

// Controls shard allocation for this index. It can be set to: `all` , `primaries` , `newPrimaries` , `none`.
func (o IndexOutput) RoutingAllocationEnable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.RoutingAllocationEnable }).(pulumi.StringPtrOutput)
}

// The number of shards a custom routing value can go to. A stringified number. This can be set only on creation.
func (o IndexOutput) RoutingPartitionSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.RoutingPartitionSize }).(pulumi.StringPtrOutput)
}

// Enables shard rebalancing for this index. It can be set to: `all`, `primaries` , `replicas` , `none`.
func (o IndexOutput) RoutingRebalanceEnable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.RoutingRebalanceEnable }).(pulumi.StringPtrOutput)
}

// How long a shard can not receive a search or get request until it’s considered search idle.
func (o IndexOutput) SearchIdleAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchIdleAfter }).(pulumi.StringPtrOutput)
}

// Set which logging level to use for the search slow log, can be: `warn`, `info`, `debug`, `trace`
func (o IndexOutput) SearchSlowlogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchSlowlogLevel }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `2s`
func (o IndexOutput) SearchSlowlogThresholdFetchDebug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchSlowlogThresholdFetchDebug }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `5s`
func (o IndexOutput) SearchSlowlogThresholdFetchInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchSlowlogThresholdFetchInfo }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `500ms`
func (o IndexOutput) SearchSlowlogThresholdFetchTrace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchSlowlogThresholdFetchTrace }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches in the fetch phase, in time units, e.g. `10s`
func (o IndexOutput) SearchSlowlogThresholdFetchWarn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchSlowlogThresholdFetchWarn }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `2s`
func (o IndexOutput) SearchSlowlogThresholdQueryDebug() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchSlowlogThresholdQueryDebug }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `5s`
func (o IndexOutput) SearchSlowlogThresholdQueryInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchSlowlogThresholdQueryInfo }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `500ms`
func (o IndexOutput) SearchSlowlogThresholdQueryTrace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchSlowlogThresholdQueryTrace }).(pulumi.StringPtrOutput)
}

// Set the cutoff for shard level slow search logging of slow searches in the query phase, in time units, e.g. `10s`
func (o IndexOutput) SearchSlowlogThresholdQueryWarn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SearchSlowlogThresholdQueryWarn }).(pulumi.StringPtrOutput)
}

// Whether or not shards should be checked for corruption before opening. When corruption is detected, it will prevent the shard from being opened. Accepts `false`, `true`, `checksum`.
func (o IndexOutput) ShardCheckOnStartup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.ShardCheckOnStartup }).(pulumi.StringPtrOutput)
}

// The field to sort shards in this index by.
func (o IndexOutput) SortField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SortField }).(pulumi.StringPtrOutput)
}

// The direction to sort shards in. Accepts `asc`, `desc`.
func (o IndexOutput) SortOrder() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.StringPtrOutput { return v.SortOrder }).(pulumi.StringPtrOutput)
}

type IndexArrayOutput struct{ *pulumi.OutputState }

func (IndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Index)(nil)).Elem()
}

func (o IndexArrayOutput) ToIndexArrayOutput() IndexArrayOutput {
	return o
}

func (o IndexArrayOutput) ToIndexArrayOutputWithContext(ctx context.Context) IndexArrayOutput {
	return o
}

func (o IndexArrayOutput) Index(i pulumi.IntInput) IndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Index {
		return vs[0].([]*Index)[vs[1].(int)]
	}).(IndexOutput)
}

type IndexMapOutput struct{ *pulumi.OutputState }

func (IndexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Index)(nil)).Elem()
}

func (o IndexMapOutput) ToIndexMapOutput() IndexMapOutput {
	return o
}

func (o IndexMapOutput) ToIndexMapOutputWithContext(ctx context.Context) IndexMapOutput {
	return o
}

func (o IndexMapOutput) MapIndex(k pulumi.StringInput) IndexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Index {
		return vs[0].(map[string]*Index)[vs[1].(string)]
	}).(IndexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IndexInput)(nil)).Elem(), &Index{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexArrayInput)(nil)).Elem(), IndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexMapInput)(nil)).Elem(), IndexMap{})
	pulumi.RegisterOutputType(IndexOutput{})
	pulumi.RegisterOutputType(IndexArrayOutput{})
	pulumi.RegisterOutputType(IndexMapOutput{})
}
