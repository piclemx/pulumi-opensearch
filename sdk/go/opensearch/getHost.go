// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `getHost` can be used to retrieve the host URL for the provider's current cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := opensearch.GetHost(ctx, &opensearch.GetHostArgs{
//				Active: true,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetHost(ctx *pulumi.Context, args *GetHostArgs, opts ...pulumi.InvokeOption) (*GetHostResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetHostResult
	err := ctx.Invoke("opensearch:index/getHost:getHost", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHost.
type GetHostArgs struct {
	// should be set to `true`
	Active bool `pulumi:"active"`
}

// A collection of values returned by getHost.
type GetHostResult struct {
	// should be set to `true`
	Active bool `pulumi:"active"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// the url of the active cluster
	Url string `pulumi:"url"`
}

func GetHostOutput(ctx *pulumi.Context, args GetHostOutputArgs, opts ...pulumi.InvokeOption) GetHostResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetHostResult, error) {
			args := v.(GetHostArgs)
			r, err := GetHost(ctx, &args, opts...)
			var s GetHostResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetHostResultOutput)
}

// A collection of arguments for invoking getHost.
type GetHostOutputArgs struct {
	// should be set to `true`
	Active pulumi.BoolInput `pulumi:"active"`
}

func (GetHostOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHostArgs)(nil)).Elem()
}

// A collection of values returned by getHost.
type GetHostResultOutput struct{ *pulumi.OutputState }

func (GetHostResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHostResult)(nil)).Elem()
}

func (o GetHostResultOutput) ToGetHostResultOutput() GetHostResultOutput {
	return o
}

func (o GetHostResultOutput) ToGetHostResultOutputWithContext(ctx context.Context) GetHostResultOutput {
	return o
}

// should be set to `true`
func (o GetHostResultOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v GetHostResult) bool { return v.Active }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetHostResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostResult) string { return v.Id }).(pulumi.StringOutput)
}

// the url of the active cluster
func (o GetHostResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetHostResultOutput{})
}
