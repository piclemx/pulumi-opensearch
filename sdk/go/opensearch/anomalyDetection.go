// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an OpenSearch anonaly detection. Please refer to the OpenSearch anomaly detection documentation for details.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := opensearch.NewAnomalyDetection(ctx, "foo", &opensearch.AnomalyDetectionArgs{
//				Body: pulumi.String(`{
//	  "name": "foo",
//	  "description": "Test detector",
//	  "time_field": "@timestamp",
//	  "indices": [
//	    "security-auditlog*"
//	  ],
//	  "feature_attributes": [
//	    {
//	      "feature_name": "test",
//	      "feature_enabled": true,
//	      "aggregation_query": {
//	        "test": {
//	          "value_count": {
//	            "field": "audit_category.keyword"
//	          }
//	        }
//	      }
//	    }
//	  ],
//	  "filter_query": {
//	    "bool": {
//	      "filter": [
//	        {
//	          "range": {
//	            "value": {
//	              "gt": 1
//	            }
//	          }
//	        }
//	      ],
//	      "adjust_pure_negative": true,
//	      "boost": 1
//	    }
//	  },
//	  "detection_interval": {
//	    "period": {
//	      "interval": 1,
//	      "unit": "Minutes"
//	    }
//	  },
//	  "window_delay": {
//	    "period": {
//	      "interval": 1,
//	      "unit": "Minutes"
//	    }
//	  },
//	  "result_index" : "opensearch-ad-plugin-result-test"
//	}
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AnomalyDetection struct {
	pulumi.CustomResourceState

	// The anomaly detection document
	Body pulumi.StringOutput `pulumi:"body"`
}

// NewAnomalyDetection registers a new resource with the given unique name, arguments, and options.
func NewAnomalyDetection(ctx *pulumi.Context,
	name string, args *AnomalyDetectionArgs, opts ...pulumi.ResourceOption) (*AnomalyDetection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Body == nil {
		return nil, errors.New("invalid value for required argument 'Body'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AnomalyDetection
	err := ctx.RegisterResource("opensearch:index/anomalyDetection:AnomalyDetection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnomalyDetection gets an existing AnomalyDetection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnomalyDetection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnomalyDetectionState, opts ...pulumi.ResourceOption) (*AnomalyDetection, error) {
	var resource AnomalyDetection
	err := ctx.ReadResource("opensearch:index/anomalyDetection:AnomalyDetection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnomalyDetection resources.
type anomalyDetectionState struct {
	// The anomaly detection document
	Body *string `pulumi:"body"`
}

type AnomalyDetectionState struct {
	// The anomaly detection document
	Body pulumi.StringPtrInput
}

func (AnomalyDetectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*anomalyDetectionState)(nil)).Elem()
}

type anomalyDetectionArgs struct {
	// The anomaly detection document
	Body string `pulumi:"body"`
}

// The set of arguments for constructing a AnomalyDetection resource.
type AnomalyDetectionArgs struct {
	// The anomaly detection document
	Body pulumi.StringInput
}

func (AnomalyDetectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*anomalyDetectionArgs)(nil)).Elem()
}

type AnomalyDetectionInput interface {
	pulumi.Input

	ToAnomalyDetectionOutput() AnomalyDetectionOutput
	ToAnomalyDetectionOutputWithContext(ctx context.Context) AnomalyDetectionOutput
}

func (*AnomalyDetection) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalyDetection)(nil)).Elem()
}

func (i *AnomalyDetection) ToAnomalyDetectionOutput() AnomalyDetectionOutput {
	return i.ToAnomalyDetectionOutputWithContext(context.Background())
}

func (i *AnomalyDetection) ToAnomalyDetectionOutputWithContext(ctx context.Context) AnomalyDetectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalyDetectionOutput)
}

// AnomalyDetectionArrayInput is an input type that accepts AnomalyDetectionArray and AnomalyDetectionArrayOutput values.
// You can construct a concrete instance of `AnomalyDetectionArrayInput` via:
//
//	AnomalyDetectionArray{ AnomalyDetectionArgs{...} }
type AnomalyDetectionArrayInput interface {
	pulumi.Input

	ToAnomalyDetectionArrayOutput() AnomalyDetectionArrayOutput
	ToAnomalyDetectionArrayOutputWithContext(context.Context) AnomalyDetectionArrayOutput
}

type AnomalyDetectionArray []AnomalyDetectionInput

func (AnomalyDetectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnomalyDetection)(nil)).Elem()
}

func (i AnomalyDetectionArray) ToAnomalyDetectionArrayOutput() AnomalyDetectionArrayOutput {
	return i.ToAnomalyDetectionArrayOutputWithContext(context.Background())
}

func (i AnomalyDetectionArray) ToAnomalyDetectionArrayOutputWithContext(ctx context.Context) AnomalyDetectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalyDetectionArrayOutput)
}

// AnomalyDetectionMapInput is an input type that accepts AnomalyDetectionMap and AnomalyDetectionMapOutput values.
// You can construct a concrete instance of `AnomalyDetectionMapInput` via:
//
//	AnomalyDetectionMap{ "key": AnomalyDetectionArgs{...} }
type AnomalyDetectionMapInput interface {
	pulumi.Input

	ToAnomalyDetectionMapOutput() AnomalyDetectionMapOutput
	ToAnomalyDetectionMapOutputWithContext(context.Context) AnomalyDetectionMapOutput
}

type AnomalyDetectionMap map[string]AnomalyDetectionInput

func (AnomalyDetectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnomalyDetection)(nil)).Elem()
}

func (i AnomalyDetectionMap) ToAnomalyDetectionMapOutput() AnomalyDetectionMapOutput {
	return i.ToAnomalyDetectionMapOutputWithContext(context.Background())
}

func (i AnomalyDetectionMap) ToAnomalyDetectionMapOutputWithContext(ctx context.Context) AnomalyDetectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnomalyDetectionMapOutput)
}

type AnomalyDetectionOutput struct{ *pulumi.OutputState }

func (AnomalyDetectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnomalyDetection)(nil)).Elem()
}

func (o AnomalyDetectionOutput) ToAnomalyDetectionOutput() AnomalyDetectionOutput {
	return o
}

func (o AnomalyDetectionOutput) ToAnomalyDetectionOutputWithContext(ctx context.Context) AnomalyDetectionOutput {
	return o
}

// The anomaly detection document
func (o AnomalyDetectionOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v *AnomalyDetection) pulumi.StringOutput { return v.Body }).(pulumi.StringOutput)
}

type AnomalyDetectionArrayOutput struct{ *pulumi.OutputState }

func (AnomalyDetectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnomalyDetection)(nil)).Elem()
}

func (o AnomalyDetectionArrayOutput) ToAnomalyDetectionArrayOutput() AnomalyDetectionArrayOutput {
	return o
}

func (o AnomalyDetectionArrayOutput) ToAnomalyDetectionArrayOutputWithContext(ctx context.Context) AnomalyDetectionArrayOutput {
	return o
}

func (o AnomalyDetectionArrayOutput) Index(i pulumi.IntInput) AnomalyDetectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AnomalyDetection {
		return vs[0].([]*AnomalyDetection)[vs[1].(int)]
	}).(AnomalyDetectionOutput)
}

type AnomalyDetectionMapOutput struct{ *pulumi.OutputState }

func (AnomalyDetectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnomalyDetection)(nil)).Elem()
}

func (o AnomalyDetectionMapOutput) ToAnomalyDetectionMapOutput() AnomalyDetectionMapOutput {
	return o
}

func (o AnomalyDetectionMapOutput) ToAnomalyDetectionMapOutputWithContext(ctx context.Context) AnomalyDetectionMapOutput {
	return o
}

func (o AnomalyDetectionMapOutput) MapIndex(k pulumi.StringInput) AnomalyDetectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AnomalyDetection {
		return vs[0].(map[string]*AnomalyDetection)[vs[1].(string)]
	}).(AnomalyDetectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalyDetectionInput)(nil)).Elem(), &AnomalyDetection{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalyDetectionArrayInput)(nil)).Elem(), AnomalyDetectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnomalyDetectionMapInput)(nil)).Elem(), AnomalyDetectionMap{})
	pulumi.RegisterOutputType(AnomalyDetectionOutput{})
	pulumi.RegisterOutputType(AnomalyDetectionArrayOutput{})
	pulumi.RegisterOutputType(AnomalyDetectionMapOutput{})
}
