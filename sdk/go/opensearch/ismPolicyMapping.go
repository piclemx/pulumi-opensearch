// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an OpenSearch Index State Management (ISM) policy. Please refer to the OpenSearch ISM documentation for details.
//
// !> `IsmPolicyMapping` is deprecated in OpenSearch 1.x please use the `IsmPolicy` resource and specify the `ismTemplate` attribute in the policies instead.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := opensearch.NewIsmPolicyMapping(ctx, "test", &opensearch.IsmPolicyMappingArgs{
//				Indexes:  pulumi.String("test_index"),
//				PolicyId: pulumi.String("policy_1"),
//				State:    pulumi.String("delete"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Import by poilcy_id
//
// ```sh
//
//	$ pulumi import opensearch:index/ismPolicyMapping:IsmPolicyMapping test policy_1
//
// ```
type IsmPolicyMapping struct {
	pulumi.CustomResourceState

	// When updating multiple indices, you might want to include a state filter to only affect certain managed indices. The background process only applies the change if the index is currently in the state specified.
	Includes pulumi.MapArrayOutput `pulumi:"includes"`
	// Name of the index to apply the policy to. You can use an index pattern to update multiple indices at once.
	Indexes        pulumi.StringOutput      `pulumi:"indexes"`
	IsSafe         pulumi.BoolPtrOutput     `pulumi:"isSafe"`
	ManagedIndexes pulumi.StringArrayOutput `pulumi:"managedIndexes"`
	// The name of the policy.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// After a change in policy takes place, specify the state for the index to transition to
	State pulumi.StringPtrOutput `pulumi:"state"`
}

// NewIsmPolicyMapping registers a new resource with the given unique name, arguments, and options.
func NewIsmPolicyMapping(ctx *pulumi.Context,
	name string, args *IsmPolicyMappingArgs, opts ...pulumi.ResourceOption) (*IsmPolicyMapping, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Indexes == nil {
		return nil, errors.New("invalid value for required argument 'Indexes'")
	}
	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IsmPolicyMapping
	err := ctx.RegisterResource("opensearch:index/ismPolicyMapping:IsmPolicyMapping", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIsmPolicyMapping gets an existing IsmPolicyMapping resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIsmPolicyMapping(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IsmPolicyMappingState, opts ...pulumi.ResourceOption) (*IsmPolicyMapping, error) {
	var resource IsmPolicyMapping
	err := ctx.ReadResource("opensearch:index/ismPolicyMapping:IsmPolicyMapping", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IsmPolicyMapping resources.
type ismPolicyMappingState struct {
	// When updating multiple indices, you might want to include a state filter to only affect certain managed indices. The background process only applies the change if the index is currently in the state specified.
	Includes []map[string]interface{} `pulumi:"includes"`
	// Name of the index to apply the policy to. You can use an index pattern to update multiple indices at once.
	Indexes        *string  `pulumi:"indexes"`
	IsSafe         *bool    `pulumi:"isSafe"`
	ManagedIndexes []string `pulumi:"managedIndexes"`
	// The name of the policy.
	PolicyId *string `pulumi:"policyId"`
	// After a change in policy takes place, specify the state for the index to transition to
	State *string `pulumi:"state"`
}

type IsmPolicyMappingState struct {
	// When updating multiple indices, you might want to include a state filter to only affect certain managed indices. The background process only applies the change if the index is currently in the state specified.
	Includes pulumi.MapArrayInput
	// Name of the index to apply the policy to. You can use an index pattern to update multiple indices at once.
	Indexes        pulumi.StringPtrInput
	IsSafe         pulumi.BoolPtrInput
	ManagedIndexes pulumi.StringArrayInput
	// The name of the policy.
	PolicyId pulumi.StringPtrInput
	// After a change in policy takes place, specify the state for the index to transition to
	State pulumi.StringPtrInput
}

func (IsmPolicyMappingState) ElementType() reflect.Type {
	return reflect.TypeOf((*ismPolicyMappingState)(nil)).Elem()
}

type ismPolicyMappingArgs struct {
	// When updating multiple indices, you might want to include a state filter to only affect certain managed indices. The background process only applies the change if the index is currently in the state specified.
	Includes []map[string]interface{} `pulumi:"includes"`
	// Name of the index to apply the policy to. You can use an index pattern to update multiple indices at once.
	Indexes        string   `pulumi:"indexes"`
	IsSafe         *bool    `pulumi:"isSafe"`
	ManagedIndexes []string `pulumi:"managedIndexes"`
	// The name of the policy.
	PolicyId string `pulumi:"policyId"`
	// After a change in policy takes place, specify the state for the index to transition to
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a IsmPolicyMapping resource.
type IsmPolicyMappingArgs struct {
	// When updating multiple indices, you might want to include a state filter to only affect certain managed indices. The background process only applies the change if the index is currently in the state specified.
	Includes pulumi.MapArrayInput
	// Name of the index to apply the policy to. You can use an index pattern to update multiple indices at once.
	Indexes        pulumi.StringInput
	IsSafe         pulumi.BoolPtrInput
	ManagedIndexes pulumi.StringArrayInput
	// The name of the policy.
	PolicyId pulumi.StringInput
	// After a change in policy takes place, specify the state for the index to transition to
	State pulumi.StringPtrInput
}

func (IsmPolicyMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ismPolicyMappingArgs)(nil)).Elem()
}

type IsmPolicyMappingInput interface {
	pulumi.Input

	ToIsmPolicyMappingOutput() IsmPolicyMappingOutput
	ToIsmPolicyMappingOutputWithContext(ctx context.Context) IsmPolicyMappingOutput
}

func (*IsmPolicyMapping) ElementType() reflect.Type {
	return reflect.TypeOf((**IsmPolicyMapping)(nil)).Elem()
}

func (i *IsmPolicyMapping) ToIsmPolicyMappingOutput() IsmPolicyMappingOutput {
	return i.ToIsmPolicyMappingOutputWithContext(context.Background())
}

func (i *IsmPolicyMapping) ToIsmPolicyMappingOutputWithContext(ctx context.Context) IsmPolicyMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsmPolicyMappingOutput)
}

// IsmPolicyMappingArrayInput is an input type that accepts IsmPolicyMappingArray and IsmPolicyMappingArrayOutput values.
// You can construct a concrete instance of `IsmPolicyMappingArrayInput` via:
//
//	IsmPolicyMappingArray{ IsmPolicyMappingArgs{...} }
type IsmPolicyMappingArrayInput interface {
	pulumi.Input

	ToIsmPolicyMappingArrayOutput() IsmPolicyMappingArrayOutput
	ToIsmPolicyMappingArrayOutputWithContext(context.Context) IsmPolicyMappingArrayOutput
}

type IsmPolicyMappingArray []IsmPolicyMappingInput

func (IsmPolicyMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IsmPolicyMapping)(nil)).Elem()
}

func (i IsmPolicyMappingArray) ToIsmPolicyMappingArrayOutput() IsmPolicyMappingArrayOutput {
	return i.ToIsmPolicyMappingArrayOutputWithContext(context.Background())
}

func (i IsmPolicyMappingArray) ToIsmPolicyMappingArrayOutputWithContext(ctx context.Context) IsmPolicyMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsmPolicyMappingArrayOutput)
}

// IsmPolicyMappingMapInput is an input type that accepts IsmPolicyMappingMap and IsmPolicyMappingMapOutput values.
// You can construct a concrete instance of `IsmPolicyMappingMapInput` via:
//
//	IsmPolicyMappingMap{ "key": IsmPolicyMappingArgs{...} }
type IsmPolicyMappingMapInput interface {
	pulumi.Input

	ToIsmPolicyMappingMapOutput() IsmPolicyMappingMapOutput
	ToIsmPolicyMappingMapOutputWithContext(context.Context) IsmPolicyMappingMapOutput
}

type IsmPolicyMappingMap map[string]IsmPolicyMappingInput

func (IsmPolicyMappingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IsmPolicyMapping)(nil)).Elem()
}

func (i IsmPolicyMappingMap) ToIsmPolicyMappingMapOutput() IsmPolicyMappingMapOutput {
	return i.ToIsmPolicyMappingMapOutputWithContext(context.Background())
}

func (i IsmPolicyMappingMap) ToIsmPolicyMappingMapOutputWithContext(ctx context.Context) IsmPolicyMappingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IsmPolicyMappingMapOutput)
}

type IsmPolicyMappingOutput struct{ *pulumi.OutputState }

func (IsmPolicyMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IsmPolicyMapping)(nil)).Elem()
}

func (o IsmPolicyMappingOutput) ToIsmPolicyMappingOutput() IsmPolicyMappingOutput {
	return o
}

func (o IsmPolicyMappingOutput) ToIsmPolicyMappingOutputWithContext(ctx context.Context) IsmPolicyMappingOutput {
	return o
}

// When updating multiple indices, you might want to include a state filter to only affect certain managed indices. The background process only applies the change if the index is currently in the state specified.
func (o IsmPolicyMappingOutput) Includes() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *IsmPolicyMapping) pulumi.MapArrayOutput { return v.Includes }).(pulumi.MapArrayOutput)
}

// Name of the index to apply the policy to. You can use an index pattern to update multiple indices at once.
func (o IsmPolicyMappingOutput) Indexes() pulumi.StringOutput {
	return o.ApplyT(func(v *IsmPolicyMapping) pulumi.StringOutput { return v.Indexes }).(pulumi.StringOutput)
}

func (o IsmPolicyMappingOutput) IsSafe() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *IsmPolicyMapping) pulumi.BoolPtrOutput { return v.IsSafe }).(pulumi.BoolPtrOutput)
}

func (o IsmPolicyMappingOutput) ManagedIndexes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IsmPolicyMapping) pulumi.StringArrayOutput { return v.ManagedIndexes }).(pulumi.StringArrayOutput)
}

// The name of the policy.
func (o IsmPolicyMappingOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *IsmPolicyMapping) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

// After a change in policy takes place, specify the state for the index to transition to
func (o IsmPolicyMappingOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IsmPolicyMapping) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

type IsmPolicyMappingArrayOutput struct{ *pulumi.OutputState }

func (IsmPolicyMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IsmPolicyMapping)(nil)).Elem()
}

func (o IsmPolicyMappingArrayOutput) ToIsmPolicyMappingArrayOutput() IsmPolicyMappingArrayOutput {
	return o
}

func (o IsmPolicyMappingArrayOutput) ToIsmPolicyMappingArrayOutputWithContext(ctx context.Context) IsmPolicyMappingArrayOutput {
	return o
}

func (o IsmPolicyMappingArrayOutput) Index(i pulumi.IntInput) IsmPolicyMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IsmPolicyMapping {
		return vs[0].([]*IsmPolicyMapping)[vs[1].(int)]
	}).(IsmPolicyMappingOutput)
}

type IsmPolicyMappingMapOutput struct{ *pulumi.OutputState }

func (IsmPolicyMappingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IsmPolicyMapping)(nil)).Elem()
}

func (o IsmPolicyMappingMapOutput) ToIsmPolicyMappingMapOutput() IsmPolicyMappingMapOutput {
	return o
}

func (o IsmPolicyMappingMapOutput) ToIsmPolicyMappingMapOutputWithContext(ctx context.Context) IsmPolicyMappingMapOutput {
	return o
}

func (o IsmPolicyMappingMapOutput) MapIndex(k pulumi.StringInput) IsmPolicyMappingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IsmPolicyMapping {
		return vs[0].(map[string]*IsmPolicyMapping)[vs[1].(string)]
	}).(IsmPolicyMappingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IsmPolicyMappingInput)(nil)).Elem(), &IsmPolicyMapping{})
	pulumi.RegisterInputType(reflect.TypeOf((*IsmPolicyMappingArrayInput)(nil)).Elem(), IsmPolicyMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IsmPolicyMappingMapInput)(nil)).Elem(), IsmPolicyMappingMap{})
	pulumi.RegisterOutputType(IsmPolicyMappingOutput{})
	pulumi.RegisterOutputType(IsmPolicyMappingArrayOutput{})
	pulumi.RegisterOutputType(IsmPolicyMappingMapOutput{})
}
