// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an OpenSearch security user. Please refer to the OpenSearch Access Control documentation for details.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := opensearch.NewUser(ctx, "mapper", &opensearch.UserArgs{
//				Username:    pulumi.String("app-reasdder"),
//				Password:    pulumi.String("SuperSekret123!"),
//				Description: pulumi.String("a reader role for our app"),
//			})
//			if err != nil {
//				return err
//			}
//			readerRole, err := opensearch.NewRole(ctx, "readerRole", &opensearch.RoleArgs{
//				RoleName:    pulumi.String("app_reader"),
//				Description: pulumi.String("App Reader Role"),
//				IndexPermissions: opensearch.RoleIndexPermissionArray{
//					&opensearch.RoleIndexPermissionArgs{
//						IndexPatterns: pulumi.StringArray{
//							pulumi.String("app-*"),
//						},
//						AllowedActions: pulumi.StringArray{
//							pulumi.String("get"),
//							pulumi.String("read"),
//							pulumi.String("search"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			readerUser, err := opensearch.NewUser(ctx, "readerUser", &opensearch.UserArgs{
//				Username: pulumi.String("app-reader"),
//				Password: pulumi.Any(_var.Password),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = opensearch.NewRolesMapping(ctx, "readerRolesMapping", &opensearch.RolesMappingArgs{
//				RoleName:    readerRole.ID(),
//				Description: pulumi.String("App Reader Role"),
//				Users: pulumi.StringArray{
//					readerUser.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import opensearch:index/user:User reader app_reader
//
// ```
type User struct {
	pulumi.CustomResourceState

	// A map of arbitrary key value string pairs stored alongside of users.
	Attributes pulumi.StringMapOutput `pulumi:"attributes"`
	// A list of backend roles.
	BackendRoles pulumi.StringArrayOutput `pulumi:"backendRoles"`
	// Description of the user.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The plain text password for the user, cannot be specified with `passwordHash`. Some implementations may enforce a password policy. Invalid passwords may cause a non-descriptive HTTP 400 Bad Request error. For AWS OpenSearch domains "password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one digit, and one special character".
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The pre-hashed password for the user, cannot be specified with `password`.
	PasswordHash pulumi.StringPtrOutput `pulumi:"passwordHash"`
	// The name of the security user.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.PasswordHash != nil {
		args.PasswordHash = pulumi.ToSecret(args.PasswordHash).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"passwordHash",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("opensearch:index/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("opensearch:index/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// A map of arbitrary key value string pairs stored alongside of users.
	Attributes map[string]string `pulumi:"attributes"`
	// A list of backend roles.
	BackendRoles []string `pulumi:"backendRoles"`
	// Description of the user.
	Description *string `pulumi:"description"`
	// The plain text password for the user, cannot be specified with `passwordHash`. Some implementations may enforce a password policy. Invalid passwords may cause a non-descriptive HTTP 400 Bad Request error. For AWS OpenSearch domains "password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one digit, and one special character".
	Password *string `pulumi:"password"`
	// The pre-hashed password for the user, cannot be specified with `password`.
	PasswordHash *string `pulumi:"passwordHash"`
	// The name of the security user.
	Username *string `pulumi:"username"`
}

type UserState struct {
	// A map of arbitrary key value string pairs stored alongside of users.
	Attributes pulumi.StringMapInput
	// A list of backend roles.
	BackendRoles pulumi.StringArrayInput
	// Description of the user.
	Description pulumi.StringPtrInput
	// The plain text password for the user, cannot be specified with `passwordHash`. Some implementations may enforce a password policy. Invalid passwords may cause a non-descriptive HTTP 400 Bad Request error. For AWS OpenSearch domains "password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one digit, and one special character".
	Password pulumi.StringPtrInput
	// The pre-hashed password for the user, cannot be specified with `password`.
	PasswordHash pulumi.StringPtrInput
	// The name of the security user.
	Username pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// A map of arbitrary key value string pairs stored alongside of users.
	Attributes map[string]string `pulumi:"attributes"`
	// A list of backend roles.
	BackendRoles []string `pulumi:"backendRoles"`
	// Description of the user.
	Description *string `pulumi:"description"`
	// The plain text password for the user, cannot be specified with `passwordHash`. Some implementations may enforce a password policy. Invalid passwords may cause a non-descriptive HTTP 400 Bad Request error. For AWS OpenSearch domains "password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one digit, and one special character".
	Password *string `pulumi:"password"`
	// The pre-hashed password for the user, cannot be specified with `password`.
	PasswordHash *string `pulumi:"passwordHash"`
	// The name of the security user.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// A map of arbitrary key value string pairs stored alongside of users.
	Attributes pulumi.StringMapInput
	// A list of backend roles.
	BackendRoles pulumi.StringArrayInput
	// Description of the user.
	Description pulumi.StringPtrInput
	// The plain text password for the user, cannot be specified with `passwordHash`. Some implementations may enforce a password policy. Invalid passwords may cause a non-descriptive HTTP 400 Bad Request error. For AWS OpenSearch domains "password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one digit, and one special character".
	Password pulumi.StringPtrInput
	// The pre-hashed password for the user, cannot be specified with `password`.
	PasswordHash pulumi.StringPtrInput
	// The name of the security user.
	Username pulumi.StringInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// A map of arbitrary key value string pairs stored alongside of users.
func (o UserOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *User) pulumi.StringMapOutput { return v.Attributes }).(pulumi.StringMapOutput)
}

// A list of backend roles.
func (o UserOutput) BackendRoles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *User) pulumi.StringArrayOutput { return v.BackendRoles }).(pulumi.StringArrayOutput)
}

// Description of the user.
func (o UserOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The plain text password for the user, cannot be specified with `passwordHash`. Some implementations may enforce a password policy. Invalid passwords may cause a non-descriptive HTTP 400 Bad Request error. For AWS OpenSearch domains "password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one digit, and one special character".
func (o UserOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The pre-hashed password for the user, cannot be specified with `password`.
func (o UserOutput) PasswordHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.PasswordHash }).(pulumi.StringPtrOutput)
}

// The name of the security user.
func (o UserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
