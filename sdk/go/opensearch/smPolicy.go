// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package opensearch

import (
	"context"
	"reflect"

	"errors"
	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides an OpenSearch Snapshot Management (SM) policy. Please refer to the OpenSearch SM documentation for details.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/piclemx/pulumi-opensearch/sdk/go/opensearch"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			repo, err := opensearch.NewSnapshotRepository(ctx, "repo", &opensearch.SnapshotRepositoryArgs{
//				Type: pulumi.String("s3"),
//				Settings: pulumi.Map{
//					"bucket":                 pulumi.Any(module.S3_snapshot.S3_bucket_id),
//					"region":                 pulumi.Any(module.S3_snapshot.S3_bucket_region),
//					"role_arn":               pulumi.Any(aws_iam_role.Snapshot_create.Arn),
//					"server_side_encryption": pulumi.Any(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = opensearch.NewSmPolicy(ctx, "snapshotToS3", &opensearch.SmPolicyArgs{
//				PolicyName: pulumi.String("snapshot_to_s3"),
//				Body: repo.Name.ApplyT(func(name string) (pulumi.String, error) {
//					var _zero pulumi.String
//					tmpJSON0, err := json.Marshal(map[string]interface{}{
//						"enabled":     true,
//						"description": "My snapshot policy",
//						"creation": map[string]interface{}{
//							"schedule": map[string]interface{}{
//								"cron": map[string]interface{}{
//									"expression": "0 0 * * *",
//									"timezone":   "UTC",
//								},
//							},
//							"time_limit": "1h",
//						},
//						"deletion": map[string]interface{}{
//							"schedule": map[string]interface{}{
//								"cron": map[string]interface{}{
//									"expression": "0 0 * * *",
//									"timezone":   "UTC",
//								},
//							},
//							"condition": map[string]interface{}{
//								"max_age":   "14d",
//								"max_count": 400,
//								"min_count": 1,
//							},
//							"time_limit": "1h",
//						},
//						"snapshot_config": map[string]interface{}{
//							"timezone":   "UTC",
//							"indices":    "*",
//							"repository": name,
//						},
//					})
//					if err != nil {
//						return _zero, err
//					}
//					json0 := string(tmpJSON0)
//					return pulumi.String(json0), nil
//				}).(pulumi.StringOutput),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import opensearch:index/smPolicy:SmPolicy cleanup snapshot_to_s3
//
// ```
type SmPolicy struct {
	pulumi.CustomResourceState

	// The policy document.
	Body pulumi.StringOutput `pulumi:"body"`
	// The name of the SM policy.
	PolicyName pulumi.StringOutput `pulumi:"policyName"`
	// The primary term of the SM policy version.
	PrimaryTerm pulumi.IntOutput `pulumi:"primaryTerm"`
	// The sequence number of the SM policy version.
	SeqNo pulumi.IntOutput `pulumi:"seqNo"`
}

// NewSmPolicy registers a new resource with the given unique name, arguments, and options.
func NewSmPolicy(ctx *pulumi.Context,
	name string, args *SmPolicyArgs, opts ...pulumi.ResourceOption) (*SmPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Body == nil {
		return nil, errors.New("invalid value for required argument 'Body'")
	}
	if args.PolicyName == nil {
		return nil, errors.New("invalid value for required argument 'PolicyName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SmPolicy
	err := ctx.RegisterResource("opensearch:index/smPolicy:SmPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSmPolicy gets an existing SmPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSmPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SmPolicyState, opts ...pulumi.ResourceOption) (*SmPolicy, error) {
	var resource SmPolicy
	err := ctx.ReadResource("opensearch:index/smPolicy:SmPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SmPolicy resources.
type smPolicyState struct {
	// The policy document.
	Body *string `pulumi:"body"`
	// The name of the SM policy.
	PolicyName *string `pulumi:"policyName"`
	// The primary term of the SM policy version.
	PrimaryTerm *int `pulumi:"primaryTerm"`
	// The sequence number of the SM policy version.
	SeqNo *int `pulumi:"seqNo"`
}

type SmPolicyState struct {
	// The policy document.
	Body pulumi.StringPtrInput
	// The name of the SM policy.
	PolicyName pulumi.StringPtrInput
	// The primary term of the SM policy version.
	PrimaryTerm pulumi.IntPtrInput
	// The sequence number of the SM policy version.
	SeqNo pulumi.IntPtrInput
}

func (SmPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*smPolicyState)(nil)).Elem()
}

type smPolicyArgs struct {
	// The policy document.
	Body string `pulumi:"body"`
	// The name of the SM policy.
	PolicyName string `pulumi:"policyName"`
	// The primary term of the SM policy version.
	PrimaryTerm *int `pulumi:"primaryTerm"`
	// The sequence number of the SM policy version.
	SeqNo *int `pulumi:"seqNo"`
}

// The set of arguments for constructing a SmPolicy resource.
type SmPolicyArgs struct {
	// The policy document.
	Body pulumi.StringInput
	// The name of the SM policy.
	PolicyName pulumi.StringInput
	// The primary term of the SM policy version.
	PrimaryTerm pulumi.IntPtrInput
	// The sequence number of the SM policy version.
	SeqNo pulumi.IntPtrInput
}

func (SmPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*smPolicyArgs)(nil)).Elem()
}

type SmPolicyInput interface {
	pulumi.Input

	ToSmPolicyOutput() SmPolicyOutput
	ToSmPolicyOutputWithContext(ctx context.Context) SmPolicyOutput
}

func (*SmPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SmPolicy)(nil)).Elem()
}

func (i *SmPolicy) ToSmPolicyOutput() SmPolicyOutput {
	return i.ToSmPolicyOutputWithContext(context.Background())
}

func (i *SmPolicy) ToSmPolicyOutputWithContext(ctx context.Context) SmPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmPolicyOutput)
}

// SmPolicyArrayInput is an input type that accepts SmPolicyArray and SmPolicyArrayOutput values.
// You can construct a concrete instance of `SmPolicyArrayInput` via:
//
//	SmPolicyArray{ SmPolicyArgs{...} }
type SmPolicyArrayInput interface {
	pulumi.Input

	ToSmPolicyArrayOutput() SmPolicyArrayOutput
	ToSmPolicyArrayOutputWithContext(context.Context) SmPolicyArrayOutput
}

type SmPolicyArray []SmPolicyInput

func (SmPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmPolicy)(nil)).Elem()
}

func (i SmPolicyArray) ToSmPolicyArrayOutput() SmPolicyArrayOutput {
	return i.ToSmPolicyArrayOutputWithContext(context.Background())
}

func (i SmPolicyArray) ToSmPolicyArrayOutputWithContext(ctx context.Context) SmPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmPolicyArrayOutput)
}

// SmPolicyMapInput is an input type that accepts SmPolicyMap and SmPolicyMapOutput values.
// You can construct a concrete instance of `SmPolicyMapInput` via:
//
//	SmPolicyMap{ "key": SmPolicyArgs{...} }
type SmPolicyMapInput interface {
	pulumi.Input

	ToSmPolicyMapOutput() SmPolicyMapOutput
	ToSmPolicyMapOutputWithContext(context.Context) SmPolicyMapOutput
}

type SmPolicyMap map[string]SmPolicyInput

func (SmPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmPolicy)(nil)).Elem()
}

func (i SmPolicyMap) ToSmPolicyMapOutput() SmPolicyMapOutput {
	return i.ToSmPolicyMapOutputWithContext(context.Background())
}

func (i SmPolicyMap) ToSmPolicyMapOutputWithContext(ctx context.Context) SmPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SmPolicyMapOutput)
}

type SmPolicyOutput struct{ *pulumi.OutputState }

func (SmPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SmPolicy)(nil)).Elem()
}

func (o SmPolicyOutput) ToSmPolicyOutput() SmPolicyOutput {
	return o
}

func (o SmPolicyOutput) ToSmPolicyOutputWithContext(ctx context.Context) SmPolicyOutput {
	return o
}

// The policy document.
func (o SmPolicyOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v *SmPolicy) pulumi.StringOutput { return v.Body }).(pulumi.StringOutput)
}

// The name of the SM policy.
func (o SmPolicyOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *SmPolicy) pulumi.StringOutput { return v.PolicyName }).(pulumi.StringOutput)
}

// The primary term of the SM policy version.
func (o SmPolicyOutput) PrimaryTerm() pulumi.IntOutput {
	return o.ApplyT(func(v *SmPolicy) pulumi.IntOutput { return v.PrimaryTerm }).(pulumi.IntOutput)
}

// The sequence number of the SM policy version.
func (o SmPolicyOutput) SeqNo() pulumi.IntOutput {
	return o.ApplyT(func(v *SmPolicy) pulumi.IntOutput { return v.SeqNo }).(pulumi.IntOutput)
}

type SmPolicyArrayOutput struct{ *pulumi.OutputState }

func (SmPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SmPolicy)(nil)).Elem()
}

func (o SmPolicyArrayOutput) ToSmPolicyArrayOutput() SmPolicyArrayOutput {
	return o
}

func (o SmPolicyArrayOutput) ToSmPolicyArrayOutputWithContext(ctx context.Context) SmPolicyArrayOutput {
	return o
}

func (o SmPolicyArrayOutput) Index(i pulumi.IntInput) SmPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SmPolicy {
		return vs[0].([]*SmPolicy)[vs[1].(int)]
	}).(SmPolicyOutput)
}

type SmPolicyMapOutput struct{ *pulumi.OutputState }

func (SmPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SmPolicy)(nil)).Elem()
}

func (o SmPolicyMapOutput) ToSmPolicyMapOutput() SmPolicyMapOutput {
	return o
}

func (o SmPolicyMapOutput) ToSmPolicyMapOutputWithContext(ctx context.Context) SmPolicyMapOutput {
	return o
}

func (o SmPolicyMapOutput) MapIndex(k pulumi.StringInput) SmPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SmPolicy {
		return vs[0].(map[string]*SmPolicy)[vs[1].(string)]
	}).(SmPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SmPolicyInput)(nil)).Elem(), &SmPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmPolicyArrayInput)(nil)).Elem(), SmPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SmPolicyMapInput)(nil)).Elem(), SmPolicyMap{})
	pulumi.RegisterOutputType(SmPolicyOutput{})
	pulumi.RegisterOutputType(SmPolicyArrayOutput{})
	pulumi.RegisterOutputType(SmPolicyMapOutput{})
}
